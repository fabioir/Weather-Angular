var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/components/AboutComponent.html",[0,0.405,1,0.987]],["body/components/AboutComponent.html",[0,0.729,1,1.703,2,0.219,3,0.283,4,1.48,5,1.48,6,1.48,7,0.156,8,3.039,9,1.981,10,2.398,11,1.48,12,2.577,13,2.277,14,1.849,15,4.812,16,1.849,17,4.812,18,0.252,19,0.939,20,2.561,21,0.596,22,0.43,23,3.594,24,3.594,25,0.605,26,0.026,27,1.129,28,0.358,29,0.605,30,0.188,31,0.139,32,1.381,33,2.4,34,2.673,35,3.039,36,2.673,37,2.922,38,4.899,39,1.981,40,2.679,41,4.812,42,3.214,43,4.812,44,3.214,45,4.069,46,2.679,47,3.579,48,4.069,49,1.324,50,1.238,51,1.728,52,1.008,53,3.869,54,3.214,55,4.812,56,5.793,57,3.579,58,4.812,59,4.812,60,4.069,61,4.812,62,4.812,63,4.812,64,2.471,65,4.069,66,4.069,67,4.812,68,4.812,69,4.812,70,4.812,71,4.812,72,4.812,73,4.812,74,4.812,75,1.057,76,1.981,77,1.728,78,1.849,79,2.385,80,1.48,81,0.635,82,1.48,83,1.129,84,1.48,85,1.057,86,1.48,87,1.057,88,1.48,89,1.057,90,1.48,91,1.129,92,1.48,93,1.129,94,1.381,95,1.48,96,1.129,97,1.48,98,0.989,99,0.358,100,1.48,101,1.057,102,1.207,103,1.48,104,0.018,105,0.018]],["title/components/AppComponent.html",[0,0.405,83,1.055]],["body/components/AppComponent.html",[0,0.769,1,1.247,2,0.259,3,0.221,4,1.747,5,1.747,6,1.747,7,0.185,11,1.747,12,2.639,13,2.306,14,2.06,16,2.06,18,0.298,22,0.379,26,0.026,28,0.422,29,0.714,30,0.221,31,0.164,40,2.984,51,1.925,75,1.247,76,2.207,77,1.925,78,2.06,79,2.542,80,1.747,81,0.707,82,1.747,83,1.94,84,1.747,85,1.247,86,1.747,87,1.247,88,1.747,89,1.247,90,1.747,91,1.333,92,1.747,93,1.333,94,1.63,95,1.747,96,1.333,97,1.747,98,1.167,99,0.422,100,1.747,101,1.247,102,1.424,103,1.747,104,0.02,105,0.02,106,3.587,107,2.207,108,5.36,109,5.36,110,0.647,111,6.173,112,0.769,113,0.338,114,1.333,115,1.092,116,4.242]],["title/modules/AppModule.html",[117,1.484,118,2.243]],["body/modules/AppModule.html",[0,0.389,1,1.769,2,0.197,3,0.168,7,0.14,13,1.083,26,0.026,28,0.687,29,0.542,30,0.233,31,0.125,37,1.958,40,1.795,46,2.855,75,0.948,83,2.07,85,1.769,87,1.769,89,1.769,91,1.939,93,1.976,94,1.239,96,1.891,98,1.656,99,0.321,101,1.769,104,0.017,105,0.017,107,1.328,117,1.975,118,4.659,119,2.154,120,3.815,121,4.337,122,2.726,123,2.726,124,2.726,125,2.726,126,3.654,127,3.654,128,3.779,129,2.399,130,2.154,131,3.224,132,4.469,133,4.469,134,2.399,135,2.399,136,3.324,137,3.224,138,2.726,139,4.469,140,2.488,141,4.469,142,2.488,143,3.224,144,2.726,145,3.224,146,3.224,147,2.726,148,3.224,149,2.726,150,2.726,151,2.399,152,3.224,153,2.154,154,2.726,155,3.779,156,4.469,157,1.534,158,4.469,159,1.795,160,2.399,161,2.726,162,2.726,163,3.224,164,4.469,165,3.224,166,3.224,167,1.958,168,3.224,169,3.224,170,2.726,171,3.224,172,3.224,173,3.224,174,1.158,175,2.154,176,3.224,177,3.224,178,3.224,179,3.224]],["title/modules/AppRoutingModule.html",[117,1.484,126,2.039]],["body/modules/AppRoutingModule.html",[0,0.798,1,1.524,2,0.246,3,0.21,7,0.175,26,0.027,28,0.678,29,0.677,30,0.27,31,0.156,32,1.546,37,2.443,85,1.524,87,1.685,89,1.524,98,1.426,99,0.4,101,1.524,102,1.351,104,0.019,105,0.019,117,2.29,126,3.146,134,2.992,136,3.854,138,3.402,144,3.402,147,3.402,157,1.913,159,2.24,160,2.992,161,3.402,162,3.402,180,4.023,181,4.023,182,3.402,183,2.687,184,5.181,185,3.108,186,1.656,187,5.181,188,4.023,189,4.381,190,5.181,191,4.916,192,4.023,193,4.381,194,4.023,195,4.023,196,4.023,197,2.066,198,1.913,199,4.023,200,4.023,201,2.066,202,2.687,203,2.687,204,3.402,205,4.023,206,4.023,207,4.023,208,3.402]],["title/classes/CitiesResponse.html",[31,0.13,209,1.869]],["body/classes/CitiesResponse.html",[2,0.277,3,0.236,7,0.197,18,0.318,21,0.498,22,0.405,25,0.762,26,0.026,28,0.451,30,0.316,31,0.245,49,1.247,52,1.324,99,0.451,104,0.021,105,0.021,110,0.674,112,0.932,113,0.361,209,3.109,210,3.026,211,1.485,212,4.531,213,1.876,214,2.003,215,2.657,216,2.155,217,3.371,218,3.371,219,2.523,220,1.741,221,3.371,222,3.371,223,3.371,224,3.371,225,1.247,226,3.371,227,3.371,228,3.371,229,3.371,230,3.371,231,2.523]],["title/classes/CitiesResponseUnit.html",[31,0.13,231,1.869]],["body/classes/CitiesResponseUnit.html",[2,0.277,3,0.236,7,0.197,18,0.318,21,0.498,22,0.405,25,0.762,26,0.026,28,0.451,30,0.316,31,0.245,49,1.739,52,0.949,99,0.451,104,0.021,105,0.021,110,0.674,112,0.962,113,0.361,209,2.523,210,3.026,211,1.42,213,1.876,214,2.003,215,2.657,216,2.155,217,3.371,218,3.371,219,2.523,220,1.741,221,3.371,222,3.371,223,3.371,224,3.371,225,1.247,226,3.371,227,3.371,228,3.371,229,3.371,230,3.371,231,3.109,232,4.531]],["title/injectables/CitiesServerService.html",[233,0.808,234,2.039]],["body/injectables/CitiesServerService.html",[2,0.133,3,0.114,7,0.095,18,0.153,19,0.655,21,0.369,22,0.545,25,1.059,26,0.027,27,0.685,28,0.494,29,0.367,30,0.114,31,0.085,32,0.838,39,0.898,44,1.457,49,1.441,50,0.864,60,1.844,81,0.814,99,0.543,104,0.02,105,0.012,107,0.898,110,0.405,112,0.944,113,0.502,114,1.285,115,1.404,140,1.214,174,1.205,175,1.457,198,1.037,211,1.368,213,1.666,219,2.916,225,1.264,233,0.984,234,2.038,235,5.216,236,1.844,237,4.19,238,3.885,239,3.885,240,3.356,241,3.356,242,3.356,243,2.359,244,3.356,245,3.356,246,3.459,247,1.844,248,3.068,249,2.412,250,3.356,251,0.849,252,0.99,253,2.242,254,3.356,255,6.516,256,2.181,257,3.356,258,1.646,259,2.181,260,3.356,261,2.181,262,2.181,263,3.885,264,3.356,265,2.181,266,3.356,267,2.181,268,3.356,269,2.181,270,2.838,271,2.838,272,2.181,273,2.838,274,3.356,275,2.181,276,2.497,277,2.181,278,3.313,279,1.214,280,1.869,281,1.12,282,1.214,283,1.037,284,1.29,285,1.214,286,2.838,287,1.205,288,1.382,289,2.733,290,4.594,291,3.885,292,3.068,293,4.594,294,4.594,295,2.181,296,4.594,297,2.181,298,4.091,299,3.459,300,2.181,301,1.457,302,3.356,303,2.038,304,2.181,305,1.844,306,2.181,307,5.238,308,3.69,309,2.181,310,2.181,311,3.356,312,2.181,313,3.356,314,2.181,315,3.356,316,3.356,317,3.356,318,3.356,319,3.356,320,2.181,321,2.181,322,3.356,323,3.356,324,3.356,325,2.497,326,3.356,327,3.356,328,3.356,329,2.038,330,2.038,331,2.038,332,2.838,333,3.356,334,3.356,335,3.356,336,3.356,337,3.356,338,3.356,339,2.181,340,0.964,341,2.181,342,1.324,343,2.181,344,2.181,345,2.181,346,2.181,347,2.181,348,2.181,349,2.181,350,2.181,351,2.181,352,1.844,353,0.898]],["title/components/CityComponent.html",[0,0.405,85,0.987]],["body/components/CityComponent.html",[0,0.686,1,0.721,2,0.268,3,0.128,4,1.511,5,1.01,6,1.01,7,0.107,9,1.511,10,1.943,11,1.01,12,2.403,13,2.1,14,1.41,16,1.41,18,0.172,19,0.716,20,2.157,21,0.403,22,0.559,25,0.74,26,0.026,27,1.381,28,0.629,29,0.413,30,0.128,31,0.095,32,1.41,39,1.01,49,1.508,50,0.945,51,1.752,52,1.095,75,0.721,76,1.511,77,1.318,78,1.41,79,2.009,80,1.01,81,0.644,82,1.01,83,0.771,84,1.01,85,1.435,86,1.01,87,1.079,88,1.01,89,0.721,90,1.01,91,0.771,92,1.01,93,0.771,94,0.943,95,1.01,96,0.771,97,1.01,98,0.675,99,0.565,100,1.01,101,0.721,102,0.824,103,1.01,104,0.014,105,0.014,110,0.443,113,0.437,114,1.381,115,1.565,157,1.746,183,1.639,185,2.258,186,1.01,191,1.825,197,1.26,203,1.639,208,3.103,211,1.174,213,1.754,220,0.943,225,1.01,249,2.512,251,0.853,252,0.445,281,2.258,282,1.366,284,2.106,288,1.511,289,1.639,342,1.49,354,2.075,355,3.67,356,3.67,357,4.879,358,5.482,359,4.879,360,2.337,361,3.886,362,4.879,363,4.879,364,3.797,365,4.879,366,4.879,367,2.075,368,4.126,369,5.682,370,2.918,371,3.45,372,3.27,373,3.63,374,3.67,375,2.454,376,2.454,377,2.454,378,2.454,379,2.454,380,2.454,381,2.454,382,2.682,383,2.454,384,2.454,385,2.454,386,2.454,387,1.639,388,2.075,389,2.454,390,2.454,391,1.885,392,2.454,393,2.454,394,1.825,395,1.26,396,2.075,397,2.454,398,2.454,399,2.454,400,2.075,401,2.075,402,2.454,403,2.454,404,2.454,405,2.454,406,2.454,407,2.075,408,2.454,409,2.454,410,2.454,411,2.454,412,2.454,413,1.49,414,1.366,415,2.454,416,2.454,417,2.454,418,2.454,419,2.075,420,2.454,421,2.075,422,1.49,423,2.67,424,2.454,425,2.454,426,2.454,427,2.454,428,2.454,429,2.454,430,2.454,431,2.454,432,1.825,433,2.075,434,2.67,435,1.49,436,1.825,437,2.454,438,2.075,439,1.49,440,1.825,441,2.454,442,1.825,443,2.075,444,1.639,445,2.454,446,2.075,447,2.454,448,3.67,449,3.67,450,3.67,451,3.67]],["title/injectables/CloudsAndWindService.html",[233,0.808,452,2.243]],["body/injectables/CloudsAndWindService.html",[2,0.211,3,0.18,7,0.15,18,0.243,19,0.915,21,0.585,22,0.55,25,1.034,26,0.027,28,0.529,29,0.582,30,0.18,31,0.134,50,0.89,52,1.114,75,1.016,81,0.456,99,0.344,104,0.017,105,0.017,107,1.423,110,0.566,112,0.763,113,0.501,174,2.14,211,1.195,220,2.191,225,1.29,233,1.279,251,0.538,252,0.85,258,1.931,283,1.644,285,2.609,288,1.93,360,2.044,439,2.099,452,3.13,453,5.315,454,2.923,455,4.417,456,3.499,457,3.808,458,3.499,459,4.687,460,3.456,461,4.687,462,3.456,463,3.456,464,3.456,465,3.456,466,3.456,467,1.924,468,2.099,469,2.846,470,3.956,471,3.456,472,2.846,473,3.456,474,3.486,475,2.571,476,3.486,477,3.456,478,2.571,479,4.241,480,2.571,481,2.099,482,3.486,483,3.456,484,3.963,485,2.923,486,2.923,487,4.687,488,2.923,489,4.687,490,2.571,491,2.571,492,2.571,493,2.571,494,4.687,495,3.963,496,2.229,497,3.963,498,3.456,499,3.456,500,2.571,501,2.571]],["title/classes/Data.html",[31,0.13,52,0.704]],["body/classes/Data.html",[2,0.212,3,0.181,7,0.151,18,0.244,21,0.628,22,0.477,26,0.027,28,0.346,30,0.278,31,0.222,32,1.336,39,1.938,46,1.936,49,0.957,50,1.211,51,2.211,52,1.29,64,1.786,99,0.468,104,0.017,105,0.017,110,0.568,112,0.904,113,0.425,115,1.471,197,1.786,201,1.786,211,1.284,225,0.957,251,0.89,258,2.121,287,2.053,340,1.537,353,1.432,360,2.197,382,1.786,391,1.786,413,2.112,414,1.936,435,2.858,456,1.936,458,1.936,469,2.112,472,2.112,481,2.858,502,2.323,503,4.706,504,3.478,505,2.587,506,2.587,507,2.323,508,2.587,509,2.858,510,3.143,511,3.143,512,3.143,513,3.143,514,3.143,515,3.501,516,3.143,517,3.143,518,1.936,519,3.143,520,1.936,521,1.936,522,2.587,523,2.323,524,2.587,525,2.323,526,2.587,527,2.587,528,2.587,529,2.323,530,2.587,531,2.587,532,2.587,533,2.587,534,2.587,535,2.587,536,2.587,537,2.587,538,2.587,539,2.587,540,2.323,541,2.587,542,2.323,543,2.587,544,2.323,545,2.587,546,2.323,547,2.587,548,2.587,549,2.587,550,2.587,551,2.587,552,2.587,553,2.112,554,2.587,555,2.587,556,2.587,557,2.112,558,2.587,559,2.587,560,3.143,561,1.786,562,2.323,563,2.323,564,2.112,565,2.587]],["title/classes/Forecast.html",[31,0.13,360,1.29]],["body/classes/Forecast.html",[2,0.192,3,0.164,7,0.137,18,0.221,21,0.557,22,0.568,26,0.026,28,0.313,30,0.264,31,0.212,32,1.21,39,1.81,46,1.753,49,0.866,50,1.131,51,2.281,52,1.208,64,1.616,77,1.13,81,0.415,99,0.437,104,0.016,105,0.016,110,0.531,112,0.828,113,0.536,115,0.81,197,1.616,201,1.616,211,1.342,225,0.866,251,0.684,252,0.571,258,2.146,287,1.968,340,1.391,353,1.296,360,2.355,382,1.616,391,1.616,413,1.912,414,1.753,435,2.669,456,3.051,458,3.051,469,1.912,472,1.912,481,2.669,502,2.103,505,2.342,506,2.342,507,3.66,508,4.077,509,3.501,510,2.935,511,2.935,512,2.935,513,2.935,514,2.935,515,3.269,516,2.935,517,2.935,518,1.753,519,2.935,520,3.051,521,3.051,522,3.269,523,2.103,524,2.342,525,2.103,526,2.342,527,2.342,528,2.342,529,2.103,530,2.342,531,2.342,532,2.342,533,2.342,534,2.342,535,2.342,536,2.342,537,2.342,538,2.342,539,2.342,540,2.103,541,2.342,542,2.103,543,2.342,544,2.103,545,2.342,546,2.103,547,2.342,548,2.342,549,2.342,550,2.342,551,2.342,552,2.342,553,1.912,554,2.342,555,2.342,556,2.342,557,1.912,558,2.342,559,2.342,560,2.935,561,1.616,562,2.103,563,2.103,564,1.912,565,2.342,566,4.395,567,4.442,568,3.148,569,3.148,570,3.148,571,3.148,572,3.148,573,3.148,574,3.148]],["title/injectables/ForecastValuesService.html",[233,0.808,371,2.039]],["body/injectables/ForecastValuesService.html",[2,0.229,3,0.196,7,0.164,18,0.264,19,0.967,21,0.609,22,0.589,25,1.096,26,0.026,27,1.557,28,0.587,29,0.632,30,0.196,31,0.146,37,2.28,39,1.546,49,1.732,81,0.654,99,0.493,104,0.018,105,0.018,107,1.546,110,0.598,113,0.442,114,1.557,115,1.577,211,1.442,213,2.234,233,1.334,251,0.771,252,0.899,283,1.786,340,1.66,360,1.904,371,3.008,422,3.721,423,2.28,467,2.091,575,5.626,576,3.175,577,4.985,578,4.385,579,4.385,580,5.895,581,4.954,582,4.954,583,3.755,584,3.755,585,3.755,586,3.087,587,3.755,588,4.954,589,3.755,590,4.954,591,3.755,592,3.755,593,3.755,594,4.124,595,3.755,596,1.786,597,2.793,598,4.189,599,3.755,600,3.685,601,2.793,602,3.755,603,3.755]],["title/components/GraphsComponent.html",[0,0.405,87,0.987]],["body/components/GraphsComponent.html",[0,0.633,1,0.642,2,0.133,3,0.114,4,0.899,5,0.899,6,0.899,7,0.095,9,1.383,10,1.81,11,0.899,12,2.341,13,2.046,14,1.291,16,1.291,18,0.153,19,0.655,20,2.032,21,0.369,22,0.58,25,0.773,26,0.027,27,1.444,28,0.575,29,0.367,30,0.114,31,0.085,32,0.839,49,1.55,50,0.864,53,1.458,75,0.642,76,1.383,77,1.206,78,1.291,79,1.893,80,0.899,81,0.54,82,0.899,83,0.686,84,0.899,85,0.642,86,0.899,87,1.352,88,0.899,89,0.642,90,0.899,91,0.686,92,0.899,93,0.686,94,0.839,95,0.899,96,0.686,97,0.899,98,0.601,99,0.217,100,0.899,101,0.642,102,0.733,103,0.899,104,0.012,105,0.012,110,0.406,112,0.83,113,0.497,114,1.286,115,1.277,185,2.36,186,0.899,197,1.725,211,0.92,225,0.601,251,0.34,252,0.396,258,1.979,284,2.014,287,2.261,360,1.573,368,3.887,370,2.803,371,3.182,387,1.458,388,1.846,391,1.725,395,1.121,400,1.846,401,1.846,419,1.846,421,1.846,422,1.326,423,1.326,434,1.326,452,3.646,455,4.121,456,1.87,457,3.07,458,1.87,467,1.216,468,1.326,520,2.917,521,2.917,577,3.887,598,4.431,600,1.624,604,1.846,605,3.359,606,3.359,607,4.596,608,5.24,609,5.24,610,4.596,611,5.24,612,4.596,613,4.389,614,3.887,615,3.887,616,4.596,617,4.596,618,2.183,619,3.646,620,3.646,621,3.359,622,2.183,623,2.183,624,2.183,625,2.183,626,2.183,627,2.183,628,2.183,629,2.183,630,2.183,631,2.183,632,2.183,633,2.183,634,2.183,635,2.183,636,2.183,637,2.183,638,2.183,639,2.183,640,2.183,641,2.183,642,2.183,643,2.183,644,2.183,645,2.183,646,5.458,647,2.84,648,5.458,649,2.183,650,5.458,651,2.183,652,2.183,653,2.183,654,2.183,655,4.596,656,4.094,657,4.596,658,4.596,659,4.094,660,2.183,661,1.458,662,2.183,663,2.183,664,2.183,665,1.216]],["title/components/InitialComponent.html",[0,0.405,89,0.987]],["body/components/InitialComponent.html",[0,0.614,1,0.597,2,0.124,3,0.166,4,0.836,5,0.836,6,0.836,7,0.088,9,1.307,10,1.728,11,0.836,12,2.301,13,2.039,14,1.22,16,1.22,18,0.143,19,0.763,20,1.954,21,0.349,22,0.573,25,0.951,26,0.026,27,1.67,28,0.529,29,0.342,30,0.106,31,0.079,32,0.78,33,1.356,34,1.51,35,1.717,36,2.362,37,1.928,40,1.768,44,2.12,45,2.685,48,3.738,49,1.763,50,0.522,51,1.14,53,2.12,54,2.12,75,0.597,76,1.307,77,1.14,78,1.22,79,1.82,80,0.836,81,0.633,82,0.836,83,0.638,84,0.836,85,0.597,86,0.836,87,0.597,88,0.836,89,1.3,90,0.836,91,0.638,92,0.836,93,0.638,94,0.78,95,0.836,96,0.638,97,0.836,98,0.559,99,0.44,100,0.836,101,0.597,102,0.682,103,0.836,104,0.018,105,0.012,110,0.383,112,0.83,113,0.461,114,1.67,115,1.455,140,1.13,167,1.928,170,2.685,174,0.729,175,1.356,193,3.306,201,1.042,203,1.356,211,1.194,213,1.847,219,2.671,220,0.78,234,2.685,246,1.717,248,2.953,249,0.897,251,0.316,252,0.709,253,2.611,278,1.356,281,1.042,282,1.13,284,1.502,285,1.768,286,4.301,287,0.729,288,1.976,299,1.717,301,1.356,303,1.233,308,4.82,340,0.897,353,1.307,361,1.51,364,1.928,370,2.612,387,1.356,394,1.51,434,1.928,438,2.685,442,2.908,444,1.356,496,1.51,561,1.63,578,3.289,661,2.12,666,1.717,667,3.175,668,3.175,669,5.501,670,4.421,671,4.421,672,5.087,673,4.421,674,4.421,675,4.421,676,4.421,677,4.421,678,4.421,679,4.421,680,4.421,681,3.738,682,3.909,683,3.175,684,2.03,685,3.909,686,3.175,687,2.03,688,3.175,689,2.03,690,3.175,691,2.03,692,2.03,693,2.03,694,2.03,695,2.03,696,2.03,697,2.03,698,2.03,699,2.03,700,3.175,701,2.03,702,2.03,703,2.03,704,2.03,705,2.03,706,4.494,707,2.03,708,2.03,709,2.03,710,1.717,711,3.175,712,2.03,713,2.03,714,2.03,715,2.03,716,2.03,717,2.03,718,2.03,719,1.717,720,1.717,721,1.717,722,1.717,723,1.717,724,2.03,725,2.03,726,2.03,727,3.175,728,2.03,729,1.717,730,2.03,731,2.03,732,3.306,733,3.909,734,3.175,735,3.175,736,3.909,737,2.685,738,3.175,739,2.03,740,2.03,741,2.03,742,2.03,743,2.03,744,2.03,745,3.175,746,2.03,747,2.03,748,2.03,749,2.03,750,2.03,751,3.175,752,2.03,753,2.03,754,1.717,755,2.03,756,1.717,757,1.717,758,1.51,759,2.03,760,2.03,761,2.03,762,2.03,763,2.03,764,3.175,765,2.03,766,2.03,767,2.03,768,2.03,769,2.03,770,3.909,771,2.03,772,2.03,773,2.03,774,2.03,775,2.03,776,1.717,777,2.03,778,3.175,779,3.909,780,3.909,781,3.175,782,3.175,783,3.175,784,2.12,785,3.175,786,3.175,787,3.175,788,3.175]],["title/components/InterceptorComponent.html",[0,0.405,91,1.055]],["body/components/InterceptorComponent.html",[0,0.733,1,1.072,2,0.223,3,0.19,4,1.501,5,1.501,6,1.501,7,0.159,9,2,11,1.501,12,2.582,13,2.257,14,1.867,16,1.867,18,0.256,19,0.948,21,0.401,22,0.434,25,0.98,26,0.026,28,0.58,29,0.613,30,0.19,31,0.141,75,1.072,76,2,77,1.744,78,1.867,79,2.399,80,1.501,81,0.769,82,1.501,83,1.146,84,1.501,85,1.072,86,1.501,87,1.072,88,1.501,89,1.072,90,1.501,91,1.831,92,1.501,93,1.146,94,1.401,95,1.501,96,1.146,97,1.501,98,1.003,99,0.363,100,1.501,101,1.072,102,1.224,103,1.501,104,0.018,105,0.018,113,0.435,140,2.03,237,2.712,251,0.756,252,0.881,276,2.712,292,2.435,301,3.245,586,3.042,596,1.734,665,2.705,789,3.083,790,5.464,791,5.827,792,4.858,793,4.858,794,4.858,795,3.646,796,2.772,797,3.646,798,4.108,799,4.858,800,4.927,801,5.464,802,5.827,803,3.646,804,3.646,805,2.214,806,3.083,807,3.646,808,3.646,809,5.464,810,4.858,811,3.646,812,3.083,813,3.646,814,3.646,815,2.712,816,3.646,817,5.464,818,3.646]],["title/injectables/LogService.html",[233,0.808,796,1.597]],["body/injectables/LogService.html",[2,0.177,3,0.094,7,0.079,18,0.127,19,0.564,21,0.318,22,0.561,25,1.006,26,0.027,27,1.595,28,0.578,29,0.304,30,0.094,31,0.07,32,0.693,33,1.932,39,0.743,42,2.417,44,1.205,49,1.624,50,1.166,52,0.378,53,1.205,81,0.67,99,0.525,102,0.606,104,0.011,105,0.011,107,0.743,110,0.349,112,0.952,113,0.477,114,1.519,115,1.166,140,1.005,157,0.858,186,0.743,198,2.51,201,0.927,209,1.005,211,0.813,213,0.971,214,2.468,215,2.714,216,2.807,219,2.938,231,1.005,233,0.871,234,3.083,237,3.596,238,3.5,239,3.5,243,2.126,248,2.765,249,2.137,251,0.752,252,0.877,253,2.417,270,4.088,271,2.446,273,3.5,276,2.692,278,2.417,279,1.005,280,1.61,281,2.126,282,1.005,283,0.858,284,1.741,285,1.61,287,1.038,289,3.392,291,2.446,292,1.205,303,1.756,305,3.831,332,1.526,342,1.756,352,1.526,353,1.865,370,0.927,372,2.692,373,3.079,387,1.205,395,1.485,422,2.751,423,1.756,432,3.777,440,1.342,561,0.927,564,1.096,579,3.079,586,2.522,594,3.596,596,0.858,597,1.342,665,2.305,710,1.526,776,1.526,796,1.376,798,3.5,800,1.526,812,2.446,815,2.692,819,1.526,820,3.5,821,4.139,822,4.139,823,2.892,824,4.139,825,2.892,826,4.139,827,2.892,828,4.139,829,2.892,830,4.139,831,1.805,832,2.827,833,2.892,834,1.805,835,2.892,836,1.805,837,2.892,838,1.805,839,2.892,840,1.805,841,1.805,842,1.805,843,2.892,844,1.805,845,1.805,846,2.892,847,1.805,848,1.805,849,1.805,850,2.892,851,1.805,852,1.805,853,1.805,854,1.805,855,1.805,856,1.805,857,1.805,858,1.805,859,1.526,860,1.805,861,3.5,862,2.892,863,1.805,864,2.892,865,3.06,866,3.06,867,1.805,868,1.805,869,1.805,870,4.139,871,1.526,872,1.805,873,1.805,874,2.892,875,1.805,876,1.805,877,4.139,878,1.805,879,2.446,880,1.805,881,2.151,882,1.805,883,1.805,884,1.805,885,1.805,886,1.805,887,2.892,888,3.5,889,1.805,890,2.892,891,2.892,892,2.892,893,2.892,894,2.892,895,2.892,896,2.892,897,1.526,898,1.805,899,3.5,900,2.892,901,2.892,902,2.892,903,2.892,904,2.892,905,2.892,906,3.619,907,1.805,908,2.892,909,1.805,910,4.53,911,3.619,912,1.805,913,1.805,914,1.805,915,1.805,916,1.805,917,1.805,918,1.526,919,1.805,920,2.892,921,1.805,922,1.805,923,1.805,924,1.805,925,1.805,926,1.805,927,2.892,928,1.805,929,1.805,930,1.805,931,1.805,932,1.805,933,4.139,934,1.805,935,1.805,936,1.526,937,2.892,938,2.892,939,1.805,940,1.805,941,1.805,942,1.805,943,1.805,944,1.805,945,1.526,946,1.805,947,1.805,948,1.096,949,1.805,950,1.805,951,1.805]],["title/components/LogginDialogComponent.html",[0,0.405,93,1.055]],["body/components/LogginDialogComponent.html",[0,0.649,1,0.773,2,0.16,3,0.137,4,1.082,5,1.082,6,1.082,7,0.114,9,1.59,10,2.023,11,1.082,12,2.437,13,2.13,14,1.484,16,1.484,18,0.185,19,0.753,20,2.23,21,0.424,22,0.573,25,0.946,26,0.026,27,1.585,28,0.502,29,0.442,30,0.137,31,0.102,52,0.551,75,0.773,76,1.59,77,1.387,78,1.484,79,2.078,80,1.082,81,0.604,82,1.082,83,0.826,84,1.082,85,0.773,86,1.082,87,0.773,88,1.082,89,0.773,90,1.082,91,0.826,92,1.082,93,1.585,94,2.232,95,1.082,96,0.826,97,1.082,98,0.723,99,0.502,100,1.082,101,0.773,102,0.882,103,1.082,104,0.014,105,0.014,110,0.466,112,0.873,113,0.428,114,1.585,115,1.299,142,1.463,153,4.315,157,1.25,167,1.596,174,1.812,185,1.349,186,1.082,198,1.25,202,1.755,215,2.893,216,2.763,243,2.76,251,0.409,252,0.477,284,1.759,287,1.812,288,2.504,478,1.955,518,2.809,564,1.596,732,2.222,784,3.37,832,3.234,952,5.463,953,2.222,954,3.871,955,3.861,956,3.861,957,3.264,958,5.046,959,5.046,960,5.046,961,5.046,962,5.046,963,5.046,964,3.753,965,2.222,966,3.754,967,3.871,968,4.267,969,3.861,970,2.628,971,2.628,972,2.628,973,2.628,974,2.628,975,3.59,976,2.628,977,2.628,978,2.628,979,2.628,980,2.628,981,2.628,982,2.579,983,2.628,984,2.628,985,1.955,986,2.628,987,2.628,988,1.955,989,2.579,990,2.628,991,2.628,992,1.955,993,2.628,994,3.861,995,3.861,996,3.861,997,3.861,998,2.628,999,2.15,1000,2.628,1001,2.628,1002,2.628,1003,2.628,1004,2.628,1005,2.628,1006,2.628,1007,2.628,1008,4.578,1009,4.578,1010,3.265,1011,2.628,1012,1.955,1013,2.628,1014,3.861,1015,3.861,1016,3.861,1017,3.861]],["title/modules/MaterialModule.html",[117,1.484,127,2.039]],["body/modules/MaterialModule.html",[0,0.518,2,0.262,3,0.224,7,0.187,26,0.026,28,0.649,29,0.722,30,0.308,31,0.166,77,1.54,104,0.02,105,0.02,117,1.896,120,3.191,127,3.587,136,4.016,155,4.995,157,2.041,182,4.565,183,2.865,189,4.995,729,3.628,1018,4.29,1019,5.907,1020,5.907,1021,5.907,1022,5.907,1023,5.907,1024,5.907,1025,5.907,1026,5.907,1027,5.907,1028,5.907,1029,5.907,1030,5.907,1031,5.907,1032,5.907,1033,5.907,1034,5.907,1035,5.907,1036,5.907,1037,5.907,1038,5.907,1039,4.29,1040,4.29,1041,4.29,1042,4.29,1043,4.29,1044,4.29]],["title/components/NavigationComponent.html",[0,0.405,96,1.055]],["body/components/NavigationComponent.html",[0,0.605,1,0.576,2,0.188,3,0.102,4,0.806,5,0.806,6,0.806,7,0.085,9,1.271,10,1.688,11,0.806,12,2.28,13,1.993,14,1.186,16,1.186,18,0.138,19,0.745,20,1.916,21,0.339,22,0.587,25,0.982,26,0.027,27,1.798,28,0.556,29,0.329,30,0.102,31,0.076,32,0.752,33,1.308,34,1.457,36,2.295,40,1.718,47,1.457,49,1.443,50,0.504,51,1.108,52,0.41,57,4.478,64,1.005,75,0.576,76,1.271,77,1.108,78,1.186,79,1.785,80,0.806,81,0.504,82,0.806,83,0.615,84,0.806,85,0.576,86,0.806,87,0.576,88,0.806,89,0.576,90,0.806,91,0.615,92,0.806,93,0.97,94,1.186,95,0.806,96,1.362,97,0.806,98,0.539,99,0.195,100,0.806,101,0.576,102,1.583,103,0.806,104,0.011,105,0.011,110,0.373,112,0.677,113,0.465,114,1.574,115,1.289,130,2.895,153,1.308,154,1.656,157,0.931,174,1.108,186,0.806,191,1.457,198,0.931,202,2.061,213,1.877,220,0.752,243,3.222,249,2.401,251,0.305,252,0.56,263,2.609,281,2.225,282,1.09,284,1.665,287,1.556,288,2.537,289,1.308,342,3.042,367,1.656,372,2.841,373,3.224,394,1.457,395,1.005,396,1.656,432,1.457,433,1.656,434,1.189,446,1.656,496,0.931,578,2.841,586,1.09,596,0.931,665,2.625,681,3.665,706,3.665,737,1.656,754,2.609,756,1.656,796,2.494,805,1.189,815,1.457,832,2.789,859,1.656,871,1.656,879,2.609,888,2.609,897,1.656,918,1.656,948,1.874,954,4.594,957,1.189,967,3.665,968,3.665,999,1.718,1010,1.656,1012,1.457,1045,1.656,1046,3.229,1047,3.086,1048,3.086,1049,4.334,1050,3.819,1051,4.334,1052,4.334,1053,3.665,1054,4.334,1055,4.334,1056,5.009,1057,4.334,1058,4.334,1059,3.987,1060,4.334,1061,3.665,1062,4.334,1063,4.334,1064,4.334,1065,4.334,1066,4.334,1067,3.665,1068,5.009,1069,3.086,1070,1.958,1071,1.958,1072,1.958,1073,1.958,1074,1.958,1075,1.958,1076,1.958,1077,1.958,1078,1.958,1079,1.958,1080,1.958,1081,1.958,1082,1.958,1083,1.958,1084,1.958,1085,1.958,1086,1.958,1087,1.958,1088,1.958,1089,1.958,1090,1.958,1091,1.958,1092,1.958,1093,1.958,1094,1.958,1095,1.958,1096,1.958,1097,1.958,1098,1.958,1099,1.958,1100,1.457,1101,1.958,1102,1.958,1103,1.958,1104,1.656,1105,5.009,1106,1.958,1107,1.958,1108,1.656,1109,1.958,1110,3.086,1111,1.958,1112,1.958,1113,1.958,1114,1.958,1115,1.958,1116,4.334,1117,3.819,1118,1.958,1119,4.334,1120,4.334,1121,1.958,1122,1.958,1123,1.958,1124,1.958,1125,1.958,1126,1.958,1127,1.958,1128,1.958,1129,1.958,1130,1.958,1131,3.086,1132,1.958,1133,1.958,1134,2.609,1135,1.958,1136,1.958,1137,1.958,1138,1.958,1139,1.958,1140,1.656,1141,2.609,1142,3.086,1143,3.086,1144,3.086,1145,3.086,1146,2.609,1147,2.061]],["title/components/NewUserComponent.html",[0,0.405,98,0.924]],["body/components/NewUserComponent.html",[0,0.693,1,0.819,2,0.246,3,0.145,4,1.148,5,1.148,6,1.148,7,0.121,9,1.66,10,2.093,11,1.148,12,2.466,13,2.155,14,1.549,16,1.549,18,0.196,19,0.786,20,2.293,21,0.443,22,0.513,25,0.926,26,0.027,27,1.488,28,0.548,29,0.469,30,0.247,31,0.184,42,1.861,50,0.717,75,0.819,76,1.66,77,1.447,78,1.549,79,2.136,80,1.148,81,0.625,82,1.148,83,0.876,84,1.148,85,0.819,86,1.148,87,0.819,88,1.148,89,0.819,90,1.148,91,0.876,92,1.148,93,0.876,94,1.071,95,1.148,96,0.876,97,1.148,98,1.427,99,0.638,100,1.148,101,0.819,102,0.936,103,1.148,104,0.015,105,0.015,110,0.487,112,0.68,113,0.377,142,1.551,159,3.294,167,1.692,174,1.447,186,1.148,198,2.252,214,1.781,215,1.917,216,2.468,243,1.431,251,0.434,252,0.505,284,1.819,436,2.073,444,1.861,601,2.073,758,2.998,796,2.814,805,1.692,832,3.294,948,2.447,957,3.484,964,4.094,965,2.356,966,3.832,975,3.676,982,3.951,985,2.998,988,2.998,989,3.832,992,2.998,999,2.244,1148,4.401,1149,2.073,1150,3.408,1151,3.408,1152,4.268,1153,4.654,1154,4.03,1155,2.787,1156,2.787,1157,2.787,1158,2.787,1159,3.522,1160,2.356,1161,2.073,1162,3.522,1163,3.859,1164,2.073,1165,3.408,1166,3.408,1167,3.408,1168,2.875,1169,3.408,1170,3.408,1171,3.408,1172,3.408,1173,3.408,1174,3.408,1175,3.408,1176,3.408,1177,3.408,1178,3.408,1179,3.408,1180,2.356,1181,2.356,1182,2.356,1183,2.356]],["title/classes/PasswordValidation.html",[31,0.13,1168,2.039]],["body/classes/PasswordValidation.html",[0,0.635,2,0.282,3,0.176,7,0.147,9,1.391,10,2.04,12,1.298,13,1.135,14,1.298,16,1.298,18,0.237,19,0.901,20,1.494,21,0.371,22,0.302,25,0.884,26,0.027,28,0.588,29,0.568,30,0.274,31,0.219,42,2.257,50,0.87,81,0.446,98,0.93,99,0.633,104,0.017,105,0.017,112,0.485,113,0.269,142,1.881,159,2.569,167,2.052,174,1.657,186,1.391,198,2.195,214,2.04,215,2.195,216,2.687,243,1.735,251,0.526,252,0.613,284,2.02,436,2.513,444,2.257,601,2.513,758,3.433,796,2.5,805,2.052,832,2.926,957,3.192,964,3.433,966,3.511,975,3.511,982,4.173,985,3.433,988,3.433,989,4.077,992,3.433,999,2.569,1148,3.433,1149,2.513,1150,2.857,1151,2.857,1152,3.91,1153,3.902,1159,4.399,1160,2.857,1161,2.513,1162,3.91,1163,4.202,1164,2.513,1165,3.902,1166,3.902,1167,3.902,1168,3.43,1169,3.902,1170,4.776,1171,4.444,1172,3.902,1173,3.902,1174,3.902,1175,3.902,1176,3.902,1177,3.902,1178,3.902,1179,4.776,1180,2.857,1181,2.857,1182,2.857,1183,2.857,1184,3.379,1185,3.379]],["title/injectables/RainAndSnowService.html",[233,0.808,620,2.243]],["body/injectables/RainAndSnowService.html",[2,0.221,3,0.189,7,0.158,18,0.254,19,0.944,21,0.599,22,0.557,25,1.048,26,0.027,28,0.542,29,0.609,30,0.189,31,0.14,50,0.932,52,1.141,75,1.065,81,0.478,99,0.36,104,0.018,105,0.018,107,1.492,110,0.584,112,0.782,113,0.496,174,2.087,211,1.223,220,2.093,233,1.31,251,0.564,252,0.877,258,1.958,283,1.723,285,2.693,288,1.992,360,2.093,439,2.2,455,4.452,457,3.882,467,2.017,468,2.2,470,4.051,474,3.598,475,2.695,476,3.598,478,2.695,479,4.323,480,2.695,482,3.598,484,4.09,485,3.063,490,2.695,491,2.695,492,2.695,493,2.695,500,2.695,501,2.695,520,3.372,521,3.372,553,2.937,557,2.937,620,3.231,1186,5.379,1187,3.063,1188,4.837,1189,4.837,1190,4.837,1191,3.623,1192,3.623,1193,3.623,1194,3.623,1195,3.623,1196,3.623,1197,3.623,1198,4.09,1199,3.623]],["title/classes/RespuestaForecast.html",[31,0.13,391,1.724]],["body/classes/RespuestaForecast.html",[2,0.215,3,0.184,7,0.154,18,0.248,21,0.632,22,0.425,26,0.027,28,0.351,30,0.28,31,0.223,32,1.355,39,1.956,46,1.963,49,0.97,50,1.223,51,2.22,52,1.257,64,1.811,99,0.473,104,0.018,105,0.018,110,0.574,112,0.771,113,0.379,115,0.908,197,1.811,201,1.811,211,1.389,225,0.97,251,0.549,258,2.125,287,2.064,340,1.559,353,1.452,360,2.209,382,1.811,391,2.44,413,2.141,414,1.963,435,2.885,456,1.963,458,1.963,469,2.141,472,2.141,481,2.885,502,2.355,505,2.623,506,2.623,507,2.355,508,2.623,509,2.885,510,3.173,511,3.173,512,3.173,513,3.173,514,3.173,515,3.534,516,3.173,517,3.173,518,1.963,519,3.173,520,1.963,521,1.963,522,2.623,523,2.355,524,2.623,525,2.355,526,2.623,527,2.623,528,2.623,529,2.355,530,2.623,531,2.623,532,2.623,533,2.623,534,2.623,535,2.623,536,2.623,537,2.623,538,2.623,539,2.623,540,2.355,541,2.623,542,2.355,543,2.623,544,2.355,545,2.623,546,2.355,547,2.623,548,2.623,549,2.623,550,2.623,551,2.623,552,2.623,553,2.141,554,2.623,555,2.623,556,2.623,557,2.141,558,2.623,559,2.623,560,3.173,561,2.952,562,2.355,563,2.355,564,2.141,565,2.623,1200,4.751]],["title/injectables/SavedCitiesService.html",[233,0.808,249,1.484]],["body/injectables/SavedCitiesService.html",[2,0.212,3,0.181,7,0.151,18,0.244,19,0.918,21,0.586,22,0.573,25,1.114,26,0.026,27,1.479,28,0.531,29,0.585,30,0.181,31,0.135,49,1.866,50,0.895,81,0.459,99,0.531,104,0.017,105,0.017,107,1.432,110,0.568,113,0.425,114,1.093,115,0.895,211,0.781,213,2.254,233,1.283,249,2.08,251,0.541,252,0.631,281,2.935,283,1.654,287,1.249,325,2.587,395,1.786,422,3.627,442,3.501,443,3.98,561,2.739,562,2.323,563,2.323,579,4.252,586,3.505,594,4.252,596,1.654,597,2.587,600,4.252,665,1.936,719,2.941,720,2.941,721,2.941,722,2.941,723,2.941,757,2.941,936,2.941,999,1.936,1059,4.834,1147,2.323,1201,5.488,1202,2.941,1203,5.716,1204,4.706,1205,3.478,1206,3.478,1207,3.478,1208,4.706,1209,3.478,1210,3.478,1211,3.478,1212,3.478,1213,3.478,1214,5.335,1215,3.478,1216,3.478,1217,3.478,1218,3.478,1219,3.478,1220,3.478,1221,3.478,1222,3.478,1223,3.478,1224,3.478,1225,3.478,1226,3.478,1227,3.478,1228,3.478,1229,3.478,1230,3.478,1231,3.478,1232,3.478,1233,3.478,1234,3.478,1235,2.941,1236,3.478]],["title/classes/SavedCity.html",[31,0.13,213,1.128]],["body/classes/SavedCity.html",[2,0.222,3,0.19,7,0.158,18,0.255,19,0.946,21,0.4,22,0.569,25,0.816,26,0.027,30,0.19,31,0.188,39,1.497,49,1.334,52,0.761,81,0.853,104,0.018,105,0.018,110,0.585,112,0.999,113,0.527,175,2.427,213,1.628,220,1.397,225,1.802,251,0.566,252,0.659,258,2.032,308,2.703,329,4.05,330,3.866,331,3.866,340,1.606,342,2.207,353,1.497,382,1.866,496,2.306,567,4.329,661,2.427,1134,3.073,1237,3.073,1238,4.921,1239,4.921,1240,5.819,1241,3.606,1242,3.634,1243,3.634,1244,3.634,1245,3.634,1246,3.634,1247,3.634,1248,3.634,1249,3.238,1250,3.238,1251,3.073,1252,3.073,1253,3.073,1254,3.073,1255,3.073,1256,3.073]],["title/classes/ServedCity.html",[31,0.13,280,1.869]],["body/classes/ServedCity.html",[2,0.248,3,0.212,7,0.177,18,0.286,21,0.447,22,0.575,26,0.026,30,0.272,31,0.236,52,0.852,81,0.863,104,0.021,105,0.019,110,0.63,112,0.98,113,0.521,211,0.913,225,1.823,251,0.633,252,0.738,258,2.191,279,2.264,280,2.905,303,2.469,329,4.022,330,4.022,331,4.022,353,1.674,496,2.482,881,3.025,1100,3.025,1241,3.881,1249,2.716,1250,2.716,1257,3.025,1258,5.217,1259,4.066,1260,4.066,1261,4.066,1262,4.066,1263,3.438,1264,3.438,1265,3.438,1266,3.438]],["title/classes/ServerResponse.html",[31,0.13,279,1.869]],["body/classes/ServerResponse.html",[2,0.281,3,0.24,7,0.2,18,0.323,22,0.411,26,0.026,30,0.294,31,0.246,52,1.331,81,0.743,104,0.023,105,0.021,110,0.68,112,0.912,113,0.449,211,1.369,225,1.676,258,2.084,279,3.137,280,2.559,303,2.791,329,3.7,330,3.7,331,3.7,353,1.892,496,2.68,881,3.419,1100,3.419,1241,3.419,1249,3.07,1250,3.07,1257,3.419,1263,3.886,1264,3.886,1265,3.886,1266,3.886,1267,4.596]],["title/components/SettingsComponent.html",[0,0.405,101,0.987]],["body/components/SettingsComponent.html",[0,0.607,1,0.66,2,0.137,3,0.117,4,0.924,5,0.924,6,0.924,7,0.098,9,1.413,10,1.841,11,0.924,12,2.356,13,2.059,14,1.318,16,1.318,18,0.158,19,0.813,20,2.061,21,0.377,22,0.591,25,1.032,26,0.026,27,1.927,28,0.566,29,0.378,30,0.117,31,0.087,47,1.669,57,3.469,75,0.66,76,1.413,77,1.232,78,1.318,79,1.92,80,0.924,81,0.615,82,0.924,83,0.705,84,0.924,85,0.66,86,0.924,87,0.66,88,0.924,89,0.66,90,0.924,91,0.705,92,0.924,93,0.705,94,0.862,95,0.924,96,0.705,97,0.924,98,0.617,99,0.341,100,0.924,101,1.371,102,1.687,103,0.924,104,0.013,105,0.013,110,0.414,112,0.598,113,0.439,114,1.579,115,1.293,129,1.669,142,1.249,159,1.249,160,1.669,174,1.979,186,0.924,198,1.067,203,1.499,204,1.897,214,2.221,215,1.067,216,2.39,243,2.138,249,2.436,251,0.534,252,0.622,258,1.078,281,1.152,282,1.249,284,1.792,287,0.806,288,2.448,292,1.499,395,2.138,434,1.363,596,1.067,665,3.243,796,2.218,805,1.363,820,3.943,832,3.069,861,1.897,865,1.897,866,1.897,899,1.897,945,1.897,948,2.083,957,2.529,966,3.681,975,3.681,982,2.291,989,2.781,1012,1.669,1046,1.897,1053,3.943,1061,3.943,1067,3.943,1104,1.897,1108,1.897,1141,1.897,1146,2.901,1147,2.291,1152,1.669,1159,1.669,1161,2.552,1162,3.098,1163,3.098,1164,1.669,1168,1.363,1268,1.897,1269,3.43,1270,3.43,1271,4.663,1272,4.663,1273,4.663,1274,4.663,1275,4.663,1276,4.663,1277,4.663,1278,4.663,1279,3.43,1280,4.663,1281,4.663,1282,5.024,1283,4.663,1284,4.663,1285,4.663,1286,4.663,1287,2.244,1288,3.43,1289,2.244,1290,2.244,1291,3.43,1292,2.244,1293,2.244,1294,2.244,1295,2.244,1296,2.244,1297,2.244,1298,2.244,1299,2.244,1300,2.244,1301,2.244,1302,2.244,1303,2.244,1304,2.244,1305,2.244,1306,2.244,1307,2.244,1308,2.244,1309,3.43,1310,2.244,1311,2.244,1312,2.244,1313,3.43,1314,2.244,1315,3.43,1316,3.43,1317,2.244,1318,5.512,1319,2.244,1320,2.244,1321,2.244,1322,2.244,1323,2.244,1324,2.244,1325,2.244,1326,2.244,1327,2.244,1328,2.244,1329,4.164,1330,4.164,1331,4.164,1332,3.43,1333,3.43,1334,3.43,1335,2.244,1336,2.244,1337,2.244,1338,2.244]],["title/injectables/TemperatureService.html",[233,0.808,619,2.243]],["body/injectables/TemperatureService.html",[2,0.212,3,0.181,7,0.151,18,0.244,19,0.918,21,0.586,22,0.563,25,1.059,26,0.027,28,0.531,29,0.585,30,0.181,31,0.135,50,0.895,52,1.198,75,1.023,81,0.459,99,0.346,104,0.017,105,0.017,107,1.432,110,0.568,112,0.766,113,0.502,174,2.053,211,1.198,220,2.05,233,1.283,251,0.541,252,0.854,258,2.039,283,1.654,285,2.97,288,2.197,360,2.05,439,2.112,455,4.422,457,3.818,467,1.936,468,2.112,470,4.252,474,3.501,475,2.587,476,3.501,479,4.443,480,2.587,482,3.968,486,2.941,490,2.587,491,2.587,492,2.587,493,2.587,495,2.941,497,2.941,500,2.587,501,2.587,613,4.683,614,4.834,615,4.834,619,3.143,647,3.98,1198,2.941,1339,2.941,1340,4.706,1341,4.706,1342,4.706,1343,3.478,1344,3.478,1345,3.478,1346,3.478,1347,3.478,1348,5.335,1349,3.478,1350,4.511,1351,4.706,1352,3.478,1353,4.706,1354,3.478,1355,3.478,1356,3.478,1357,3.478]],["title/classes/UserServer.html",[31,0.13,214,1.484]],["body/classes/UserServer.html",[2,0.244,3,0.209,7,0.174,18,0.281,19,1.008,21,0.629,22,0.59,25,0.962,26,0.026,27,1.257,28,0.398,30,0.298,31,0.234,49,1.101,52,0.838,81,0.528,99,0.398,104,0.019,105,0.019,110,0.623,112,0.978,113,0.51,209,2.228,210,2.673,211,1.511,213,1.734,214,2.283,215,2.975,216,2.873,217,4.494,218,4.494,219,3.363,220,2.321,221,2.976,222,2.976,223,2.976,224,2.976,225,1.101,226,2.976,227,3.841,228,2.976,229,2.976,230,2.976,231,2.228,251,0.623,252,0.726,561,2.055,1358,5.164,1359,5.164,1360,4.001,1361,4.001,1362,4.001,1363,4.001,1364,4.001,1365,4.001]],["title/classes/Weather.html",[31,0.13,51,1.206]],["body/classes/Weather.html",[2,0.292,3,0.249,7,0.208,18,0.336,21,0.681,22,0.589,26,0.025,30,0.249,31,0.224,51,2.072,64,3.305,104,0.021,105,0.021,110,0.697,112,0.987,113,0.513,225,1.771,258,1.948,509,3.909,518,3.584,1366,4.042,1367,5.771,1368,4.781,1369,4.781,1370,4.781]],["title/classes/WeatherNow.html",[31,0.13,364,2.039]],["body/classes/WeatherNow.html",[2,0.137,3,0.117,7,0.097,18,0.157,19,0.668,21,0.457,22,0.582,25,0.783,26,0.026,27,1.075,28,0.341,30,0.117,31,0.133,51,2.133,52,1.109,54,1.494,64,1.757,78,0.86,81,0.726,99,0.463,102,1.149,104,0.02,105,0.013,110,0.413,112,0.916,113,0.538,114,1.075,115,1.198,211,1.308,220,0.86,225,1.634,251,0.725,252,0.621,258,2.141,287,1.492,325,1.664,329,2.524,330,2.078,331,2.078,340,0.989,361,1.664,364,3.047,382,2.134,407,1.892,413,1.359,414,1.246,423,1.359,435,1.359,456,2.793,458,2.793,467,1.246,469,1.359,472,1.359,481,2.524,488,1.892,496,1.064,507,3.351,509,3.343,510,2.286,511,2.286,512,2.286,513,2.286,514,2.286,516,2.286,517,2.286,518,1.905,519,2.286,520,2.793,521,2.793,523,1.494,525,2.286,529,1.494,540,2.286,542,2.286,544,2.286,546,2.286,553,2.078,557,2.078,560,2.286,567,4.418,613,2.546,999,1.246,1147,1.494,1238,4.242,1239,4.242,1249,2.286,1250,2.286,1251,1.892,1252,1.892,1253,1.892,1254,1.892,1255,1.892,1256,1.892,1350,3.515,1371,1.892,1372,5.017,1373,5.017,1374,5.017,1375,3.423,1376,5.017,1377,3.423,1378,2.237,1379,2.237,1380,2.237,1381,2.237,1382,2.237,1383,2.237,1384,2.237,1385,2.237,1386,2.237,1387,2.237,1388,2.237,1389,2.237,1390,2.237,1391,2.237,1392,3.423,1393,3.677,1394,4.656,1395,2.237,1396,3.423,1397,2.237,1398,3.423,1399,2.237,1400,4.156,1401,4.156,1402,4.156,1403,2.237,1404,2.237,1405,2.237,1406,2.237,1407,3.423,1408,2.237,1409,3.423,1410,2.237,1411,2.237,1412,2.237,1413,2.237,1414,2.237,1415,2.237,1416,2.237,1417,2.237,1418,2.237,1419,2.237,1420,2.237,1421,2.237,1422,2.237,1423,2.237,1424,2.237,1425,2.237,1426,2.237,1427,2.237,1428,2.237,1429,2.237,1430,2.237,1431,2.237,1432,2.237,1433,2.237,1434,3.423,1435,2.237,1436,3.423,1437,2.237,1438,2.237,1439,2.237,1440,3.423,1441,2.237,1442,2.237,1443,2.237,1444,2.237,1445,2.237,1446,2.237,1447,4.156,1448,2.237,1449,2.237,1450,2.237,1451,2.237,1452,2.237,1453,2.237,1454,2.237,1455,2.237,1456,3.423,1457,2.237,1458,2.237,1459,2.237,1460,3.423,1461,2.237,1462,2.237,1463,2.237,1464,2.237,1465,2.237,1466,3.423,1467,3.423,1468,2.894,1469,3.423,1470,2.237,1471,2.237,1472,5.291,1473,2.237,1474,2.237,1475,2.237,1476,2.237,1477,2.237,1478,2.237,1479,2.237,1480,2.237,1481,2.237,1482,2.237,1483,2.237]],["title/injectables/WeatherService.html",[233,0.808,370,1.724]],["body/injectables/WeatherService.html",[2,0.243,3,0.208,7,0.173,18,0.28,19,1.004,21,0.438,22,0.558,25,1.095,26,0.026,28,0.567,29,0.67,30,0.208,31,0.154,50,1.024,54,2.658,81,0.824,104,0.019,105,0.019,107,1.639,110,0.621,112,0.972,113,0.497,114,1.251,115,1.024,140,2.216,201,2.044,225,1.416,233,1.372,247,3.366,248,4.027,251,0.938,252,1.094,253,3.437,278,2.658,283,1.893,284,2.191,301,2.658,370,2.642,586,3.623,596,1.893,661,2.658,806,3.366,1484,3.366,1485,6.029,1486,5.146,1487,5.146,1488,5.146,1489,5.146,1490,5.146,1491,3.98,1492,5.146,1493,3.98,1494,5.146,1495,3.98,1496,5.146,1497,5.703,1498,3.98,1499,5.703,1500,3.98,1501,3.98,1502,3.98]],["title/coverage.html",[1503,3.886]],["body/coverage.html",[0,0.796,1,1.048,7,0.155,8,3.015,26,0.026,31,0.26,51,1.28,52,0.747,83,1.12,85,1.048,87,1.048,89,1.048,91,1.12,93,1.12,96,1.12,98,0.981,99,0.355,101,1.048,104,0.018,105,0.018,106,3.015,113,0.284,151,3.56,153,2.381,159,2.665,209,1.985,210,3.608,213,1.197,214,1.576,231,1.985,233,1.549,234,2.165,235,3.015,236,3.015,249,1.576,279,1.985,280,1.985,354,3.015,360,1.37,364,2.165,370,1.831,371,2.165,391,1.831,414,1.985,452,2.381,453,3.015,454,3.015,496,3.359,502,3.608,575,3.015,576,3.015,604,3.015,619,2.381,620,2.381,666,3.015,784,2.381,789,3.015,796,1.696,819,3.015,952,3.015,953,3.015,1045,3.015,1148,3.56,1149,3.56,1168,2.165,1186,3.015,1187,3.015,1201,3.015,1202,3.015,1237,3.015,1257,3.56,1268,3.015,1339,3.015,1366,3.015,1371,3.015,1393,3.857,1484,3.015,1503,3.015,1504,3.565,1505,3.565,1506,3.565,1507,5.403,1508,6.023,1509,4.786,1510,3.565,1511,4.786,1512,5.775,1513,5.775,1514,4.786,1515,3.565,1516,3.565,1517,4.786,1518,3.565,1519,4.786,1520,3.015,1521,5.775,1522,3.015,1523,4.047,1524,3.015,1525,3.565]],["title/dependencies.html",[119,2.7,1526,2.798]],["body/dependencies.html",[26,0.026,29,0.794,104,0.021,105,0.021,119,3.153,134,4.26,135,4.26,142,2.628,149,3.992,150,3.992,157,2.245,183,3.153,186,1.944,468,2.867,596,2.245,1527,4.721,1528,6.865,1529,4.721,1530,5.727,1531,4.721,1532,4.721,1533,4.721,1534,4.721,1535,4.721,1536,4.721,1537,4.721,1538,4.721,1539,4.721,1540,4.721,1541,4.721,1542,4.721,1543,4.721,1544,4.721,1545,4.721,1546,4.721,1547,4.721,1548,4.721,1549,4.721,1550,4.721,1551,4.721]],["title/index.html",[18,0.196,439,1.699,1552,2.798]],["body/index.html",[0,0.729,3,0.235,7,0.196,13,1.513,26,0.021,38,3.809,39,2.486,40,3.362,65,4.705,66,5.333,81,0.594,99,0.448,104,0.021,105,0.021,130,3.008,202,3.008,340,1.991,353,2.291,395,2.313,440,3.35,948,2.735,1140,3.809,1553,4.504,1554,6.038,1555,4.504,1556,4.504,1557,6.689,1558,6.689,1559,4.504,1560,4.504,1561,4.504,1562,4.504,1563,4.504,1564,4.504,1565,4.504,1566,6.48,1567,4.504,1568,4.504,1569,4.504,1570,4.504,1571,4.504,1572,3.809,1573,5.564,1574,6.48,1575,5.564,1576,5.564,1577,4.504,1578,6.307,1579,4.504,1580,4.504,1581,4.504,1582,6.038,1583,4.504,1584,4.504]],["title/modules.html",[117,2.031]],["body/modules.html",[26,0.023,104,0.023,105,0.023,117,2.358,118,3.563,126,3.239,127,3.239,135,3.968,197,3.161,1235,5.205,1585,5.334,1586,5.334,1587,6.489]],["title/overview.html",[1588,3.886]],["body/overview.html",[0,0.529,1,1.754,26,0.026,30,0.229,31,0.17,46,2.44,75,1.288,83,2.089,85,1.754,87,1.754,89,1.754,91,1.874,93,1.874,96,1.874,98,1.641,101,1.754,104,0.02,105,0.02,117,2.418,118,4.745,119,2.927,120,3.259,121,3.705,122,3.705,123,3.705,124,3.705,125,3.705,126,3.622,127,3.622,128,4.625,129,3.259,130,2.927,185,2.25,233,1.054,1468,3.705,1588,3.705,1589,4.382,1590,5.47,1591,4.382]],["title/routes.html",[185,2.36]],["body/routes.html",[26,0.023,104,0.023,105,0.023,185,2.826]],["title/miscellaneous/variables.html",[1393,2.7,1592,2.366]],["body/miscellaneous/variables.html",[18,0.344,26,0.026,104,0.022,105,0.022,113,0.499,114,1.967,115,1.611,151,5.007,174,2.102,288,2.015,382,3.332,784,4.182,1393,3.269,1520,4.139,1522,4.139,1523,4.139,1524,5.295,1572,4.949,1592,4.139,1593,5.853,1594,4.895,1595,4.895,1596,4.895,1597,4.895]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":496,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{},"coverage.html":{}}}],["0.0.4",{"_index":1548,"title":{},"body":{"dependencies.html":{}}}],["0.36.1",{"_index":1540,"title":{},"body":{"dependencies.html":{}}}],["0.6.8",{"_index":1535,"title":{},"body":{"dependencies.html":{}}}],["0.8.26",{"_index":1551,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1521,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1511,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1509,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1515,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1508,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":1513,"title":{},"body":{"coverage.html":{}}}],["0/23",{"_index":1518,"title":{},"body":{"coverage.html":{}}}],["0/26",{"_index":1516,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1507,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1510,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1519,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1512,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1514,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1517,"title":{},"body":{"coverage.html":{}}}],["0000ff",{"_index":1198,"title":{},"body":{"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["1",{"_index":1309,"title":{},"body":{"components/SettingsComponent.html":{}}}],["1.1.3",{"_index":1538,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1589,"title":{},"body":{"overview.html":{}}}],["100",{"_index":499,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["12",{"_index":1591,"title":{},"body":{"overview.html":{}}}],["1500",{"_index":906,"title":{},"body":{"injectables/LogService.html":{}}}],["2.0.8",{"_index":1546,"title":{},"body":{"dependencies.html":{}}}],["2.5.4",{"_index":1544,"title":{},"body":{"dependencies.html":{}}}],["2.7.2",{"_index":1541,"title":{},"body":{"dependencies.html":{}}}],["2500",{"_index":933,"title":{},"body":{"injectables/LogService.html":{}}}],["273.15",{"_index":1350,"title":{},"body":{"injectables/TemperatureService.html":{},"classes/WeatherNow.html":{}}}],["3",{"_index":1468,"title":{},"body":{"classes/WeatherNow.html":{},"overview.html":{}}}],["3000",{"_index":433,"title":{},"body":{"components/CityComponent.html":{},"components/NavigationComponent.html":{}}}],["3cba9f",{"_index":1356,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["4.2",{"_index":785,"title":{},"body":{"components/InitialComponent.html":{}}}],["401",{"_index":909,"title":{},"body":{"injectables/LogService.html":{}}}],["5",{"_index":773,"title":{},"body":{"components/InitialComponent.html":{}}}],["500",{"_index":935,"title":{},"body":{"injectables/LogService.html":{}}}],["6.0.0",{"_index":1549,"title":{},"body":{"dependencies.html":{}}}],["6.0.3",{"_index":1536,"title":{},"body":{"dependencies.html":{}}}],["6.0.4",{"_index":1528,"title":{},"body":{"dependencies.html":{}}}],["6.0.5",{"_index":1556,"title":{},"body":{"index.html":{}}}],["6.2.1",{"_index":1530,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":59,"title":{},"body":{"components/AboutComponent.html":{}}}],["8",{"_index":1590,"title":{},"body":{"overview.html":{}}}],["aaaaaa",{"_index":485,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{}}}],["about'},{'nam",{"_index":82,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["about.component.css",{"_index":15,"title":{},"body":{"components/AboutComponent.html":{}}}],["about.component.html",{"_index":17,"title":{},"body":{"components/AboutComponent.html":{}}}],["about/about.compon",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["aboutcompon",{"_index":1,"title":{"components/AboutComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["abstractcontrol",{"_index":1159,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["ac",{"_index":1185,"title":{},"body":{"classes/PasswordValidation.html":{}}}],["ac.get('password",{"_index":1173,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["ac.get('password2",{"_index":1175,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["ac.get('password2').seterror",{"_index":1178,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["access",{"_index":777,"title":{},"body":{"components/InitialComponent.html":{}}}],["accomplish",{"_index":716,"title":{},"body":{"components/InitialComponent.html":{}}}],["account",{"_index":1318,"title":{},"body":{"components/SettingsComponent.html":{}}}],["activ",{"_index":1122,"title":{},"body":{"components/NavigationComponent.html":{}}}],["activatedrout",{"_index":368,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["actual_compon",{"_index":103,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["addit",{"_index":1394,"title":{},"body":{"classes/WeatherNow.html":{}}}],["admin",{"_index":669,"title":{},"body":{"components/InitialComponent.html":{}}}],["adquir",{"_index":436,"title":{},"body":{"components/CityComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["afterward",{"_index":922,"title":{},"body":{"injectables/LogService.html":{}}}],["alreadi",{"_index":936,"title":{},"body":{"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["alway",{"_index":947,"title":{},"body":{"injectables/LogService.html":{}}}],["an",{"_index":307,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["angular",{"_index":40,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{},"index.html":{}}}],["angular/anim",{"_index":1527,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1529,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/collect",{"_index":389,"title":{},"body":{"components/CityComponent.html":{}}}],["angular/common",{"_index":183,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"modules/MaterialModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"injectables/WeatherService.html":{}}}],["angular/compil",{"_index":1531,"title":{},"body":{"dependencies.html":{}}}],["angular/cor",{"_index":29,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{},"dependencies.html":{}}}],["angular/form",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"dependencies.html":{}}}],["angular/http",{"_index":1532,"title":{},"body":{"dependencies.html":{}}}],["angular/materi",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"dependencies.html":{}}}],["angular/material/dialog",{"_index":1093,"title":{},"body":{"components/NavigationComponent.html":{}}}],["angular/platform",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"dependencies.html":{}}}],["angular/pwa",{"_index":1534,"title":{},"body":{"dependencies.html":{}}}],["angular/rout",{"_index":186,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"dependencies.html":{}}}],["angular/servic",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["ans.push",{"_index":314,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["answer",{"_index":779,"title":{},"body":{"components/InitialComponent.html":{}}}],["api",{"_index":54,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["app",{"_index":13,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"index.html":{}}}],["app.compon",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.css",{"_index":108,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":109,"title":{},"body":{"components/AppComponent.html":{}}}],["app.modul",{"_index":1043,"title":{},"body":{"modules/MaterialModule.html":{}}}],["appcompon",{"_index":83,"title":{"components/AppComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["applic",{"_index":37,"title":{},"body":{"components/AboutComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/ForecastValuesService.html":{},"components/InitialComponent.html":{}}}],["application/json",{"_index":276,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["appmodul",{"_index":118,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodul",{"_index":126,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["argument",{"_index":687,"title":{},"body":{"components/InitialComponent.html":{}}}],["array",{"_index":211,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{}}}],["array.from(rx).foreach(el",{"_index":717,"title":{},"body":{"components/InitialComponent.html":{}}}],["array.from(rx.list).foreach(el",{"_index":419,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["artifact",{"_index":1567,"title":{},"body":{"index.html":{}}}],["ask",{"_index":444,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["asset",{"_index":711,"title":{},"body":{"components/InitialComponent.html":{}}}],["assets/city.list.json",{"_index":700,"title":{},"body":{"components/InitialComponent.html":{}}}],["auth",{"_index":798,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["author",{"_index":237,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["automat",{"_index":1562,"title":{},"body":{"index.html":{}}}],["aux",{"_index":1372,"title":{},"body":{"classes/WeatherNow.html":{}}}],["avail",{"_index":1235,"title":{},"body":{"injectables/SavedCitiesService.html":{},"modules.html":{}}}],["avoid",{"_index":1100,"title":{},"body":{"components/NavigationComponent.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["back",{"_index":1216,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["backgroundcolor",{"_index":484,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{}}}],["bada55",{"_index":483,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["bandwidth",{"_index":731,"title":{},"body":{"components/InitialComponent.html":{}}}],["bar",{"_index":478,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"components/LogginDialogComponent.html":{},"injectables/RainAndSnowService.html":{}}}],["base",{"_index":1373,"title":{},"body":{"classes/WeatherNow.html":{}}}],["base64",{"_index":883,"title":{},"body":{"injectables/LogService.html":{}}}],["basic",{"_index":884,"title":{},"body":{"injectables/LogService.html":{}}}],["basic_express",{"_index":333,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["be",{"_index":1483,"title":{},"body":{"classes/WeatherNow.html":{}}}],["bearer",{"_index":270,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["block",{"_index":737,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["bodi",{"_index":33,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["body).subscribe(r",{"_index":876,"title":{},"body":{"injectables/LogService.html":{}}}],["body[0].classlist.add(\"initi",{"_index":35,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{}}}],["body[0].classlist.remove(\"initi",{"_index":1096,"title":{},"body":{"components/NavigationComponent.html":{}}}],["boolean",{"_index":263,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/NavigationComponent.html":{}}}],["bootstrap",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["bordercolor",{"_index":482,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["brows",{"_index":1587,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browser/anim",{"_index":188,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["browseranimationsmodul",{"_index":187,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["browsermodul",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["btoa(`${username}:${password",{"_index":885,"title":{},"body":{"injectables/LogService.html":{}}}],["build",{"_index":1566,"title":{},"body":{"index.html":{}}}],["builddeleteform",{"_index":1277,"title":{},"body":{"components/SettingsComponent.html":{}}}],["buildpsswdform",{"_index":1278,"title":{},"body":{"components/SettingsComponent.html":{}}}],["button",{"_index":1010,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["call",{"_index":756,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["cancel",{"_index":1017,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["cccccc",{"_index":489,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["certain",{"_index":559,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["chang",{"_index":395,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"index.html":{}}}],["changepassword",{"_index":1279,"title":{},"body":{"components/SettingsComponent.html":{}}}],["changepassword(passwd",{"_index":1291,"title":{},"body":{"components/SettingsComponent.html":{}}}],["chart",{"_index":455,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["chart('cloudsandwind",{"_index":477,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["chart('rainandsnow",{"_index":1197,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["chart('temperatur",{"_index":1355,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["chart.j",{"_index":468,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{},"dependencies.html":{}}}],["check",{"_index":1140,"title":{},"body":{"components/NavigationComponent.html":{},"index.html":{}}}],["check_circl",{"_index":1142,"title":{},"body":{"components/NavigationComponent.html":{}}}],["checkandsav",{"_index":1375,"title":{},"body":{"classes/WeatherNow.html":{}}}],["checkandsave(text",{"_index":1392,"title":{},"body":{"classes/WeatherNow.html":{}}}],["checkerror",{"_index":962,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["citi",{"_index":49,"title":{},"body":{"components/AboutComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/UserServer.html":{}}}],["cities.foreach(c",{"_index":343,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["cities.json",{"_index":746,"title":{},"body":{"components/InitialComponent.html":{}}}],["cities.length",{"_index":1115,"title":{},"body":{"components/NavigationComponent.html":{}}}],["cities.servic",{"_index":282,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["cities.service.t",{"_index":1202,"title":{},"body":{"injectables/SavedCitiesService.html":{},"coverage.html":{}}}],["cities.service.ts:12",{"_index":1211,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:13",{"_index":1212,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:14",{"_index":1204,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:19",{"_index":1207,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:23",{"_index":1206,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:39",{"_index":1209,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:52",{"_index":1205,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["citiesid",{"_index":218,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["citieslist",{"_index":219,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/UserServer.html":{}}}],["citieslist.foreach(c",{"_index":295,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["citieslist.split",{"_index":902,"title":{},"body":{"injectables/LogService.html":{}}}],["citieslisturl",{"_index":670,"title":{},"body":{"components/InitialComponent.html":{}}}],["citiesrespons",{"_index":209,"title":{"classes/CitiesResponse.html":{}},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/LogService.html":{},"classes/UserServer.html":{},"coverage.html":{}}}],["citiesresponseunit",{"_index":231,"title":{"classes/CitiesResponseUnit.html":{}},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/LogService.html":{},"classes/UserServer.html":{},"coverage.html":{}}}],["citiesserv",{"_index":685,"title":{},"body":{"components/InitialComponent.html":{}}}],["citiesserverservic",{"_index":234,"title":{"injectables/CitiesServerService.html":{}},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"coverage.html":{}}}],["citiessubscript",{"_index":1049,"title":{},"body":{"components/NavigationComponent.html":{}}}],["city'",{"_index":1482,"title":{},"body":{"classes/WeatherNow.html":{}}}],["city'},{'nam",{"_index":86,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["city.component.css",{"_index":355,"title":{},"body":{"components/CityComponent.html":{}}}],["city.component.html",{"_index":356,"title":{},"body":{"components/CityComponent.html":{}}}],["city.id",{"_index":1226,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["city.insertbodi",{"_index":297,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["city.nam",{"_index":306,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["city/:id/:nam",{"_index":196,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["city/city.compon",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["city/cod",{"_index":1135,"title":{},"body":{"components/NavigationComponent.html":{}}}],["city/data",{"_index":467,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{},"classes/WeatherNow.html":{}}}],["citycompon",{"_index":85,"title":{"components/CityComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["citymatch",{"_index":671,"title":{},"body":{"components/InitialComponent.html":{}}}],["citymatch.nam",{"_index":782,"title":{},"body":{"components/InitialComponent.html":{}}}],["citymatch.sys.countri",{"_index":783,"title":{},"body":{"components/InitialComponent.html":{}}}],["cityshown",{"_index":357,"title":{},"body":{"components/CityComponent.html":{}}}],["cityshown.nam",{"_index":448,"title":{},"body":{"components/CityComponent.html":{}}}],["citytosav",{"_index":1210,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["citytosave.id",{"_index":1227,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["class",{"_index":31,"title":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/PasswordValidation.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"overview.html":{}}}],["cli",{"_index":1554,"title":{},"body":{"index.html":{}}}],["click",{"_index":1011,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["client",{"_index":43,"title":{},"body":{"components/AboutComponent.html":{}}}],["close",{"_index":1012,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["closesess",{"_index":822,"title":{},"body":{"injectables/LogService.html":{}}}],["cloud",{"_index":456,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["cloudcolor",{"_index":607,"title":{},"body":{"components/GraphsComponent.html":{}}}],["cloudsandwind",{"_index":616,"title":{},"body":{"components/GraphsComponent.html":{}}}],["cloudsandwind/cloud",{"_index":642,"title":{},"body":{"components/GraphsComponent.html":{}}}],["cloudsandwindchart",{"_index":608,"title":{},"body":{"components/GraphsComponent.html":{}}}],["cloudsandwindservic",{"_index":452,"title":{"injectables/CloudsAndWindService.html":{}},"body":{"injectables/CloudsAndWindService.html":{},"components/GraphsComponent.html":{},"coverage.html":{}}}],["cluster_appmodul",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declar",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_import",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cod",{"_index":1374,"title":{},"body":{"classes/WeatherNow.html":{}}}],["code",{"_index":440,"title":{},"body":{"components/CityComponent.html":{},"injectables/LogService.html":{},"index.html":{}}}],["column",{"_index":337,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["comment",{"_index":1224,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["commonmodul",{"_index":182,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["commonurl",{"_index":238,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["compat",{"_index":725,"title":{},"body":{"components/InitialComponent.html":{}}}],["compil",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["complexsearch",{"_index":240,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["complexsearch(valu",{"_index":254,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["complexsearchid",{"_index":241,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["complexsearchid(valu",{"_index":257,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["complic",{"_index":921,"title":{},"body":{"injectables/LogService.html":{}}}],["compodoc/compodoc",{"_index":1537,"title":{},"body":{"dependencies.html":{}}}],["compon",{"_index":0,"title":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["component_templ",{"_index":80,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["comprobamo",{"_index":323,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log",{"_index":760,"title":{},"body":{"components/InitialComponent.html":{}}}],["console.log(\"access",{"_index":912,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(\"complet",{"_index":762,"title":{},"body":{"components/InitialComponent.html":{}}}],["console.log(\"delet",{"_index":945,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["console.log(\"failur",{"_index":907,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(\"filt",{"_index":808,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["console.log(\"interceptor",{"_index":816,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["console.log(\"log",{"_index":321,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log(\"not",{"_index":1167,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["console.log(\"queri",{"_index":311,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log(\"rain",{"_index":552,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["console.log(\"snow",{"_index":556,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["console.log(\"someth",{"_index":937,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(\"there'",{"_index":878,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(\"tri",{"_index":304,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log(\"upload",{"_index":300,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log('thi",{"_index":1232,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["console.log(`there'",{"_index":914,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(bodi",{"_index":882,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(err",{"_index":917,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(item.main.temp",{"_index":1348,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["console.log(r",{"_index":931,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(request",{"_index":818,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["console.log(respons",{"_index":894,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(response.data[0].c",{"_index":893,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(rx",{"_index":302,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log(this.currentuser.display",{"_index":904,"title":{},"body":{"injectables/LogService.html":{}}}],["const",{"_index":32,"title":{},"body":{"components/AboutComponent.html":{},"modules/AppRoutingModule.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{}}}],["constructor",{"_index":21,"title":{},"body":{"components/AboutComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["constructor(auth",{"_index":795,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["constructor(el",{"_index":522,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["constructor(forecastvaluesservic",{"_index":618,"title":{},"body":{"components/GraphsComponent.html":{}}}],["constructor(formbuild",{"_index":965,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{}}}],["constructor(http",{"_index":247,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/WeatherService.html":{}}}],["constructor(log",{"_index":1287,"title":{},"body":{"components/SettingsComponent.html":{}}}],["constructor(nam",{"_index":1241,"title":{},"body":{"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["constructor(priv",{"_index":806,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/WeatherService.html":{}}}],["constructor(rout",{"_index":367,"title":{},"body":{"components/CityComponent.html":{},"components/NavigationComponent.html":{}}}],["constructor(savedcitiesservic",{"_index":831,"title":{},"body":{"injectables/LogService.html":{}}}],["constructor(weatherservic",{"_index":684,"title":{},"body":{"components/InitialComponent.html":{}}}],["consum",{"_index":728,"title":{},"body":{"components/InitialComponent.html":{}}}],["contain",{"_index":564,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"classes/RespuestaForecast.html":{}}}],["content",{"_index":292,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["contenttyp",{"_index":239,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["context",{"_index":1524,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["coord",{"_index":1238,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["core",{"_index":1542,"title":{},"body":{"dependencies.html":{}}}],["correctli",{"_index":758,"title":{},"body":{"components/InitialComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["countri",{"_index":329,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{}}}],["coverag",{"_index":1503,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["crash",{"_index":757,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["creat",{"_index":42,"title":{},"body":{"components/AboutComponent.html":{},"injectables/LogService.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["createus",{"_index":823,"title":{},"body":{"injectables/LogService.html":{}}}],["createuser(usernam",{"_index":835,"title":{},"body":{"injectables/LogService.html":{}}}],["creation",{"_index":1013,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["current",{"_index":423,"title":{},"body":{"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"injectables/LogService.html":{},"classes/WeatherNow.html":{}}}],["currentus",{"_index":820,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["currentuser.usernam",{"_index":1332,"title":{},"body":{"components/SettingsComponent.html":{}}}],["data",{"_index":52,"title":{"classes/Data.html":{}},"body":{"components/AboutComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"coverage.html":{}}}],["data.password",{"_index":1131,"title":{},"body":{"components/NavigationComponent.html":{}}}],["data.usernam",{"_index":1130,"title":{},"body":{"components/NavigationComponent.html":{}}}],["databas",{"_index":286,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{}}}],["dataset",{"_index":480,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["datasourc",{"_index":358,"title":{},"body":{"components/CityComponent.html":{}}}],["date",{"_index":457,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["db",{"_index":881,"title":{},"body":{"injectables/LogService.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["declar",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"overview.html":{}}}],["default",{"_index":114,"title":{},"body":{"components/AppComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"miscellaneous/variables.html":{}}}],["defin",{"_index":22,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["deg",{"_index":519,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["delaccnt",{"_index":1280,"title":{},"body":{"components/SettingsComponent.html":{}}}],["delet",{"_index":665,"title":{},"body":{"components/GraphsComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{}}}],["deleteaccount",{"_index":1271,"title":{},"body":{"components/SettingsComponent.html":{}}}],["deleteaccount1",{"_index":1272,"title":{},"body":{"components/SettingsComponent.html":{}}}],["deletebodi",{"_index":824,"title":{},"body":{"injectables/LogService.html":{}}}],["deletebody(usernam",{"_index":837,"title":{},"body":{"injectables/LogService.html":{}}}],["deletec",{"_index":1059,"title":{},"body":{"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["deleteus",{"_index":825,"title":{},"body":{"injectables/LogService.html":{}}}],["deleteuser(us",{"_index":839,"title":{},"body":{"injectables/LogService.html":{}}}],["demo",{"_index":919,"title":{},"body":{"injectables/LogService.html":{}}}],["demous",{"_index":920,"title":{},"body":{"injectables/LogService.html":{}}}],["deni",{"_index":913,"title":{},"body":{"injectables/LogService.html":{}}}],["depend",{"_index":119,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["descript",{"_index":518,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"components/LogginDialogComponent.html":{},"classes/RespuestaForecast.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{}}}],["dev",{"_index":1560,"title":{},"body":{"index.html":{}}}],["develop",{"_index":38,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["dialog",{"_index":954,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["dialog'},{'nam",{"_index":95,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["dialog.compon",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"components/NavigationComponent.html":{}}}],["dialog.component.css",{"_index":955,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.html",{"_index":956,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.t",{"_index":953,"title":{},"body":{"components/LogginDialogComponent.html":{},"coverage.html":{}}}],["dialog.component.ts:13",{"_index":976,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:14",{"_index":974,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:15",{"_index":981,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:16",{"_index":979,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:17",{"_index":978,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:18",{"_index":977,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:19",{"_index":980,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:20",{"_index":969,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:28",{"_index":972,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:36",{"_index":973,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:42",{"_index":970,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:63",{"_index":971,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog/loggin",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"coverage.html":{}}}],["dialogref",{"_index":967,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["differ",{"_index":203,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/InitialComponent.html":{},"components/SettingsComponent.html":{}}}],["direct",{"_index":78,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{}}}],["directive|pipe|service|class|guard|interface|enum|modul",{"_index":1565,"title":{},"body":{"index.html":{}}}],["directori",{"_index":1569,"title":{},"body":{"index.html":{}}}],["disabl",{"_index":747,"title":{},"body":{"components/InitialComponent.html":{}}}],["display",{"_index":220,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/SavedCity.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{}}}],["displayedcolumn",{"_index":359,"title":{},"body":{"components/CityComponent.html":{}}}],["displayvalu",{"_index":1376,"title":{},"body":{"classes/WeatherNow.html":{}}}],["dissapear",{"_index":662,"title":{},"body":{"components/GraphsComponent.html":{}}}],["dist",{"_index":1568,"title":{},"body":{"index.html":{}}}],["document",{"_index":1504,"title":{},"body":{"coverage.html":{}}}],["document.getelementsbytagname(\"bodi",{"_index":34,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["don`t",{"_index":864,"title":{},"body":{"injectables/LogService.html":{}}}],["download",{"_index":780,"title":{},"body":{"components/InitialComponent.html":{}}}],["dt",{"_index":507,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["dt_txt",{"_index":508,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["durat",{"_index":432,"title":{},"body":{"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["dure",{"_index":71,"title":{},"body":{"components/AboutComponent.html":{}}}],["dynam",{"_index":1533,"title":{},"body":{"dependencies.html":{}}}],["e2",{"_index":1579,"title":{},"body":{"index.html":{}}}],["each",{"_index":207,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["econom",{"_index":67,"title":{},"body":{"components/AboutComponent.html":{}}}],["ee",{"_index":45,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{}}}],["el",{"_index":325,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/SavedCitiesService.html":{},"classes/WeatherNow.html":{}}}],["element",{"_index":77,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["element.cloud",{"_index":524,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.coord.lat",{"_index":723,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["element.coord.lon",{"_index":722,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["element.countri",{"_index":721,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["element.dt",{"_index":526,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.dt_txt",{"_index":528,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.id",{"_index":720,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["element.main.grnd_level",{"_index":530,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.humid",{"_index":531,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.pressur",{"_index":532,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.sea_level",{"_index":533,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.temp",{"_index":534,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.temp_kf",{"_index":535,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.temp_max",{"_index":536,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.temp_min",{"_index":537,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.name.includes(this.c",{"_index":753,"title":{},"body":{"components/InitialComponent.html":{}}}],["element.paramet",{"_index":450,"title":{},"body":{"components/CityComponent.html":{}}}],["element.rain",{"_index":551,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.rain[\"3h",{"_index":554,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.snow",{"_index":555,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.snow[\"3h",{"_index":558,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.valu",{"_index":451,"title":{},"body":{"components/CityComponent.html":{}}}],["element.weather.foreach((weath",{"_index":538,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.wind.deg",{"_index":550,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.wind.spe",{"_index":549,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["email",{"_index":929,"title":{},"body":{"injectables/LogService.html":{}}}],["emptylist",{"_index":1051,"title":{},"body":{"components/NavigationComponent.html":{}}}],["en",{"_index":1231,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["enabl",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"components/InitialComponent.html":{}}}],["end",{"_index":1578,"title":{},"body":{"index.html":{}}}],["engros",{"_index":1042,"title":{},"body":{"modules/MaterialModule.html":{}}}],["entrycompon",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["environ",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment.product",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["environments/environ",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":877,"title":{},"body":{"injectables/LogService.html":{}}}],["error",{"_index":303,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["es",{"_index":327,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["event",{"_index":688,"title":{},"body":{"components/InitialComponent.html":{}}}],["event.key",{"_index":771,"title":{},"body":{"components/InitialComponent.html":{}}}],["everyth",{"_index":1223,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["execut",{"_index":1575,"title":{},"body":{"index.html":{}}}],["exist",{"_index":305,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["expir",{"_index":1320,"title":{},"body":{"components/SettingsComponent.html":{}}}],["export",{"_index":30,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"overview.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjjcmvhdglvbi10aw1lijoxnti4nzk5mty4mzgxlcj1c2vybmftzsi6imrlbw8ifq.vwezijoag2icsn0uprts8jqre1ngzhcrg6fvkdh2",{"_index":924,"title":{},"body":{"injectables/LogService.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjjcmvhdglvbi10aw1lijoxnti4otu2oty0mte2lcj1c2vybmftzsi6imrlbw8ifq.xkahjdq9yey2aus8dp3qtobmefl0waclsk4lrmkz9n",{"_index":271,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["fail",{"_index":320,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["fals",{"_index":288,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"injectables/RainAndSnowService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"miscellaneous/variables.html":{}}}],["fav/upd",{"_index":875,"title":{},"body":{"injectables/LogService.html":{}}}],["favorit",{"_index":449,"title":{},"body":{"components/CityComponent.html":{}}}],["favourit",{"_index":342,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"classes/SavedCity.html":{}}}],["favouritec",{"_index":217,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["ff0000",{"_index":1357,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["ffffff",{"_index":1199,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["field",{"_index":735,"title":{},"body":{"components/InitialComponent.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"index.html":{}}}],["fill",{"_index":285,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["filter",{"_index":332,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["flag",{"_index":1571,"title":{},"body":{"index.html":{}}}],["folder",{"_index":712,"title":{},"body":{"components/InitialComponent.html":{}}}],["forecast",{"_index":360,"title":{"classes/Forecast.html":{}},"body":{"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/TemperatureService.html":{},"coverage.html":{}}}],["forecast(el",{"_index":421,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["forecast.map(item",{"_index":470,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["forecastvalu",{"_index":577,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{}}}],["forecastvaluesservic",{"_index":371,"title":{"injectables/ForecastValuesService.html":{}},"body":{"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"coverage.html":{}}}],["forecastvaluesservice.getupdates().subscribe(valu",{"_index":645,"title":{},"body":{"components/GraphsComponent.html":{}}}],["forecastvaluesservice.getvalu",{"_index":644,"title":{},"body":{"components/GraphsComponent.html":{}}}],["form",{"_index":957,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["format",{"_index":501,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["formbuild",{"_index":966,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["formcontrol",{"_index":983,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["formcontrol(this.password",{"_index":990,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["formcontrol(this.password,[validators.minlength(5",{"_index":1181,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["formcontrol(this.password2,[validators.minlength(5",{"_index":1182,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["formcontrol(this.usernam",{"_index":986,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["formcontrol(this.username,[validators.minlength(5",{"_index":1180,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["formdelet",{"_index":1273,"title":{},"body":{"components/SettingsComponent.html":{}}}],["formgroup",{"_index":975,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["formpassword",{"_index":1274,"title":{},"body":{"components/SettingsComponent.html":{}}}],["formsmodul",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":672,"title":{},"body":{"components/InitialComponent.html":{}}}],["found.nam",{"_index":787,"title":{},"body":{"components/InitialComponent.html":{}}}],["found.sys.countri",{"_index":788,"title":{},"body":{"components/InitialComponent.html":{}}}],["foundciti",{"_index":673,"title":{},"body":{"components/InitialComponent.html":{}}}],["framework",{"_index":41,"title":{},"body":{"components/AboutComponent.html":{}}}],["free",{"_index":56,"title":{},"body":{"components/AboutComponent.html":{}}}],["full",{"_index":195,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["function",{"_index":732,"title":{},"body":{"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{}}}],["further",{"_index":1581,"title":{},"body":{"index.html":{}}}],["gener",{"_index":66,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["get",{"_index":439,"title":{"index.html":{}},"body":{"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["getciti",{"_index":578,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["getcitieslist",{"_index":678,"title":{},"body":{"components/InitialComponent.html":{}}}],["getcityweath",{"_index":365,"title":{},"body":{"components/CityComponent.html":{}}}],["getcloudsandwindchart",{"_index":459,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["getcloudsandwindchart(forecast",{"_index":461,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["getforecast",{"_index":1486,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getforecast(id",{"_index":1490,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getlog",{"_index":1060,"title":{},"body":{"components/NavigationComponent.html":{}}}],["getrainandsnowchart",{"_index":1188,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["getrainandsnowchart(forecast",{"_index":1190,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["getsavedc",{"_index":1203,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["gettemperaturechart",{"_index":1340,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["gettemperaturechart(forecast",{"_index":1342,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["gettoken",{"_index":826,"title":{},"body":{"injectables/LogService.html":{}}}],["getupd",{"_index":579,"title":{},"body":{"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["getvalu",{"_index":580,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["getweath",{"_index":1487,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getweather(id",{"_index":1492,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getweatherbycitynam",{"_index":1488,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getweatherbycityname(nam",{"_index":1494,"title":{},"body":{"injectables/WeatherService.html":{}}}],["give",{"_index":1266,"title":{},"body":{"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["go",{"_index":948,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"index.html":{}}}],["goodcommonurl",{"_index":821,"title":{},"body":{"injectables/LogService.html":{}}}],["graph",{"_index":197,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"classes/RespuestaForecast.html":{},"modules.html":{}}}],["graphs'},{'nam",{"_index":88,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["graphs.component.css",{"_index":605,"title":{},"body":{"components/GraphsComponent.html":{}}}],["graphs.component.html",{"_index":606,"title":{},"body":{"components/GraphsComponent.html":{}}}],["graphs/:id/:nam",{"_index":199,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["graphs/graphs.compon",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["graphscompon",{"_index":87,"title":{"components/GraphsComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["grnd_level",{"_index":510,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["ground",{"_index":1458,"title":{},"body":{"classes/WeatherNow.html":{}}}],["hammerj",{"_index":1545,"title":{},"body":{"dependencies.html":{}}}],["header",{"_index":291,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["help",{"_index":1582,"title":{},"body":{"index.html":{}}}],["here",{"_index":1039,"title":{},"body":{"modules/MaterialModule.html":{}}}],["hidden",{"_index":446,"title":{},"body":{"components/CityComponent.html":{},"components/NavigationComponent.html":{}}}],["hold",{"_index":858,"title":{},"body":{"injectables/LogService.html":{}}}],["home",{"_index":1141,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["host",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["hostlisten",{"_index":682,"title":{},"body":{"components/InitialComponent.html":{}}}],["hostlistener('window:keyup",{"_index":768,"title":{},"body":{"components/InitialComponent.html":{}}}],["hour",{"_index":560,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["html",{"_index":76,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["http",{"_index":253,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"injectables/WeatherService.html":{}}}],["http://localhost:4200",{"_index":1561,"title":{},"body":{"index.html":{}}}],["http://localhost:8080/citiesservic",{"_index":273,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["http_interceptor",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["httpclient",{"_index":248,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"injectables/WeatherService.html":{}}}],["httpclientmodul",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["httpevent",{"_index":804,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["httphandler",{"_index":802,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["httpheader",{"_index":278,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"injectables/WeatherService.html":{}}}],["httpinterceptor",{"_index":790,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["httpoption",{"_index":290,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["httpoptions).subscribe(rx",{"_index":298,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["httprequest",{"_index":800,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["httprequest(\"delet",{"_index":942,"title":{},"body":{"injectables/LogService.html":{}}}],["https://api.openweathermap.org/data/2.5/forecast?id=${id}&appid=888b7bb3ed5f95fb9894b5c33589e6a6",{"_index":1501,"title":{},"body":{"injectables/WeatherService.html":{}}}],["https://api.openweathermap.org/data/2.5/weather?id=${id}&appid=888b7bb3ed5f95fb9894b5c33589e6a6",{"_index":1498,"title":{},"body":{"injectables/WeatherService.html":{}}}],["https://api.openweathermap.org/data/2.5/weather?q=${name}&appid=888b7bb3ed5f95fb9894b5c33589e6a6",{"_index":1500,"title":{},"body":{"injectables/WeatherService.html":{}}}],["https://api.openweathermap.org/data/2.5/weather?q=vigo&appid=888b7bb3ed5f95fb9894b5c33589e6a6",{"_index":1496,"title":{},"body":{"injectables/WeatherService.html":{}}}],["humid",{"_index":511,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["icon",{"_index":64,"title":{},"body":{"components/AboutComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{}}}],["id",{"_index":225,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["id\")).subscribe(rx",{"_index":345,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["id\",\"country\",\"lat\",\"lon\",\"nam",{"_index":338,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["identifi",{"_index":1505,"title":{},"body":{"coverage.html":{}}}],["if(!(this.router.url.includes(`/initi",{"_index":1095,"title":{},"body":{"components/NavigationComponent.html":{}}}],["if((this.city.length>0)&&(this.citieslist",{"_index":750,"title":{},"body":{"components/InitialComponent.html":{}}}],["if(err.statu",{"_index":908,"title":{},"body":{"injectables/LogService.html":{}}}],["if(json.parse(localstorage.getitem(\"favouritec",{"_index":1213,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["if(request.method",{"_index":807,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["if(request.url.includes(`http://localhost:8080/citiesservic",{"_index":810,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["if(rx.rain",{"_index":1421,"title":{},"body":{"classes/WeatherNow.html":{}}}],["if(rx.snow",{"_index":1423,"title":{},"body":{"classes/WeatherNow.html":{}}}],["if(this.form.get('password').error",{"_index":1003,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["if(this.form.get('password').errors.requir",{"_index":1004,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["if(this.form.get('username').error",{"_index":998,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["if(this.form.get('username').errors.maxlength",{"_index":1001,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["if(this.form.get('username').errors.minlength",{"_index":1000,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["if(this.form.get('username').errors.requir",{"_index":1002,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["if(this.logservice.currentus",{"_index":1111,"title":{},"body":{"components/NavigationComponent.html":{}}}],["if(this.yousurebutton",{"_index":1118,"title":{},"body":{"components/NavigationComponent.html":{}}}],["imag",{"_index":63,"title":{},"body":{"components/AboutComponent.html":{}}}],["imatia",{"_index":73,"title":{},"body":{"components/AboutComponent.html":{}}}],["implement",{"_index":9,"title":{},"body":{"components/AboutComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["import",{"_index":28,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["includ",{"_index":445,"title":{},"body":{"components/CityComponent.html":{}}}],["index",{"_index":18,"title":{"index.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["indic",{"_index":859,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["ineffici",{"_index":1101,"title":{},"body":{"components/NavigationComponent.html":{}}}],["info",{"_index":2,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["inform",{"_index":435,"title":{},"body":{"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["inici",{"_index":1138,"title":{},"body":{"components/NavigationComponent.html":{}}}],["initi",{"_index":193,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/InitialComponent.html":{}}}],["initial'},{'nam",{"_index":90,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["initial.component.css",{"_index":667,"title":{},"body":{"components/InitialComponent.html":{}}}],["initial.component.html",{"_index":668,"title":{},"body":{"components/InitialComponent.html":{}}}],["initial/initial.compon",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["initialcompon",{"_index":89,"title":{"components/InitialComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["inject",{"_index":233,"title":{"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{}},"body":{"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"overview.html":{}}}],["innov",{"_index":74,"title":{},"body":{"components/AboutComponent.html":{}}}],["input",{"_index":681,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["insert",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"classes/SavedCity.html":{}}}],["insertbodi",{"_index":1240,"title":{},"body":{"classes/SavedCity.html":{}}}],["instruct",{"_index":1221,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["interact",{"_index":352,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["intercept",{"_index":794,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["intercept(request",{"_index":799,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["interceptor",{"_index":791,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["interceptor'},{'nam",{"_index":92,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["interceptor.component.css",{"_index":792,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["interceptor.component.html",{"_index":793,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["interceptor/interceptor.compon",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["interceptorcompon",{"_index":91,"title":{"components/InterceptorComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["internship",{"_index":72,"title":{},"body":{"components/AboutComponent.html":{}}}],["intervalcheck",{"_index":1052,"title":{},"body":{"components/NavigationComponent.html":{}}}],["islog",{"_index":1281,"title":{},"body":{"components/SettingsComponent.html":{}}}],["isn't",{"_index":724,"title":{},"body":{"components/InitialComponent.html":{}}}],["isnumb",{"_index":857,"title":{},"body":{"injectables/LogService.html":{}}}],["item.clouds.al",{"_index":471,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["item.countri",{"_index":317,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["item.dt_txt",{"_index":475,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["item.id).join",{"_index":230,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["item.id.tostr",{"_index":316,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["item.lat",{"_index":319,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["item.lon",{"_index":318,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["item.main.temp",{"_index":1349,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["item.main.temp_max",{"_index":1352,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["item.main.temp_min",{"_index":1354,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["item.rain",{"_index":1195,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["item.snow",{"_index":1196,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["item.wind.spe",{"_index":473,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["js",{"_index":1543,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":713,"title":{},"body":{"components/InitialComponent.html":{}}}],["json.parse(localstorage.getitem(\"favouritecities\")).foreach(el",{"_index":1215,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["json.stringify(usernam",{"_index":898,"title":{},"body":{"injectables/LogService.html":{}}}],["karma",{"_index":1577,"title":{},"body":{"index.html":{}}}],["keyadmin",{"_index":674,"title":{},"body":{"components/InitialComponent.html":{}}}],["keyboard",{"_index":765,"title":{},"body":{"components/InitialComponent.html":{}}}],["keyboardev",{"_index":690,"title":{},"body":{"components/InitialComponent.html":{}}}],["keyevent(ev",{"_index":769,"title":{},"body":{"components/InitialComponent.html":{}}}],["label",{"_index":479,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["last",{"_index":1467,"title":{},"body":{"classes/WeatherNow.html":{}}}],["lat",{"_index":330,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{}}}],["launch",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["launchform",{"_index":1153,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["leakag",{"_index":749,"title":{},"body":{"components/InitialComponent.html":{}}}],["legend",{"_index":75,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"injectables/RainAndSnowService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"overview.html":{}}}],["let'",{"_index":1335,"title":{},"body":{"components/SettingsComponent.html":{}}}],["let\\'",{"_index":1337,"title":{},"body":{"components/SettingsComponent.html":{}}}],["level",{"_index":1456,"title":{},"body":{"classes/WeatherNow.html":{}}}],["limit",{"_index":58,"title":{},"body":{"components/AboutComponent.html":{}}}],["line",{"_index":486,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/TemperatureService.html":{}}}],["link",{"_index":1134,"title":{},"body":{"components/NavigationComponent.html":{},"classes/SavedCity.html":{}}}],["list",{"_index":561,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/UserServer.html":{}}}],["list.map(item",{"_index":229,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["listen",{"_index":394,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["liter",{"_index":567,"title":{},"body":{"classes/Forecast.html":{},"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["litr",{"_index":1469,"title":{},"body":{"classes/WeatherNow.html":{}}}],["load",{"_index":675,"title":{},"body":{"components/InitialComponent.html":{}}}],["loadfavourit",{"_index":242,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["loadfavourites(c",{"_index":260,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["local",{"_index":442,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["localstorag",{"_index":341,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["localstorage.getitem(\"sess",{"_index":918,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["localstorage.getitem(\"token",{"_index":815,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["localstorage.removeitem(\"favouritec",{"_index":1233,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["localstorage.removeitem(\"sess",{"_index":872,"title":{},"body":{"injectables/LogService.html":{}}}],["localstorage.removeitem(\"token",{"_index":873,"title":{},"body":{"injectables/LogService.html":{}}}],["localstorage.setitem(\"favouritecities\",json.stringify(this.c",{"_index":1229,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["localstorage.setitem(\"sess",{"_index":897,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["localstorage.setitem(\"token",{"_index":889,"title":{},"body":{"injectables/LogService.html":{}}}],["localstorage.setitem(\"token\",\"bear",{"_index":923,"title":{},"body":{"injectables/LogService.html":{}}}],["locat",{"_index":369,"title":{},"body":{"components/CityComponent.html":{}}}],["log",{"_index":243,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["log.servic",{"_index":805,"title":{},"body":{"components/InterceptorComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["loggin",{"_index":94,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["loggindialogcompon",{"_index":93,"title":{"components/LogginDialogComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":827,"title":{},"body":{"injectables/LogService.html":{}}}],["login(usernam",{"_index":843,"title":{},"body":{"injectables/LogService.html":{}}}],["logrefresh",{"_index":828,"title":{},"body":{"injectables/LogService.html":{}}}],["logservic",{"_index":796,"title":{"injectables/LogService.html":{}},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"coverage.html":{}}}],["logsubscript",{"_index":1053,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["logsubscription2",{"_index":1054,"title":{},"body":{"components/NavigationComponent.html":{}}}],["lon",{"_index":331,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{}}}],["long",{"_index":1015,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["look",{"_index":733,"title":{},"body":{"components/InitialComponent.html":{}}}],["lop",{"_index":334,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["ls",{"_index":1217,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["main",{"_index":509,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{}}}],["make",{"_index":661,"title":{},"body":{"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"classes/SavedCity.html":{},"injectables/WeatherService.html":{}}}],["manag",{"_index":563,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{}}}],["mat",{"_index":413,"title":{},"body":{"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["mat_dialog_data",{"_index":984,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["matautocompletemodul",{"_index":1036,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matbuttonmodul",{"_index":189,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["matcardmodul",{"_index":1022,"title":{},"body":{"modules/MaterialModule.html":{}}}],["match",{"_index":105,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["matcheckboxmodul",{"_index":190,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["matchipsmodul",{"_index":1033,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matchpassword",{"_index":1179,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["matchpassword(ac",{"_index":1171,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["matdialog",{"_index":1068,"title":{},"body":{"components/NavigationComponent.html":{}}}],["matdialogmodul",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{}}}],["matdialogref",{"_index":968,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["materi",{"_index":1040,"title":{},"body":{"modules/MaterialModule.html":{}}}],["material/fab",{"_index":1539,"title":{},"body":{"dependencies.html":{}}}],["material/material.modul",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["material/rippl",{"_index":393,"title":{},"body":{"components/CityComponent.html":{}}}],["materialmodul",{"_index":127,"title":{"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["matexpansionmodul",{"_index":1035,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matgridlistmodul",{"_index":1023,"title":{},"body":{"modules/MaterialModule.html":{}}}],["math.max(...this.wind",{"_index":498,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["maticonmodul",{"_index":1021,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matinputmodul",{"_index":1027,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matlistmodul",{"_index":1031,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matmenumodul",{"_index":1019,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matprogressspinnermodul",{"_index":1032,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matradiomodul",{"_index":1030,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matselectmodul",{"_index":1028,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matsidenavmodul",{"_index":1024,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matslidermodul",{"_index":1029,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matslidetogglemodul",{"_index":1038,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matsnackbar",{"_index":373,"title":{},"body":{"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["matsnackbarmodul",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["matsortmodul",{"_index":1025,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattabl",{"_index":506,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["mattabledatasourc",{"_index":390,"title":{},"body":{"components/CityComponent.html":{}}}],["mattabledatasource(this.valuesdisplay",{"_index":416,"title":{},"body":{"components/CityComponent.html":{}}}],["mattablemodul",{"_index":1026,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattabsmodul",{"_index":1037,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matter",{"_index":949,"title":{},"body":{"injectables/LogService.html":{}}}],["mattoolbarmodul",{"_index":1020,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattooltipmodul",{"_index":1034,"title":{},"body":{"modules/MaterialModule.html":{}}}],["max",{"_index":497,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/TemperatureService.html":{}}}],["maxlengtherror",{"_index":958,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["mb",{"_index":786,"title":{},"body":{"components/InitialComponent.html":{}}}],["mdcrippl",{"_index":392,"title":{},"body":{"components/CityComponent.html":{}}}],["meant",{"_index":775,"title":{},"body":{"components/InitialComponent.html":{}}}],["memori",{"_index":730,"title":{},"body":{"components/InitialComponent.html":{}}}],["menu",{"_index":1139,"title":{},"body":{"components/NavigationComponent.html":{}}}],["messag",{"_index":1400,"title":{},"body":{"classes/WeatherNow.html":{}}}],["metadata",{"_index":11,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["metemo",{"_index":1230,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["method",{"_index":19,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["microservic",{"_index":437,"title":{},"body":{"components/CityComponent.html":{}}}],["min",{"_index":495,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/TemperatureService.html":{}}}],["minlengtherror",{"_index":959,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["minut",{"_index":62,"title":{},"body":{"components/AboutComponent.html":{}}}],["miscellan",{"_index":1592,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["modifi",{"_index":1236,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["modul",{"_index":117,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":603,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["more",{"_index":1583,"title":{},"body":{"index.html":{}}}],["more_vert",{"_index":1143,"title":{},"body":{"components/NavigationComponent.html":{}}}],["much",{"_index":729,"title":{},"body":{"components/InitialComponent.html":{},"modules/MaterialModule.html":{}}}],["multi",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["mw",{"_index":925,"title":{},"body":{"injectables/LogService.html":{}}}],["name",{"_index":81,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"index.html":{}}}],["navig",{"_index":202,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"index.html":{}}}],["navigation'},{'nam",{"_index":97,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["navigation.component.css",{"_index":1047,"title":{},"body":{"components/NavigationComponent.html":{}}}],["navigation.component.html",{"_index":1048,"title":{},"body":{"components/NavigationComponent.html":{}}}],["navigation/navigation.compon",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["navigationcompon",{"_index":96,"title":{"components/NavigationComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["nciti",{"_index":224,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["necessari",{"_index":1044,"title":{},"body":{"modules/MaterialModule.html":{}}}],["never",{"_index":1219,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["new",{"_index":99,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"coverage.html":{},"index.html":{}}}],["newus",{"_index":963,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["newusercompon",{"_index":98,"title":{"components/NewUserComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["next",{"_index":801,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["next.handle(request",{"_index":809,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["ng",{"_index":1558,"title":{},"body":{"index.html":{}}}],["ngmodul",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["ngondestroy",{"_index":1061,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["ngoninit",{"_index":20,"title":{},"body":{"components/AboutComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["nif",{"_index":930,"title":{},"body":{"injectables/LogService.html":{}}}],["none",{"_index":706,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["notempti",{"_index":1055,"title":{},"body":{"components/NavigationComponent.html":{}}}],["notsur",{"_index":1062,"title":{},"body":{"components/NavigationComponent.html":{}}}],["npassword",{"_index":222,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["null",{"_index":999,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/SavedCitiesService.html":{},"classes/WeatherNow.html":{}}}],["number",{"_index":258,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{}}}],["nvm",{"_index":1547,"title":{},"body":{"dependencies.html":{}}}],["object",{"_index":382,"title":{},"body":{"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/WeatherNow.html":{},"miscellaneous/variables.html":{}}}],["observ",{"_index":586,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"injectables/WeatherService.html":{}}}],["obtain",{"_index":53,"title":{},"body":{"components/AboutComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{}}}],["ok",{"_index":289,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["on",{"_index":206,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["onchang",{"_index":386,"title":{},"body":{"components/CityComponent.html":{}}}],["ondestroy",{"_index":1046,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["oninit",{"_index":10,"title":{},"body":{"components/AboutComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["ontim",{"_index":44,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{}}}],["op",{"_index":335,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["open",{"_index":1067,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["openweath",{"_index":1502,"title":{},"body":{"injectables/WeatherService.html":{}}}],["openweathermap",{"_index":55,"title":{},"body":{"components/AboutComponent.html":{}}}],["optimum",{"_index":726,"title":{},"body":{"components/InitialComponent.html":{}}}],["option",{"_index":252,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["order",{"_index":1041,"title":{},"body":{"modules/MaterialModule.html":{}}}],["out",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"components/NavigationComponent.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1588,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p1",{"_index":1172,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["p1.valu",{"_index":1176,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["p2",{"_index":1174,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["p2.valu",{"_index":1177,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["packag",{"_index":1526,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["para",{"_index":1403,"title":{},"body":{"classes/WeatherNow.html":{}}}],["param",{"_index":255,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["paramet",{"_index":251,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["parámetro",{"_index":326,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["passwd",{"_index":1282,"title":{},"body":{"components/SettingsComponent.html":{}}}],["password",{"_index":216,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"classes/UserServer.html":{}}}],["password2",{"_index":1152,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["passwordrequirederror",{"_index":960,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["passwordvalid",{"_index":1168,"title":{"classes/PasswordValidation.html":{}},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"coverage.html":{}}}],["passwordvalidation.matchpassword",{"_index":1164,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["password}\"}`).subscribe(r",{"_index":951,"title":{},"body":{"injectables/LogService.html":{}}}],["path",{"_index":191,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/NavigationComponent.html":{}}}],["pathmatch",{"_index":194,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["per",{"_index":61,"title":{},"body":{"components/AboutComponent.html":{}}}],["percentag",{"_index":488,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/WeatherNow.html":{}}}],["perform",{"_index":727,"title":{},"body":{"components/InitialComponent.html":{}}}],["perman",{"_index":1334,"title":{},"body":{"components/SettingsComponent.html":{}}}],["pick",{"_index":1133,"title":{},"body":{"components/NavigationComponent.html":{}}}],["pop",{"_index":1007,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["popstateev",{"_index":398,"title":{},"body":{"components/CityComponent.html":{}}}],["possibl",{"_index":441,"title":{},"body":{"components/CityComponent.html":{}}}],["prepar",{"_index":1253,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["present",{"_index":1137,"title":{},"body":{"components/NavigationComponent.html":{}}}],["pressur",{"_index":512,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["primari",{"_index":656,"title":{},"body":{"components/GraphsComponent.html":{}}}],["primero",{"_index":322,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["privat",{"_index":284,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"injectables/WeatherService.html":{}}}],["problem",{"_index":915,"title":{},"body":{"injectables/LogService.html":{}}}],["process",{"_index":916,"title":{},"body":{"injectables/LogService.html":{}}}],["prod",{"_index":1570,"title":{},"body":{"index.html":{}}}],["produc",{"_index":748,"title":{},"body":{"components/InitialComponent.html":{}}}],["product",{"_index":1572,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["proffit",{"_index":68,"title":{},"body":{"components/AboutComponent.html":{}}}],["profil",{"_index":1056,"title":{},"body":{"components/NavigationComponent.html":{}}}],["project",{"_index":65,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["properti",{"_index":110,"title":{},"body":{"components/AppComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["protractor",{"_index":1580,"title":{},"body":{"index.html":{}}}],["provid",{"_index":46,"title":{},"body":{"components/AboutComponent.html":{},"modules/AppModule.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"overview.html":{}}}],["providedin",{"_index":283,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{}}}],["public",{"_index":1050,"title":{},"body":{"components/NavigationComponent.html":{}}}],["purpos",{"_index":69,"title":{},"body":{"components/AboutComponent.html":{}}}],["put",{"_index":406,"title":{},"body":{"components/CityComponent.html":{}}}],["pwd",{"_index":1275,"title":{},"body":{"components/SettingsComponent.html":{}}}],["que",{"_index":324,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["queri",{"_index":60,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{}}}],["rain",{"_index":520,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["rainandsnow",{"_index":617,"title":{},"body":{"components/GraphsComponent.html":{}}}],["rainandsnow/rain",{"_index":640,"title":{},"body":{"components/GraphsComponent.html":{}}}],["rainandsnowchart",{"_index":609,"title":{},"body":{"components/GraphsComponent.html":{}}}],["rainandsnowservic",{"_index":620,"title":{"injectables/RainAndSnowService.html":{}},"body":{"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"coverage.html":{}}}],["raincolor",{"_index":610,"title":{},"body":{"components/GraphsComponent.html":{}}}],["reach",{"_index":1220,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["reactiveformsmodul",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["readm",{"_index":1584,"title":{},"body":{"index.html":{}}}],["receiv",{"_index":407,"title":{},"body":{"components/CityComponent.html":{},"classes/WeatherNow.html":{}}}],["redirect",{"_index":204,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/SettingsComponent.html":{}}}],["redirectto",{"_index":192,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["ref",{"_index":1125,"title":{},"body":{"components/NavigationComponent.html":{}}}],["refresh",{"_index":396,"title":{},"body":{"components/CityComponent.html":{},"components/NavigationComponent.html":{}}}],["reload",{"_index":1563,"title":{},"body":{"index.html":{}}}],["relog",{"_index":1063,"title":{},"body":{"components/NavigationComponent.html":{}}}],["repeat",{"_index":1169,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["repres",{"_index":412,"title":{},"body":{"components/CityComponent.html":{}}}],["request",{"_index":301,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/WeatherService.html":{}}}],["request.clon",{"_index":813,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["requir",{"_index":784,"title":{},"body":{"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":1596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res.headers.get('x",{"_index":890,"title":{},"body":{"injectables/LogService.html":{}}}],["reset",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"components/SettingsComponent.html":{},"overview.html":{}}}],["respons",{"_index":201,"title":{},"body":{"modules/AppRoutingModule.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/RespuestaForecast.html":{},"injectables/WeatherService.html":{}}}],["response.data[0].c",{"_index":895,"title":{},"body":{"injectables/LogService.html":{}}}],["respuestaforecast",{"_index":391,"title":{"classes/RespuestaForecast.html":{}},"body":{"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"classes/RespuestaForecast.html":{},"coverage.html":{}}}],["result",{"_index":104,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":25,"title":{},"body":{"components/AboutComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["right",{"_index":205,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["root",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{}}}],["root'},{'nam",{"_index":84,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["rop",{"_index":336,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rout",{"_index":185,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/LogginDialogComponent.html":{},"overview.html":{},"routes.html":{}}}],["router",{"_index":832,"title":{},"body":{"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["router.events.subscribe(valu",{"_index":1094,"title":{},"body":{"components/NavigationComponent.html":{}}}],["routermodul",{"_index":184,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(rout",{"_index":200,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routesubscript",{"_index":1057,"title":{},"body":{"components/NavigationComponent.html":{}}}],["routing.modul",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.t",{"_index":181,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["run",{"_index":1557,"title":{},"body":{"index.html":{}}}],["rx",{"_index":361,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"classes/WeatherNow.html":{}}}],["rx.base",{"_index":1410,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.clouds.al",{"_index":1420,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.cod",{"_index":1435,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.coord.lat",{"_index":1405,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.coord.lon",{"_index":1404,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.data.foreach(item",{"_index":313,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.data.length",{"_index":310,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.data[0].countri",{"_index":349,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.data[0].id.tostr",{"_index":348,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.data[0].lat",{"_index":351,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.data[0].lon",{"_index":350,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.dt",{"_index":1425,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.id",{"_index":1432,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.grnd_level",{"_index":1417,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.humid",{"_index":1413,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.pressur",{"_index":1412,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.sea_level",{"_index":1416,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.temp",{"_index":1411,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.temp_max",{"_index":1415,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.temp_min",{"_index":1414,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.name",{"_index":1433,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.rain[\"3h",{"_index":1422,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.snow[\"3h",{"_index":1424,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.countri",{"_index":1429,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.id",{"_index":1427,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.messag",{"_index":1428,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.sunris",{"_index":1430,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.sunset",{"_index":1431,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.typ",{"_index":1426,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.weather.foreach((w",{"_index":1406,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.wind.deg",{"_index":1419,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.wind.spe",{"_index":1418,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rxciti",{"_index":676,"title":{},"body":{"components/InitialComponent.html":{}}}],["rxj",{"_index":596,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/WeatherService.html":{},"dependencies.html":{}}}],["save",{"_index":281,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{}}}],["save(citytosav",{"_index":1208,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["savec",{"_index":366,"title":{},"body":{"components/CityComponent.html":{}}}],["savedc",{"_index":213,"title":{"classes/SavedCity.html":{}},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/UserServer.html":{},"coverage.html":{}}}],["savedcitiesservic",{"_index":249,"title":{"injectables/SavedCitiesService.html":{}},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"coverage.html":{}}}],["savedcity(element.nam",{"_index":719,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["savedcity(item.nam",{"_index":315,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["savedcity(nam",{"_index":403,"title":{},"body":{"components/CityComponent.html":{}}}],["savedcity(rx.data[0].nam",{"_index":347,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["savedcity(this.rxcity.nam",{"_index":742,"title":{},"body":{"components/InitialComponent.html":{}}}],["savedcity.nam",{"_index":1144,"title":{},"body":{"components/NavigationComponent.html":{}}}],["scaffold",{"_index":1564,"title":{},"body":{"index.html":{}}}],["scale",{"_index":491,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["sea",{"_index":1455,"title":{},"body":{"classes/WeatherNow.html":{}}}],["sea_level",{"_index":513,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["search",{"_index":308,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"classes/SavedCity.html":{}}}],["searchbyid",{"_index":244,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["searchbyid(c",{"_index":264,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["searchbynam",{"_index":245,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["searchbyname(nam",{"_index":266,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["selector",{"_index":12,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["send",{"_index":562,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{}}}],["serv",{"_index":1559,"title":{},"body":{"index.html":{}}}],["servedc",{"_index":280,"title":{"classes/ServedCity.html":{}},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"coverage.html":{}}}],["server",{"_index":353,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"index.html":{}}}],["server.servic",{"_index":710,"title":{},"body":{"components/InitialComponent.html":{},"injectables/LogService.html":{}}}],["server.service.t",{"_index":236,"title":{},"body":{"injectables/CitiesServerService.html":{},"coverage.html":{}}}],["server.service.ts:107",{"_index":259,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:125",{"_index":265,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:146",{"_index":261,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:15",{"_index":272,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:17",{"_index":275,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:18",{"_index":277,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:19",{"_index":250,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:26",{"_index":269,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:53",{"_index":267,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:84",{"_index":262,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:89",{"_index":256,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server/services/rest",{"_index":812,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["server/services/rest/cities/c",{"_index":274,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server/services/rest/log/log",{"_index":850,"title":{},"body":{"injectables/LogService.html":{}}}],["server/services/rest/users/login",{"_index":811,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["serverrespons",{"_index":279,"title":{"classes/ServerResponse.html":{}},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"coverage.html":{}}}],["servic",{"_index":50,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{}}}],["service'",{"_index":1129,"title":{},"body":{"components/NavigationComponent.html":{}}}],["serviceworkermodul",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["serviceworkermodule.register('/ngsw",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["session",{"_index":47,"title":{},"body":{"components/AboutComponent.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["set",{"_index":102,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{}}}],["set(rx",{"_index":1398,"title":{},"body":{"classes/WeatherNow.html":{}}}],["setciti",{"_index":581,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["setcity(c",{"_index":588,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["setcurrentus",{"_index":1283,"title":{},"body":{"components/SettingsComponent.html":{}}}],["setfromlist",{"_index":1358,"title":{},"body":{"classes/UserServer.html":{}}}],["setfromlist(list",{"_index":227,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["sethead",{"_index":814,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["settings.component.css",{"_index":1269,"title":{},"body":{"components/SettingsComponent.html":{}}}],["settings.component.html",{"_index":1270,"title":{},"body":{"components/SettingsComponent.html":{}}}],["settings/settings.compon",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["settingscompon",{"_index":101,"title":{"components/SettingsComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["setvalu",{"_index":582,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["setvalues(valu",{"_index":590,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["sever",{"_index":565,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["share",{"_index":602,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["short",{"_index":1014,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["shouldn't",{"_index":1336,"title":{},"body":{"components/SettingsComponent.html":{}}}],["shouldn\\'t",{"_index":1338,"title":{},"body":{"components/SettingsComponent.html":{}}}],["show",{"_index":434,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["show/hid",{"_index":763,"title":{},"body":{"components/InitialComponent.html":{}}}],["showdelet",{"_index":1284,"title":{},"body":{"components/SettingsComponent.html":{}}}],["showforecast",{"_index":362,"title":{},"body":{"components/CityComponent.html":{}}}],["showlin",{"_index":490,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["shown",{"_index":447,"title":{},"body":{"components/CityComponent.html":{}}}],["sidenav",{"_index":1136,"title":{},"body":{"components/NavigationComponent.html":{}}}],["sign",{"_index":1009,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["simpli",{"_index":601,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["snackbar",{"_index":372,"title":{},"body":{"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["snow",{"_index":521,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["snow.servic",{"_index":641,"title":{},"body":{"components/GraphsComponent.html":{}}}],["snow.service.t",{"_index":1187,"title":{},"body":{"injectables/RainAndSnowService.html":{},"coverage.html":{}}}],["snow.service.ts:10",{"_index":1192,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["snow.service.ts:11",{"_index":1193,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["snow.service.ts:12",{"_index":1194,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["snow.service.ts:13",{"_index":1189,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["snow.service.ts:17",{"_index":1191,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["someon",{"_index":860,"title":{},"body":{"injectables/LogService.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"index.html":{}}}],["spec\\.t",{"_index":1597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["speed",{"_index":481,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["src/.../environment.prod.t",{"_index":1594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.t",{"_index":1595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../test.t",{"_index":1593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/about/about.component.t",{"_index":8,"title":{},"body":{"components/AboutComponent.html":{},"coverage.html":{}}}],["src/app/about/about.component.ts:12",{"_index":24,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/about/about.component.ts:8",{"_index":23,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/app",{"_index":180,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.t",{"_index":106,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:9",{"_index":116,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.t",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/citi",{"_index":235,"title":{},"body":{"injectables/CitiesServerService.html":{},"coverage.html":{}}}],["src/app/city/city.component.t",{"_index":354,"title":{},"body":{"components/CityComponent.html":{},"coverage.html":{}}}],["src/app/city/city.component.ts:27",{"_index":378,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:28",{"_index":385,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:29",{"_index":383,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:30",{"_index":384,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:31",{"_index":379,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:32",{"_index":380,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:33",{"_index":381,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:34",{"_index":374,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:50",{"_index":376,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:54",{"_index":375,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:88",{"_index":377,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/data.t",{"_index":502,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"coverage.html":{}}}],["src/app/city/data.ts:14",{"_index":568,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:15",{"_index":569,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:16",{"_index":570,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:18",{"_index":571,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:29",{"_index":573,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:37",{"_index":574,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:42",{"_index":572,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:43",{"_index":566,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:5",{"_index":504,"title":{},"body":{"classes/Data.html":{}}}],["src/app/city/data.ts:6",{"_index":503,"title":{},"body":{"classes/Data.html":{}}}],["src/app/city/data.ts:96",{"_index":1200,"title":{},"body":{"classes/RespuestaForecast.html":{}}}],["src/app/forecast",{"_index":575,"title":{},"body":{"injectables/ForecastValuesService.html":{},"coverage.html":{}}}],["src/app/graphs/cloudsandwind/cloud",{"_index":453,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"coverage.html":{}}}],["src/app/graphs/graphs.component.t",{"_index":604,"title":{},"body":{"components/GraphsComponent.html":{},"coverage.html":{}}}],["src/app/graphs/graphs.component.ts:103",{"_index":624,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:120",{"_index":622,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:18",{"_index":629,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:19",{"_index":636,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:20",{"_index":637,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:21",{"_index":638,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:22",{"_index":630,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:23",{"_index":633,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:24",{"_index":628,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:25",{"_index":634,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:26",{"_index":631,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:27",{"_index":627,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:28",{"_index":626,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:29",{"_index":635,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:30",{"_index":632,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:31",{"_index":621,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:63",{"_index":623,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:83",{"_index":625,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/rainandsnow/rain",{"_index":1186,"title":{},"body":{"injectables/RainAndSnowService.html":{},"coverage.html":{}}}],["src/app/graphs/temperature/temperature.service.t",{"_index":1339,"title":{},"body":{"injectables/TemperatureService.html":{},"coverage.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:10",{"_index":1344,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:11",{"_index":1345,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:12",{"_index":1346,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:13",{"_index":1347,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:14",{"_index":1341,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:18",{"_index":1343,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/initial/initial.component.t",{"_index":666,"title":{},"body":{"components/InitialComponent.html":{},"coverage.html":{}}}],["src/app/initial/initial.component.ts:109",{"_index":697,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:119",{"_index":696,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:126",{"_index":691,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:23",{"_index":708,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:24",{"_index":702,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:25",{"_index":703,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:26",{"_index":707,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:27",{"_index":709,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:28",{"_index":701,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:29",{"_index":699,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:30",{"_index":704,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:31",{"_index":698,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:32",{"_index":705,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:34",{"_index":686,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:44",{"_index":694,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:49",{"_index":692,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:64",{"_index":693,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:91",{"_index":695,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/interceptor/interceptor.component.t",{"_index":789,"title":{},"body":{"components/InterceptorComponent.html":{},"coverage.html":{}}}],["src/app/interceptor/interceptor.component.ts:11",{"_index":797,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["src/app/interceptor/interceptor.component.ts:15",{"_index":803,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["src/app/log.service.t",{"_index":819,"title":{},"body":{"injectables/LogService.html":{},"coverage.html":{}}}],["src/app/log.service.ts:140",{"_index":845,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:171",{"_index":836,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:20",{"_index":849,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:208",{"_index":840,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:21",{"_index":856,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:22",{"_index":854,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:228",{"_index":838,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:23",{"_index":853,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:237",{"_index":847,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:25",{"_index":851,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:26",{"_index":855,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:27",{"_index":852,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:28",{"_index":833,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:37",{"_index":841,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:40",{"_index":842,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:45",{"_index":834,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:69",{"_index":848,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:81",{"_index":844,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/loggin",{"_index":952,"title":{},"body":{"components/LogginDialogComponent.html":{},"coverage.html":{}}}],["src/app/material/material.module.t",{"_index":1018,"title":{},"body":{"modules/MaterialModule.html":{}}}],["src/app/navigation/navigation.component.t",{"_index":1045,"title":{},"body":{"components/NavigationComponent.html":{},"coverage.html":{}}}],["src/app/navigation/navigation.component.ts:105",{"_index":1078,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:118",{"_index":1071,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:127",{"_index":1080,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:130",{"_index":1076,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:134",{"_index":1079,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:18",{"_index":1092,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:19",{"_index":1091,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:20",{"_index":1081,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:21",{"_index":1087,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:22",{"_index":1088,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:23",{"_index":1070,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:24",{"_index":1089,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:25",{"_index":1084,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:26",{"_index":1083,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:27",{"_index":1086,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:28",{"_index":1090,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:29",{"_index":1085,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:30",{"_index":1069,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:36",{"_index":1082,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:49",{"_index":1075,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:56",{"_index":1074,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:63",{"_index":1077,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:76",{"_index":1073,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:90",{"_index":1072,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/new",{"_index":1148,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"coverage.html":{}}}],["src/app/sav",{"_index":1201,"title":{},"body":{"injectables/SavedCitiesService.html":{},"coverage.html":{}}}],["src/app/savedcity.t",{"_index":1237,"title":{},"body":{"classes/SavedCity.html":{},"coverage.html":{}}}],["src/app/savedcity.ts:2",{"_index":1246,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:24",{"_index":1248,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:3",{"_index":1245,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:4",{"_index":1247,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:5",{"_index":1244,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:6",{"_index":1243,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:9",{"_index":1242,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/servedcity.t",{"_index":1257,"title":{},"body":{"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"coverage.html":{}}}],["src/app/servedcity.ts:2",{"_index":1262,"title":{},"body":{"classes/ServedCity.html":{}}}],["src/app/servedcity.ts:20",{"_index":1267,"title":{},"body":{"classes/ServerResponse.html":{}}}],["src/app/servedcity.ts:3",{"_index":1260,"title":{},"body":{"classes/ServedCity.html":{}}}],["src/app/servedcity.ts:4",{"_index":1259,"title":{},"body":{"classes/ServedCity.html":{}}}],["src/app/servedcity.ts:5",{"_index":1261,"title":{},"body":{"classes/ServedCity.html":{}}}],["src/app/servedcity.ts:6",{"_index":1258,"title":{},"body":{"classes/ServedCity.html":{}}}],["src/app/settings/settings.component.t",{"_index":1268,"title":{},"body":{"components/SettingsComponent.html":{},"coverage.html":{}}}],["src/app/settings/settings.component.ts:111",{"_index":1297,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:117",{"_index":1293,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:122",{"_index":1299,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:17",{"_index":1302,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:18",{"_index":1306,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:19",{"_index":1307,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:20",{"_index":1305,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:21",{"_index":1304,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:22",{"_index":1310,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:23",{"_index":1308,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:24",{"_index":1303,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:25",{"_index":1288,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:35",{"_index":1296,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:45",{"_index":1295,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:49",{"_index":1298,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:58",{"_index":1290,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:68",{"_index":1289,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:75",{"_index":1294,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:85",{"_index":1292,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:88",{"_index":1301,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:97",{"_index":1300,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/userserver.t",{"_index":210,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{},"coverage.html":{}}}],["src/app/userserver.ts:13",{"_index":1364,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:17",{"_index":1365,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:27",{"_index":212,"title":{},"body":{"classes/CitiesResponse.html":{}}}],["src/app/userserver.ts:31",{"_index":232,"title":{},"body":{"classes/CitiesResponseUnit.html":{}}}],["src/app/userserver.ts:4",{"_index":1363,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:5",{"_index":1362,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:6",{"_index":1361,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:7",{"_index":1360,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:8",{"_index":1359,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/weather.service.t",{"_index":1484,"title":{},"body":{"injectables/WeatherService.html":{},"coverage.html":{}}}],["src/app/weather.service.ts:11",{"_index":1489,"title":{},"body":{"injectables/WeatherService.html":{}}}],["src/app/weather.service.ts:17",{"_index":1493,"title":{},"body":{"injectables/WeatherService.html":{}}}],["src/app/weather.service.ts:21",{"_index":1495,"title":{},"body":{"injectables/WeatherService.html":{}}}],["src/app/weather.service.ts:26",{"_index":1491,"title":{},"body":{"injectables/WeatherService.html":{}}}],["src/app/weather.t",{"_index":1366,"title":{},"body":{"classes/Weather.html":{},"coverage.html":{}}}],["src/app/weather.ts:3",{"_index":1369,"title":{},"body":{"classes/Weather.html":{}}}],["src/app/weather.ts:4",{"_index":1370,"title":{},"body":{"classes/Weather.html":{}}}],["src/app/weather.ts:5",{"_index":1368,"title":{},"body":{"classes/Weather.html":{}}}],["src/app/weather.ts:6",{"_index":1367,"title":{},"body":{"classes/Weather.html":{}}}],["src/app/weathernow.t",{"_index":1371,"title":{},"body":{"classes/WeatherNow.html":{},"coverage.html":{}}}],["src/app/weathernow.ts:102",{"_index":1397,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:14",{"_index":1378,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:15",{"_index":1384,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:16",{"_index":1391,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:17",{"_index":1379,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:174",{"_index":1395,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:18",{"_index":1386,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:19",{"_index":1388,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:20",{"_index":1382,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:21",{"_index":1389,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:22",{"_index":1383,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:23",{"_index":1385,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:24",{"_index":1380,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:28",{"_index":1387,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:29",{"_index":1377,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:35",{"_index":1399,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:6",{"_index":1381,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:7",{"_index":1390,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/environments/environment.prod.t",{"_index":1520,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.t",{"_index":1522,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test.t",{"_index":1523,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":1552,"title":{"index.html":{}},"body":{}}],["statement",{"_index":1506,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1170,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["storag",{"_index":443,"title":{},"body":{"components/CityComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["store",{"_index":340,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/InitialComponent.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/WeatherNow.html":{},"index.html":{}}}],["string",{"_index":112,"title":{},"body":{"components/AppComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["styleurl",{"_index":14,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["subject",{"_index":594,"title":{},"body":{"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["submit",{"_index":964,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["submitdelet",{"_index":1285,"title":{},"body":{"components/SettingsComponent.html":{}}}],["submitpassword",{"_index":1286,"title":{},"body":{"components/SettingsComponent.html":{}}}],["subscrib",{"_index":299,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{}}}],["subscribe(r",{"_index":887,"title":{},"body":{"injectables/LogService.html":{}}}],["subscribe(respons",{"_index":892,"title":{},"body":{"injectables/LogService.html":{}}}],["subscribe(rx",{"_index":944,"title":{},"body":{"injectables/LogService.html":{}}}],["subscript",{"_index":57,"title":{},"body":{"components/AboutComponent.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["successfulli",{"_index":932,"title":{},"body":{"injectables/LogService.html":{}}}],["suggest",{"_index":48,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{}}}],["sunris",{"_index":1401,"title":{},"body":{"classes/WeatherNow.html":{}}}],["sunset",{"_index":1402,"title":{},"body":{"classes/WeatherNow.html":{}}}],["support",{"_index":1585,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":1146,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["surnam",{"_index":928,"title":{},"body":{"injectables/LogService.html":{}}}],["surpridingli",{"_index":1222,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["svg",{"_index":1586,"title":{},"body":{"modules.html":{}}}],["sy",{"_index":1239,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["tabl",{"_index":414,"title":{},"body":{"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":1525,"title":{},"body":{"coverage.html":{}}}],["tell",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["temp",{"_index":514,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["temp_kf",{"_index":515,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["temp_max",{"_index":516,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["temp_min",{"_index":517,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["temperatur",{"_index":613,"title":{},"body":{"components/GraphsComponent.html":{},"injectables/TemperatureService.html":{},"classes/WeatherNow.html":{}}}],["temperature/temperature.servic",{"_index":639,"title":{},"body":{"components/GraphsComponent.html":{}}}],["temperaturechart",{"_index":611,"title":{},"body":{"components/GraphsComponent.html":{}}}],["temperaturecolor",{"_index":612,"title":{},"body":{"components/GraphsComponent.html":{}}}],["temperatureservic",{"_index":619,"title":{"injectables/TemperatureService.html":{}},"body":{"components/GraphsComponent.html":{},"injectables/TemperatureService.html":{},"coverage.html":{}}}],["temperaturesmax",{"_index":614,"title":{},"body":{"components/GraphsComponent.html":{},"injectables/TemperatureService.html":{}}}],["temperaturesmin",{"_index":615,"title":{},"body":{"components/GraphsComponent.html":{},"injectables/TemperatureService.html":{}}}],["templat",{"_index":4,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["templateurl",{"_index":16,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["test",{"_index":1574,"title":{},"body":{"index.html":{}}}],["text",{"_index":1396,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.admin",{"_index":764,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.author",{"_index":294,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.aux",{"_index":1480,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.bas",{"_index":1409,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.builddeleteform",{"_index":1314,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.buildpsswdform",{"_index":1313,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.changepassword(this.formpassword.value.password",{"_index":1324,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.chart",{"_index":476,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["this.checkandsave('bas",{"_index":1444,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('cloud",{"_index":1463,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('cod",{"_index":1479,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('descript",{"_index":1442,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('dt",{"_index":1471,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('humid",{"_index":1449,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('icon",{"_index":1443,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('id",{"_index":1440,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('latitud",{"_index":1438,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('longitud",{"_index":1437,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('main",{"_index":1441,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('maximum",{"_index":1453,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('minimum",{"_index":1451,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('nam",{"_index":1478,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('pressur",{"_index":1447,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('rain",{"_index":1465,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('si",{"_index":1472,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('snow",{"_index":1470,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('temperatur",{"_index":1445,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('wind",{"_index":1460,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkerror",{"_index":991,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.citi",{"_index":600,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["this.cities.find(c",{"_index":1225,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["this.cities.push(citytosav",{"_index":1228,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["this.cities.push(this.c",{"_index":1218,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["this.citiesid",{"_index":226,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["this.citieslist",{"_index":714,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citieslist.filter(el",{"_index":752,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citieslist.push(new",{"_index":718,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citiesserver.log",{"_index":759,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citiesserver.searchbyname(this.c",{"_index":755,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citiesserver.upload(>this.citieslist",{"_index":761,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citiesserverservice.loadfavourites(citieslist.split",{"_index":896,"title":{},"body":{"injectables/LogService.html":{}}}],["this.citiesserverservice.upload(this.currentuser.citieslist",{"_index":867,"title":{},"body":{"injectables/LogService.html":{}}}],["this.citiessubscription.unsubscrib",{"_index":1103,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.city.length",{"_index":734,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citymatch",{"_index":741,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.cityshown",{"_index":402,"title":{},"body":{"components/CityComponent.html":{}}}],["this.cityshown.coord",{"_index":428,"title":{},"body":{"components/CityComponent.html":{}}}],["this.cityshown.countri",{"_index":426,"title":{},"body":{"components/CityComponent.html":{}}}],["this.closesess",{"_index":940,"title":{},"body":{"injectables/LogService.html":{}}}],["this.cloud",{"_index":469,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.cloudcolor",{"_index":657,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.clouds.al",{"_index":1464,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.cloudsandwind",{"_index":651,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.cloudsandwindchart",{"_index":650,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.cloudsandwindservice.getcloudsandwindchart(this.forecastvalu",{"_index":664,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.cod",{"_index":1434,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.complexsearch(nam",{"_index":309,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.complexsearchid(c",{"_index":339,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.complexsearchid(parseint(c",{"_index":344,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.contenttyp",{"_index":293,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.coord",{"_index":1252,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["this.coord.lat",{"_index":1255,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["this.coord.lon",{"_index":1256,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["this.countri",{"_index":1263,"title":{},"body":{"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["this.currentus",{"_index":861,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["this.currentuser.citiesid",{"_index":901,"title":{},"body":{"injectables/LogService.html":{}}}],["this.currentuser.citieslist",{"_index":865,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["this.currentuser.favouritec",{"_index":870,"title":{},"body":{"injectables/LogService.html":{}}}],["this.currentuser.password",{"_index":900,"title":{},"body":{"injectables/LogService.html":{}}}],["this.currentuser.setfromlist(this.savedcitiesservice.getsavedc",{"_index":863,"title":{},"body":{"injectables/LogService.html":{}}}],["this.currentuser.usernam",{"_index":899,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["this.dat",{"_index":474,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["this.datasourc",{"_index":415,"title":{},"body":{"components/CityComponent.html":{}}}],["this.deleteaccount",{"_index":1330,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.deleteaccount1",{"_index":1331,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.deletebody(user.usernam",{"_index":939,"title":{},"body":{"injectables/LogService.html":{}}}],["this.deletec",{"_index":1124,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.dialog.open(loggindialogcompon",{"_index":1127,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.dialogref",{"_index":1126,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.dialogref.afterclosed().subscribe(data",{"_index":1128,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.dialogref.clos",{"_index":1005,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.dialogref.close(this.form.valu",{"_index":993,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.dt",{"_index":525,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.dt_txt",{"_index":527,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["this.emptylist",{"_index":1117,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.favouritec",{"_index":228,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["this.forecast",{"_index":418,"title":{},"body":{"components/CityComponent.html":{}}}],["this.forecast.push(new",{"_index":420,"title":{},"body":{"components/CityComponent.html":{}}}],["this.forecastvalu",{"_index":598,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{}}}],["this.forecastvalues.push(new",{"_index":653,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.forecastvaluesservice.getvalu",{"_index":659,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.forecastvaluesservice.setcity(this.cityshown",{"_index":425,"title":{},"body":{"components/CityComponent.html":{}}}],["this.forecastvaluesservice.setvalues(this.forecast",{"_index":424,"title":{},"body":{"components/CityComponent.html":{}}}],["this.forecastvaluesservice.setvalues(this.forecastvalu",{"_index":654,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.form",{"_index":985,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["this.form.valid",{"_index":992,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["this.form.value.password",{"_index":1166,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["this.formbuilder.group",{"_index":1161,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["this.formdelet",{"_index":1319,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.formdelete.valid",{"_index":1325,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.formdelete.value.password",{"_index":1327,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.formpassword",{"_index":1317,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.formpassword.valid",{"_index":1323,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.found",{"_index":745,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.foundc",{"_index":751,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.getc",{"_index":754,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["this.getcityweath",{"_index":399,"title":{},"body":{"components/CityComponent.html":{}}}],["this.getlog",{"_index":1098,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.getsavedc",{"_index":1234,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["this.goodcommonurl}/users/us",{"_index":943,"title":{},"body":{"injectables/LogService.html":{}}}],["this.http.get(this.weatherurl",{"_index":1499,"title":{},"body":{"injectables/WeatherService.html":{}}}],["this.http.get>(this.citieslisturl).subscribe(rx",{"_index":715,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.http.post(`${this.goodcommonurl}/fav/queri",{"_index":891,"title":{},"body":{"injectables/LogService.html":{}}}],["this.http.post(`${this.goodcommonurl}/users/updatepassword",{"_index":950,"title":{},"body":{"injectables/LogService.html":{}}}],["this.http.post(`${this.goodcommonurl}/users/us",{"_index":926,"title":{},"body":{"injectables/LogService.html":{}}}],["this.http.post(this.commonurl",{"_index":296,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.http.post(this.goodcommonurl",{"_index":874,"title":{},"body":{"injectables/LogService.html":{}}}],["this.http.request(new",{"_index":941,"title":{},"body":{"injectables/LogService.html":{}}}],["this.id",{"_index":1250,"title":{},"body":{"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{}}}],["this.islog",{"_index":1312,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.keyadmin",{"_index":770,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.keyadmin.substr",{"_index":772,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.lat",{"_index":1265,"title":{},"body":{"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["this.launchform",{"_index":1160,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["this.load",{"_index":736,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.log",{"_index":1110,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.log.currentus",{"_index":1315,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.log.deleteuser(this.currentus",{"_index":1328,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.log.getupdates().subscribe(log",{"_index":1321,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.log.login(usernam",{"_index":1326,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.log.updatepassword(passwd",{"_index":1322,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.login(username,password",{"_index":934,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logservice.closesess",{"_index":1123,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logservice.createuser(this.form.value.usernam",{"_index":1165,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["this.logservice.currentuser.username.replace(/['\"]+/g",{"_index":1112,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logservice.getupdates().subscribe(log",{"_index":1109,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logservice.login(data.usernam",{"_index":1132,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logservice.logrefresh",{"_index":1107,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logsubscript",{"_index":1108,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["this.logsubscription.unsubscrib",{"_index":1104,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["this.lon",{"_index":1264,"title":{},"body":{"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["this.main",{"_index":529,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.main.grnd_level",{"_index":1459,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.humid",{"_index":1450,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.pressur",{"_index":1448,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.sea_level",{"_index":1457,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.temp",{"_index":1446,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.temp_max",{"_index":1454,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.temp_min",{"_index":1452,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.maxlengtherror",{"_index":995,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.minlengtherror",{"_index":994,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.nam",{"_index":1249,"title":{},"body":{"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{}}}],["this.notempti",{"_index":1116,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.open",{"_index":1120,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.password",{"_index":223,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["this.passwordrequirederror",{"_index":996,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.profil",{"_index":1105,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.profile.replace(/['\"]+/g",{"_index":1106,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.pwd",{"_index":1329,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.rain",{"_index":553,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.rainandsnow",{"_index":649,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.rainandsnowchart",{"_index":648,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.rainandsnowservice.getrainandsnowchart(this.forecastvalu",{"_index":663,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.raincolor",{"_index":658,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.relog",{"_index":1097,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.result",{"_index":1436,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.result.push(this.aux",{"_index":1481,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.route.params.subscribe((valu",{"_index":397,"title":{},"body":{"components/CityComponent.html":{}}}],["this.route.snapshot.parammap.get('id",{"_index":400,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["this.route.snapshot.parammap.get('nam",{"_index":401,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["this.router.navigate(['/initi",{"_index":946,"title":{},"body":{"injectables/LogService.html":{}}}],["this.router.navigate(['initi",{"_index":1316,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.router.navigate(['us",{"_index":1006,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.routesubscription.unsubscrib",{"_index":1102,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.rx",{"_index":405,"title":{},"body":{"components/CityComponent.html":{}}}],["this.rxciti",{"_index":740,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.rxcity.id",{"_index":743,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.rxcity.sys.countri",{"_index":744,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.savedc",{"_index":1114,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.savedcities.length",{"_index":1113,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.savedcitiesservice.deletec",{"_index":871,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["this.savedcitiesservice.getsavedc",{"_index":866,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["this.savedcitiesservice.save(new",{"_index":346,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.savedcitiesservice.save(this.cityshown",{"_index":430,"title":{},"body":{"components/CityComponent.html":{}}}],["this.setcurrentus",{"_index":1311,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.si",{"_index":1251,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["this.snackbar.open",{"_index":910,"title":{},"body":{"injectables/LogService.html":{}}}],["this.snackbar.open(\"favourit",{"_index":1121,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.snackbar.open(\"log",{"_index":905,"title":{},"body":{"injectables/LogService.html":{}}}],["this.snackbar.open(`${this.cityshown.nam",{"_index":431,"title":{},"body":{"components/CityComponent.html":{}}}],["this.snow",{"_index":557,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.sys.countri",{"_index":1254,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["this.sys.id",{"_index":1474,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.sys.messag",{"_index":1475,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.sys.sunris",{"_index":1476,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.sys.sunset",{"_index":1477,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.sys.typ",{"_index":1473,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.temperatur",{"_index":647,"title":{},"body":{"components/GraphsComponent.html":{},"injectables/TemperatureService.html":{}}}],["this.temperaturechart",{"_index":646,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.temperaturecolor",{"_index":655,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.temperatureservice.gettemperaturechart(this.forecastvalu",{"_index":660,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.temperaturesmax",{"_index":1351,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["this.temperaturesmin",{"_index":1353,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["this.toggleadmin",{"_index":774,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.updated.asobserv",{"_index":597,"title":{},"body":{"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["this.updated.next(fals",{"_index":862,"title":{},"body":{"injectables/LogService.html":{}}}],["this.updated.next(this.c",{"_index":1214,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["this.updated.next(this.forecastvalu",{"_index":599,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["this.updated.next(tru",{"_index":903,"title":{},"body":{"injectables/LogService.html":{}}}],["this.updatesettings(\"c",{"_index":869,"title":{},"body":{"injectables/LogService.html":{}}}],["this.updateuserc",{"_index":868,"title":{},"body":{"injectables/LogService.html":{}}}],["this.usernam",{"_index":221,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["this.usernamerequirederror",{"_index":997,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.valuesdisplay",{"_index":410,"title":{},"body":{"components/CityComponent.html":{}}}],["this.wasfound",{"_index":738,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.weath",{"_index":523,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.weather.foreach(w",{"_index":1439,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.weather.push(w",{"_index":548,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["this.weather.push(wthr",{"_index":1408,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.weathernow",{"_index":408,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weathernow.coord",{"_index":429,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weathernow.displayvalu",{"_index":411,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weathernow.set(rx",{"_index":409,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weathernow.sys.countri",{"_index":427,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weatherservice.getforecast(id).subscribe((rx",{"_index":652,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.weatherservice.getforecast(this.cityshown.id).subscribe((rx",{"_index":417,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weatherservice.getweather(this.cityshown.id).subscribe(rx",{"_index":404,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weatherservice.getweatherbycityname(this.city).subscribe(rx",{"_index":739,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.weatherurl",{"_index":1497,"title":{},"body":{"injectables/WeatherService.html":{}}}],["this.wind",{"_index":472,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.wind.deg",{"_index":1462,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.wind.spe",{"_index":1461,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.yousurebutton",{"_index":1119,"title":{},"body":{"components/NavigationComponent.html":{}}}],["through",{"_index":438,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{}}}],["tick",{"_index":494,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["titl",{"_index":111,"title":{},"body":{"components/AppComponent.html":{}}}],["toggleadmin",{"_index":679,"title":{},"body":{"components/InitialComponent.html":{}}}],["togglefavourit",{"_index":1064,"title":{},"body":{"components/NavigationComponent.html":{}}}],["togglesess",{"_index":1065,"title":{},"body":{"components/NavigationComponent.html":{}}}],["token",{"_index":888,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["train",{"_index":70,"title":{},"body":{"components/AboutComponent.html":{}}}],["transfer",{"_index":505,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["tri",{"_index":879,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["trigger",{"_index":766,"title":{},"body":{"components/InitialComponent.html":{}}}],["true",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"miscellaneous/variables.html":{}}}],["two",{"_index":778,"title":{},"body":{"components/InitialComponent.html":{}}}],["type",{"_index":113,"title":{},"body":{"components/AppComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["undefin",{"_index":287,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{}}}],["unit",{"_index":1573,"title":{},"body":{"index.html":{}}}],["unsubscrib",{"_index":1099,"title":{},"body":{"components/NavigationComponent.html":{}}}],["up",{"_index":1008,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["updat",{"_index":422,"title":{},"body":{"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["updatepassword",{"_index":829,"title":{},"body":{"injectables/LogService.html":{}}}],["updatepassword(password",{"_index":846,"title":{},"body":{"injectables/LogService.html":{}}}],["updateuserc",{"_index":830,"title":{},"body":{"injectables/LogService.html":{}}}],["upload",{"_index":246,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{}}}],["upload(citieslist",{"_index":268,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["uploadal",{"_index":680,"title":{},"body":{"components/InitialComponent.html":{}}}],["uppercas",{"_index":781,"title":{},"body":{"components/InitialComponent.html":{}}}],["url",{"_index":208,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{}}}],["us",{"_index":39,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"index.html":{}}}],["useclass",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":198,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/CitiesServerService.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["user'",{"_index":880,"title":{},"body":{"injectables/LogService.html":{}}}],["user'},{'nam",{"_index":100,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["user.compon",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/SettingsComponent.html":{}}}],["user.component.css",{"_index":1150,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["user.component.html",{"_index":1151,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["user.component.t",{"_index":1149,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"coverage.html":{}}}],["user.component.ts:15",{"_index":1158,"title":{},"body":{"components/NewUserComponent.html":{}}}],["user.component.ts:16",{"_index":1154,"title":{},"body":{"components/NewUserComponent.html":{}}}],["user.component.ts:24",{"_index":1156,"title":{},"body":{"components/NewUserComponent.html":{}}}],["user.component.ts:29",{"_index":1155,"title":{},"body":{"components/NewUserComponent.html":{}}}],["user.component.ts:39",{"_index":1157,"title":{},"body":{"components/NewUserComponent.html":{}}}],["user.component.ts:52",{"_index":1184,"title":{},"body":{"classes/PasswordValidation.html":{}}}],["user/new",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"coverage.html":{}}}],["user_",{"_index":927,"title":{},"body":{"injectables/LogService.html":{}}}],["usernam",{"_index":215,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"classes/UserServer.html":{}}}],["usernamerequirederror",{"_index":961,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["users/login",{"_index":886,"title":{},"body":{"injectables/LogService.html":{}}}],["userserv",{"_index":214,"title":{"classes/UserServer.html":{}},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/LogService.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"classes/UserServer.html":{},"coverage.html":{}}}],["ussernam",{"_index":1016,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["util",{"_index":776,"title":{},"body":{"components/InitialComponent.html":{},"injectables/LogService.html":{}}}],["vaku",{"_index":500,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["valid",{"_index":982,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["validatepassword(this.form",{"_index":1183,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["validators.compose([validators.minlength(5",{"_index":1162,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["validators.maxlength(20",{"_index":988,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["validators.maxlength(25",{"_index":1163,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["validators.minlength(4",{"_index":987,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["validators.requir",{"_index":989,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["valu",{"_index":115,"title":{},"body":{"components/AppComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"miscellaneous/variables.html":{}}}],["values.servic",{"_index":388,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["values.service.t",{"_index":576,"title":{},"body":{"injectables/ForecastValuesService.html":{},"coverage.html":{}}}],["values.service.ts:11",{"_index":593,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:12",{"_index":595,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:13",{"_index":592,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:15",{"_index":585,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:19",{"_index":591,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:24",{"_index":587,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:28",{"_index":589,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:32",{"_index":584,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:34",{"_index":583,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["valuesdisplay",{"_index":363,"title":{},"body":{"components/CityComponent.html":{}}}],["valuetim",{"_index":1276,"title":{},"body":{"components/SettingsComponent.html":{}}}],["var",{"_index":79,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["variabl",{"_index":1393,"title":{"miscellaneous/variables.html":{}},"body":{"classes/WeatherNow.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":1555,"title":{},"body":{"index.html":{}}}],["via",{"_index":1576,"title":{},"body":{"index.html":{}}}],["view",{"_index":36,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["void",{"_index":27,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{}}}],["volum",{"_index":1466,"title":{},"body":{"classes/WeatherNow.html":{}}}],["válido",{"_index":328,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["w",{"_index":539,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["w.descript",{"_index":546,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["w.icon",{"_index":544,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["w.id",{"_index":542,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["w.main",{"_index":540,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["want",{"_index":1333,"title":{},"body":{"components/SettingsComponent.html":{}}}],["wasfound",{"_index":677,"title":{},"body":{"components/InitialComponent.html":{}}}],["weather",{"_index":51,"title":{"classes/Weather.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"coverage.html":{}}}],["weather.descript",{"_index":547,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["weather.icon",{"_index":545,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["weather.id",{"_index":543,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["weather.main",{"_index":541,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["weather.servic",{"_index":387,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{}}}],["weatherangular",{"_index":1553,"title":{},"body":{"index.html":{}}}],["weathernow",{"_index":364,"title":{"classes/WeatherNow.html":{}},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"classes/WeatherNow.html":{},"coverage.html":{}}}],["weatherservic",{"_index":370,"title":{"injectables/WeatherService.html":{}},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"injectables/WeatherService.html":{},"coverage.html":{}}}],["weatherurl",{"_index":1485,"title":{},"body":{"injectables/WeatherService.html":{}}}],["web",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["went",{"_index":938,"title":{},"body":{"injectables/LogService.html":{}}}],["wind",{"_index":458,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["wind.servic",{"_index":643,"title":{},"body":{"components/GraphsComponent.html":{}}}],["wind.service.t",{"_index":454,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"coverage.html":{}}}],["wind.service.ts:10",{"_index":463,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["wind.service.ts:11",{"_index":466,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["wind.service.ts:12",{"_index":464,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["wind.service.ts:13",{"_index":465,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["wind.service.ts:15",{"_index":462,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["wind.service.ts:86",{"_index":460,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["window:keyup",{"_index":683,"title":{},"body":{"components/InitialComponent.html":{}}}],["window:keyup(ev",{"_index":689,"title":{},"body":{"components/InitialComponent.html":{}}}],["without",{"_index":312,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["work",{"_index":817,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["worker",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["worker.j",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["written",{"_index":767,"title":{},"body":{"components/InitialComponent.html":{}}}],["wrong",{"_index":911,"title":{},"body":{"injectables/LogService.html":{}}}],["wthr",{"_index":1407,"title":{},"body":{"classes/WeatherNow.html":{}}}],["xax",{"_index":492,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["yax",{"_index":493,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["yaxisid",{"_index":487,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["ye",{"_index":1147,"title":{},"body":{"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{}}}],["yor",{"_index":1145,"title":{},"body":{"components/NavigationComponent.html":{}}}],["yousur",{"_index":1066,"title":{},"body":{"components/NavigationComponent.html":{}}}],["yousurebutton",{"_index":1058,"title":{},"body":{"components/NavigationComponent.html":{}}}],["zone.j",{"_index":1550,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AboutComponent.html":{"url":"components/AboutComponent.html","title":"component - AboutComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AboutComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/about/about.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-about\n            \n\n            \n                styleUrls\n                about.component.css\n            \n\n\n\n            \n                templateUrl\n                ./about.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/about/about.component.ts:8\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/about/about.component.ts:12\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css']\n})\nexport class AboutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n    const body = document.getElementsByTagName(\"body\");\n    body[0].classList.add(\"initial-view\");\n  }\n\n}\n\n    \n\n    \n        \n  \n    This application has been developed using\n    Angular as the framework to create the client and\n    Ontimize EE to provide session and suggested cities service.\n  \n  \n  \n    The weather data is obtained from the API of\n    OpenWeatherMap in a free subscription limited to 60 queries per minute.\n  \n  \n  \n    Every images and icons have been obtained from free sources and this project generates no economical proffits. The purpose\n    of this app was training me as a developer during a internship in\n    Imatia Innovation.\n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      This application has been developed using    Angular as the framework to create the client and    Ontimize EE to provide session and suggested cities service.          The weather data is obtained from the API of    OpenWeatherMap in a free subscription limited to 60 queries per minute.          Every images and icons have been obtained from free sources and this project generates no economical proffits. The purpose    of this app was training me as a developer during a internship in    Imatia Innovation.  '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AboutComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                app.component.css\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        title:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Weather-Angular'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Weather-Angular';\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n  Modules\n  AppModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAboutComponent\n\nAboutComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAboutComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nCityComponent\n\nCityComponent\n\nAppModule -->\n\nCityComponent->AppModule\n\n\n\n\n\nGraphsComponent\n\nGraphsComponent\n\nAppModule -->\n\nGraphsComponent->AppModule\n\n\n\n\n\nInitialComponent\n\nInitialComponent\n\nAppModule -->\n\nInitialComponent->AppModule\n\n\n\n\n\nInterceptorComponent\n\nInterceptorComponent\n\nAppModule -->\n\nInterceptorComponent->AppModule\n\n\n\n\n\nLogginDialogComponent\n\nLogginDialogComponent\n\nAppModule -->\n\nLogginDialogComponent->AppModule\n\n\n\n\n\nNavigationComponent\n\nNavigationComponent\n\nAppModule -->\n\nNavigationComponent->AppModule\n\n\n\n\n\nNewUserComponent\n\nNewUserComponent\n\nAppModule -->\n\nNewUserComponent->AppModule\n\n\n\n\n\nSettingsComponent\n\nSettingsComponent\n\nAppModule -->\n\nSettingsComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                AboutComponent\n                            \n                            \n                                AppComponent\n                            \n                            \n                                CityComponent\n                            \n                            \n                                GraphsComponent\n                            \n                            \n                                InitialComponent\n                            \n                            \n                                InterceptorComponent\n                            \n                            \n                                LogginDialogComponent\n                            \n                            \n                                NavigationComponent\n                            \n                            \n                                NewUserComponent\n                            \n                            \n                                SettingsComponent\n                            \n                    \n                \n                \n                    EntryComponents\n                    \n                            \n                                LogginDialogComponent\n                            \n                    \n                \n                \n                    Imports\n                    \n                            \n                                    AppRoutingModule\n                            \n                            \n                                    MaterialModule\n                            \n                    \n                \n                \n                    Bootstrap\n                    \n                            \n                                AppComponent\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { InitialComponent } from './initial/initial.component';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './/app-routing.module';\nimport { CityComponent } from './city/city.component';\nimport { NavigationComponent } from './navigation/navigation.component';\n\nimport { MaterialModule } from './material/material.module';\nimport { GraphsComponent } from './graphs/graphs.component';\n\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\nimport { LogginDialogComponent } from './loggin-dialog/loggin-dialog.component';\nimport { MatDialogModule, MatSnackBarModule } from '@angular/material';\nimport { ReactiveFormsModule} from '@angular/forms';\nimport { NewUserComponent } from './new-user/new-user.component';\nimport { SettingsComponent } from './settings/settings.component';\nimport { AboutComponent } from './about/about.component';\nimport { InterceptorComponent } from './interceptor/interceptor.component';\nimport {HTTP_INTERCEPTORS} from '@angular/common/http';\n\n\n\n@NgModule({ //Tells how to compile and launch the application\n  declarations: [\n    AppComponent,\n    InitialComponent,\n    CityComponent,\n    NavigationComponent,\n    GraphsComponent,\n    LogginDialogComponent,\n    NewUserComponent,\n    SettingsComponent,\n    AboutComponent,\n    InterceptorComponent,\n  ],\n  imports: [\n    BrowserModule,\n    MaterialModule,\n    FormsModule,\n    HttpClientModule,\n    AppRoutingModule,\n    ServiceWorkerModule.register('/ngsw-worker.js', { enabled: environment.production }),\n    MatDialogModule,\n    ReactiveFormsModule,\n    MatSnackBarModule\n  ],\n  providers: [{\n    provide: HTTP_INTERCEPTORS,\n    useClass: InterceptorComponent,\n    multi: true,\n  }],\n  bootstrap: [AppComponent], //root component that Angular inserts into the index.html host web page\n  entryComponents: [LogginDialogComponent]\n})\nexport class AppModule { }\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n  Modules\n  AppRoutingModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n        \n\n        \n            \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { InitialComponent } from './initial/initial.component';\nimport { CityComponent } from './city/city.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatButtonModule, MatCheckboxModule } from '@angular/material';\nimport { GraphsComponent } from './graphs/graphs.component';\nimport { NewUserComponent } from './new-user/new-user.component';\nimport { SettingsComponent } from './settings/settings.component';\nimport { AboutComponent } from './about/about.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/initial', pathMatch: 'full' },\n  { path: 'initial', component: InitialComponent },\n  { path: 'city/:id/:name', component: CityComponent },\n  { path: 'graph', component: GraphsComponent },\n  { path: 'user', component: NewUserComponent },\n  { path: 'settings', component: SettingsComponent },\n  { path: 'about', component: AboutComponent },\n  { path: 'graphs/:id/:name', component: GraphsComponent }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes),\n    BrowserAnimationsModule,\n    MatButtonModule,\n    MatCheckboxModule\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n/*\nThis is the routing module. It is responsible for the navigation across the different components, redirecting the application to the right one for each URL.\n*/\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CitiesResponse.html":{"url":"classes/CitiesResponse.html","title":"class - CitiesResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  CitiesResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/userServer.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        data:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SavedCity } from \"./savedCity\";\n\nexport class UserServer {\n    username : string;\n    password : string;\n    favouriteCities : string;\n    citiesId : Array;\n    citiesList : Array;\n\n    constructor(){}\n    \n\n    display(): string{\n        return \"Username: \" + this.username + \"\\nPassword: \" + this.password + \"\\nCities ids: \" + this.citiesId;\n    }\n\n    setFromList(list : Array){\n        this.favouriteCities = list.map(item => item.id).join(',');\n    }\n}\n\n\n\n\n//New\nexport class CitiesResponse {\n    data : Array;\n}\n\nexport class CitiesResponseUnit {\n    CITIES : string;\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CitiesResponseUnit.html":{"url":"classes/CitiesResponseUnit.html","title":"class - CitiesResponseUnit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  CitiesResponseUnit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/userServer.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                CITIES\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CITIES\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        CITIES:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:31\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SavedCity } from \"./savedCity\";\n\nexport class UserServer {\n    username : string;\n    password : string;\n    favouriteCities : string;\n    citiesId : Array;\n    citiesList : Array;\n\n    constructor(){}\n    \n\n    display(): string{\n        return \"Username: \" + this.username + \"\\nPassword: \" + this.password + \"\\nCities ids: \" + this.citiesId;\n    }\n\n    setFromList(list : Array){\n        this.favouriteCities = list.map(item => item.id).join(',');\n    }\n}\n\n\n\n\n//New\nexport class CitiesResponse {\n    data : Array;\n}\n\nexport class CitiesResponseUnit {\n    CITIES : string;\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CitiesServerService.html":{"url":"injectables/CitiesServerService.html","title":"injectable - CitiesServerService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  CitiesServerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/cities-server.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization\n                            \n                            \n                                citiesList\n                            \n                            \n                                commonUrl\n                            \n                            \n                                contentType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                complexSearch\n                            \n                            \n                                complexSearchId\n                            \n                            \n                                loadFavourites\n                            \n                            \n                                log\n                            \n                            \n                                searchById\n                            \n                            \n                                searchByName\n                            \n                            \n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, savedCitiesService: SavedCitiesService)\n                    \n                \n                        \n                            \n                                Defined in src/app/cities-server.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        savedCitiesService\n                                                  \n                                                        \n                                                                    SavedCitiesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            complexSearch\n                            \n                            \n                        \n                    \n                \n                \n                    \ncomplexSearch(value: string, param: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:89\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        param\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            complexSearchId\n                            \n                            \n                        \n                    \n                \n                \n                    \ncomplexSearchId(value: number, param: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:107\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        param\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadFavourites\n                            \n                            \n                        \n                    \n                \n                \n                    \nloadFavourites(cities: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:146\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cities\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            log\n                            \n                            \n                        \n                    \n                \n                \n                    \nlog()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:84\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            searchById\n                            \n                            \n                        \n                    \n                \n                \n                    \nsearchById(city: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:125\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        city\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     SavedCity\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            searchByName\n                            \n                            \n                        \n                    \n                \n                \n                    \nsearchByName(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:53\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            upload\n                            \n                            \n                        \n                    \n                \n                \n                    \nupload(citiesList: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:26\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        citiesList\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            authorization\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        authorization:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGlvbi10aW1lIjoxNTI4OTU2OTY0MTE2LCJ1c2VybmFtZSI6ImRlbW8ifQ.xKAhjdQ9yEy2AuS8Dp3qtoBmEFL0wAclsK4LRmKZ9nE'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesList:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            commonUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        commonUrl:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"http://localhost:8080/citiesservice-server/services/rest/cities/city\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contentType\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contentType:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'application/json'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:18\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { SavedCity } from './savedCity';\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { ServerResponse, ServedCity } from './servedCity'\nimport { SavedCitiesService } from './saved-cities.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CitiesServerService {\n\n  citiesList: Array;\n\n  commonUrl = \"http://localhost:8080/citiesservice-server/services/rest/cities/city\";\n  contentType = 'application/json';\n  authorization = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGlvbi10aW1lIjoxNTI4OTU2OTY0MTE2LCJ1c2VybmFtZSI6ImRlbW8ifQ.xKAhjdQ9yEy2AuS8Dp3qtoBmEFL0wAclsK4LRmKZ9nE';\n\n  constructor(\n    private http: HttpClient,\n    private savedCitiesService: SavedCitiesService\n  ) { }\n\n  upload(citiesList: Array): Boolean {\n    //Used to fill in the database\n    if (citiesList === undefined) {\n      return false;\n    }\n\n    let ok = true;\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': this.contentType,\n        'Authorization': this.authorization\n      })\n    };\n    citiesList.forEach(city => {\n      this.http.post(this.commonUrl, city.insertBody(), httpOptions).subscribe(rx => {\n        //We subscribe for the insert results\n        console.log(\"Upload request results\");\n        console.log(rx);\n      },\n        error => {\n          console.log(\"Tried to upload an existing city: \" + city.name);\n          ok = false;\n        });\n    });\n    return ok;\n  }\n\n  searchByName(name: string): Array {\n    const ans = new Array();\n\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': this.contentType,\n        'Authorization': this.authorization\n      })\n    };\n\n\n    this.http.post(this.commonUrl + \"/search\", this.complexSearch(name, \"NAME\"), httpOptions).subscribe(rx => {\n      //We subscribe for the search results\n      if (rx.data.length === undefined) {\n        console.log(\"Query without results\");\n        return ans;\n      }\n      rx.data.forEach(item => {\n        ans.push(\n          new SavedCity(item.NAME, item.ID.toString(), item.COUNTRY, item.LON, item.LAT)\n        );\n      }, error => {\n        console.log(\"Query to city dataBase failed\");\n      });\n    },\n    );\n\n\n    return ans;\n  }\n\n  log(): Boolean {\n    console.log(\"LOG\");\n    return true;\n  }\n\n  complexSearch(value: string, param: string): string {\n    //primero comprobamos que el parámetro es válido\n    if (param !== \"NAME\" && param !== \"ID\" && param !== \"COUNTRY\" && param !== \"LAT\" && param !== \"LON\") {\n      param = \"NAME\";\n    }\n\n    return `{\n      \"filter\": {\n        \"@basic_expression\":{\n          \"lop\" : \"` + param + `\",\n          \"op\" : \"LIKE\",\n          \"rop\" : \"%` + value + `%\"\n        }\n      },\n      \"columns\":[ \"ID\",\"COUNTRY\",\"LAT\",\"LON\",\"NAME\"]\n     }`;\n  }\n\n  complexSearchId(value: number, param: string): string {\n    //primero comprobamos que el parámetro es válido\n    if (param !== \"NAME\" && param !== \"ID\" && param !== \"COUNTRY\" && param !== \"LAT\" && param !== \"LON\") {\n      param = \"NAME\";\n    }\n\n    return `{\n      \"filter\": {\n        \"@basic_expression\":{\n          \"lop\" : \"` + param + `\",\n          \"op\" : \"=\",\n          \"rop\" : ` + value + `\n        }\n      },\n      \"columns\":[ \"ID\",\"COUNTRY\",\"LAT\",\"LON\",\"NAME\"]\n     }`;\n  }\n\n  searchById(city: number): SavedCity {\n    let ans: SavedCity;\n\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': this.contentType,\n        'Authorization': this.authorization\n      })\n    };\n\n    this.http.post(this.commonUrl + \"/search\", this.complexSearchId(city, \"ID\"), httpOptions).subscribe(rx => {\n      //We subscribe for the search results\n      console.log(rx);\n      rx.data.forEach(item => {\n        ans = new SavedCity(item.NAME, item.ID.toString(), item.COUNTRY, item.LON, item.LAT);\n      });\n    });\n\n    return ans;\n  }\n\n  loadFavourites(cities: Array) {\n    //Queries every city by id in the user and stores it in localStorage as favourites\n\n    /*let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': this.contentType,\n        'Authorization': this.authorization\n      })\n    };*/\n    cities.forEach(city => {\n      this.http.post(this.commonUrl + \"/search\", this.complexSearchId(parseInt(city), \"ID\")).subscribe(rx =>\n        this.savedCitiesService.save(new SavedCity(rx.data[0].NAME, rx.data[0].ID.toString(), rx.data[0].COUNTRY, rx.data[0].LON, rx.data[0].LAT))\n      );\n    });\n  }\n\n}\n/* This service interacts with the server Ontimize, with the service of cities */\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CityComponent.html":{"url":"components/CityComponent.html","title":"component - CityComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CityComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/city/city.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-city\n            \n\n            \n                styleUrls\n                city.component.css\n            \n\n\n\n            \n                templateUrl\n                ./city.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cityShown\n                            \n                            \n                                dataSource\n                            \n                            \n                                displayedColumns\n                            \n                            \n                                forecast\n                            \n                            \n                                rx\n                            \n                            \n                                showForecast\n                            \n                            \n                                valuesDisplayed\n                            \n                            \n                                weatherNow\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCityWeather\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                saveCity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(route: ActivatedRoute, location: Location, weatherService: WeatherService, savedCitiesService: SavedCitiesService, forecastValuesService: ForecastValuesService, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/city/city.component.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        location\n                                                  \n                                                        \n                                                                    Location\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        weatherService\n                                                  \n                                                        \n                                                                    WeatherService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        savedCitiesService\n                                                  \n                                                        \n                                                                    SavedCitiesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        forecastValuesService\n                                                  \n                                                        \n                                                                    ForecastValuesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCityWeather\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCityWeather()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/city/city.component.ts:54\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/city/city.component.ts:50\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saveCity\n                            \n                            \n                        \n                    \n                \n                \n                    \nsaveCity()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/city/city.component.ts:88\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cityShown\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cityShown:     SavedCity\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dataSource\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dataSource:     \n\n                    \n                \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            displayedColumns\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        displayedColumns:     []\n\n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['parameter', 'value']\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            forecast\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        forecast:     \n\n                    \n                \n                    \n                        \n                            Default value : new Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rx\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rx:     Object\n\n                    \n                \n                    \n                        \n                            Type :     Object\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            showForecast\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        showForecast:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valuesDisplayed\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        valuesDisplayed:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            weatherNow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        weatherNow:     WeatherNow\n\n                    \n                \n                    \n                        \n                            Type :     WeatherNow\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:28\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, OnChanges } from '@angular/core';\nimport { SavedCity } from '../savedCity';\nimport { WeatherService } from '../weather.service';\nimport { WeatherNow } from '../weatherNow';\nimport { ActivatedRoute, Route } from '@angular/router';\nimport { Location } from '@angular/common';\n\nimport { SavedCitiesService } from '../saved-cities.service';\nimport { ForecastValuesService } from '../forecast-values.service';\n\nimport { DataSource } from '@angular/cdk/collections';\nimport { MatTableDataSource } from '@angular/material';\n\nimport { Data, Forecast, RespuestaForecast } from './data';\n\nimport { MatSnackBar } from '@angular/material'\n\nimport {MDCRipple} from '@material/ripple';\n\n@Component({\n  selector: 'app-city',\n  templateUrl: './city.component.html',\n  styleUrls: ['./city.component.css']\n})\nexport class CityComponent implements OnInit {\n\n  cityShown: SavedCity;\n  weatherNow: WeatherNow;\n  rx: Object;\n  valuesDisplayed: Array;\n  dataSource;\n  displayedColumns = ['parameter', 'value'];\n  forecast = new Array();\n  showForecast = false;\n\n  constructor(\n    private route: ActivatedRoute,\n    private location: Location,\n    private weatherService: WeatherService,\n    private savedCitiesService: SavedCitiesService,\n    private forecastValuesService: ForecastValuesService,\n    private snackBar : MatSnackBar\n  ) {\n    //listen to a change in the path to refresh info\n    this.route.params.subscribe((value: PopStateEvent) => {\n      this.getCityWeather();\n    });\n  }\n\n  ngOnInit() {\n  }\n \n\n  getCityWeather() {\n\n    //Get the parameters from the URL\n    const id = this.route.snapshot.paramMap.get('id');\n    const name = this.route.snapshot.paramMap.get('name');\n\n    this.cityShown = new SavedCity(name, id);\n\n    this.weatherService.getWeather(this.cityShown.id).subscribe(rx => {\n      this.rx = rx\n      //Put the values received in the object weatherNow\n      this.weatherNow = new WeatherNow();\n      this.weatherNow.set(rx);\n    \n      //Display the values\n      this.valuesDisplayed = this.weatherNow.displayValues();\n      //dataSource is used to represent the data in the mat table\n      this.dataSource = new MatTableDataSource(this.valuesDisplayed);\n    });\n\n    this.weatherService.getForecast(this.cityShown.id).subscribe((rx: RespuestaForecast) => {\n\n      this.forecast = [];\n\n      Array.from(rx.list).forEach(element => {\n        this.forecast.push(new Forecast(element));\n      });\n      //Updates the service with the current city forecasted values\n      this.forecastValuesService.setValues(this.forecast);\n      this.forecastValuesService.setCity(this.cityShown);\n\n    });\n  }\n\n  saveCity() {\n    this.cityShown.country = this.weatherNow.sys.country;\n    this.cityShown.coord = this.weatherNow.coord;\n    this.savedCitiesService.save(this.cityShown);\n\n    this.snackBar.open(`${this.cityShown.name} saved to favourites`, `Ok`, { duration: 3000 });\n  }\n\n\n}\n/* \nThis component shows the information adquired from the microservice through the weather service. It gets the city code from the URL.\n\nFrom this component it is possible to save a new city to the local storage.\n\nAsks for a WeatherNow object with the city weather info to\n\nIncludes in its template the GraphsComponent, which can be hidden or shown with the different forecast graphs.\n*/\n    \n\n    \n        \n\n\n  This is the current weather data in {{cityShown.name}}:\n\n\n  Show forecast\n\n\n\n\n\n  favorite\n\n\n\n\n\n\n  \n    \n       Parameter \n       {{element.parameter}} \n    \n\n    \n       Value \n       {{element.value}} \n    \n\n    \n    \n  \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  This is the current weather data in {{cityShown.name}}:  Show forecast  favorite             Parameter        {{element.parameter}}                Value        {{element.value}}               '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CityComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudsAndWindService.html":{"url":"injectables/CloudsAndWindService.html","title":"injectable - CloudsAndWindService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  CloudsAndWindService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                chart\n                            \n                            \n                                clouds\n                            \n                            \n                                dates\n                            \n                            \n                                wind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCloudsAndWindChart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:86\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCloudsAndWindChart\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCloudsAndWindChart(forecast: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        forecast\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Chart\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        chart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clouds\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        clouds:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dates\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dates:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        wind:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:11\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Forecast } from '../../city/data';\nimport { Chart } from 'chart.js';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CloudsAndWindService {\n\n  chart: Chart;\n  wind: number[];\n  clouds: number[];\n  dates: string[];\n\n  getCloudsAndWindChart(forecast: Array): Chart {\n\n    this.clouds = forecast.map(item => {\n      return item.clouds.all;\n    });\n\n    this.wind = forecast.map(item => {\n      return item.wind.speed;\n    });\n\n    this.dates = forecast.map(item => {\n      return item.dt_txt;\n    });\n\n    this.chart = new Chart('cloudsAndWind', {\n      type: 'bar',\n      data: {\n        labels: this.dates,\n        datasets: [\n\n          {\n            label: 'Wind speed',\n            data: this.wind,\n            borderColor: \"#BADA55\",\n            fill: false,\n            backgroundColor: \"#aaaaaa\",\n            type: 'line',\n            yAxisID: 'Wind'\n          }, {\n            label: 'Clouds percentage',\n            data: this.clouds,\n            borderColor: \"#cccccc\",\n            fill: false,\n            showLine: true,\n            backgroundColor: \"#cccccc\",\n            yAxisID: 'Clouds'\n          }\n        ]\n      },\n      options: {\n\n        legend: {\n          display: true,\n          labels: {\n\n          }\n        },\n        scales: {\n          xAxes: [{\n            display: true\n          }],\n          yAxes: [{\n            id: 'Wind',\n            display: true,\n            ticks: {\n              min: 0,\n              max: Math.max(...this.wind)\n            }\n          }, {\n            id: 'Clouds',\n            display: true,\n            ticks: {\n              min: 0,\n              max: 100\n            }\n          }],\n        }\n      }\n    });\n\n    return this.chart;\n  }\n\n  constructor() { }\n}\n/* This service gets the forecast vakues formated and returns a chart*/\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Data.html":{"url":"classes/Data.html","title":"class - Data","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Data\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/city/data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                parameter\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/city/data.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            parameter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        parameter:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        value:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Weather } from '../weather'\n\n\nexport class Data {\n    parameter: string;\n    value: string;\n\n    constructor() { }\n}\n/* Data is used to transfer information as an array of Data to the MatTable in city */\n\nexport class Forecast {\n\n    clouds: { all: number };\n    dt: number;\n    dt_txt: string;\n\n    main: {\n        grnd_level: number,\n        humidity: number,\n        pressure: number,\n        sea_level: number,\n        temp: number,\n        temp_kf: number,\n        temp_max: number,\n        temp_min: number\n    };\n\n    weather: Array;\n    /*\n        id\n        main\n        description\n        icon\n    */\n\n    wind: {\n        speed: number,\n        deg: number\n    }\n\n    rain: number;\n    snow: number;\n    constructor(element: Forecast) {\n        this.weather = new Array();\n\n        this.clouds = element.clouds;\n        this.dt = element.dt;\n        this.dt_txt = element.dt_txt;\n\n        this.main = {\n            grnd_level: element.main.grnd_level,\n            humidity: element.main.humidity,\n            pressure: element.main.pressure,\n            sea_level: element.main.sea_level,\n            temp: element.main.temp,\n            temp_kf: element.main.temp_kf,\n            temp_max: element.main.temp_max,\n            temp_min: element.main.temp_min\n        };\n\n\n        element.weather.forEach((weather: Weather) => {\n            const w = new Weather();\n            w.main = weather.main;\n            w.id = weather.id;\n            w.icon = weather.icon;\n            w.description = weather.description;\n\n            this.weather.push(w);\n        });\n\n        this.wind = {\n            speed: element.wind.speed,\n            deg: element.wind.deg\n        };\n\n        if (element.rain == undefined) {\n            //console.log(\"rain undefined\");\n        } else {\n            this.rain = element.rain[\"3h\"];\n        }\n\n        if (element.snow == undefined) {\n            //console.log(\"snow undefined\");\n        } else {\n            this.snow = element.snow[\"3h\"];\n        }\n\n    }\n}\n/* The object Forecast stores all the information about the weather provided by the service for a certain hour */\n\nexport class RespuestaForecast {\n\n    list: Array;\n\n    constructor() { }\n}\n\n/* \nData types used for sending data to the mat-table, Graph services and managing a server response containing the forecast for several hours.\n*/\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Forecast.html":{"url":"classes/Forecast.html","title":"class - Forecast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Forecast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/city/data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                clouds\n                            \n                            \n                                dt\n                            \n                            \n                                dt_txt\n                            \n                            \n                                main\n                            \n                            \n                                rain\n                            \n                            \n                                snow\n                            \n                            \n                                weather\n                            \n                            \n                                wind\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(element: Forecast)\n                    \n                \n                        \n                            \n                                Defined in src/app/city/data.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                    Forecast\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clouds\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        clouds:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dt:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dt_txt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dt_txt:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            main\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        main:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rain\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rain:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        snow:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            weather\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        weather:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        wind:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:37\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Weather } from '../weather'\n\n\nexport class Data {\n    parameter: string;\n    value: string;\n\n    constructor() { }\n}\n/* Data is used to transfer information as an array of Data to the MatTable in city */\n\nexport class Forecast {\n\n    clouds: { all: number };\n    dt: number;\n    dt_txt: string;\n\n    main: {\n        grnd_level: number,\n        humidity: number,\n        pressure: number,\n        sea_level: number,\n        temp: number,\n        temp_kf: number,\n        temp_max: number,\n        temp_min: number\n    };\n\n    weather: Array;\n    /*\n        id\n        main\n        description\n        icon\n    */\n\n    wind: {\n        speed: number,\n        deg: number\n    }\n\n    rain: number;\n    snow: number;\n    constructor(element: Forecast) {\n        this.weather = new Array();\n\n        this.clouds = element.clouds;\n        this.dt = element.dt;\n        this.dt_txt = element.dt_txt;\n\n        this.main = {\n            grnd_level: element.main.grnd_level,\n            humidity: element.main.humidity,\n            pressure: element.main.pressure,\n            sea_level: element.main.sea_level,\n            temp: element.main.temp,\n            temp_kf: element.main.temp_kf,\n            temp_max: element.main.temp_max,\n            temp_min: element.main.temp_min\n        };\n\n\n        element.weather.forEach((weather: Weather) => {\n            const w = new Weather();\n            w.main = weather.main;\n            w.id = weather.id;\n            w.icon = weather.icon;\n            w.description = weather.description;\n\n            this.weather.push(w);\n        });\n\n        this.wind = {\n            speed: element.wind.speed,\n            deg: element.wind.deg\n        };\n\n        if (element.rain == undefined) {\n            //console.log(\"rain undefined\");\n        } else {\n            this.rain = element.rain[\"3h\"];\n        }\n\n        if (element.snow == undefined) {\n            //console.log(\"snow undefined\");\n        } else {\n            this.snow = element.snow[\"3h\"];\n        }\n\n    }\n}\n/* The object Forecast stores all the information about the weather provided by the service for a certain hour */\n\nexport class RespuestaForecast {\n\n    list: Array;\n\n    constructor() { }\n}\n\n/* \nData types used for sending data to the mat-table, Graph services and managing a server response containing the forecast for several hours.\n*/\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ForecastValuesService.html":{"url":"injectables/ForecastValuesService.html","title":"injectable - ForecastValuesService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  ForecastValuesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/forecast-values.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                            \n                                forecastValues\n                            \n                            \n                                updated\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCity\n                            \n                            \n                                getUpdates\n                            \n                            \n                                getValues\n                            \n                            \n                                setCity\n                            \n                            \n                                setValues\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/forecast-values.service.ts:34\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCity\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCity()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:32\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     SavedCity\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getUpdates\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetUpdates()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable>\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getValues\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetValues()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:24\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Array\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setCity\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetCity(city: SavedCity)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:28\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        city\n                                                        \n                                                                    SavedCity\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setValues\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetValues(values: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            city\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        city:     SavedCity\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            forecastValues\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        forecastValues:     \n\n                    \n                \n                    \n                        \n                            Default value : Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        updated:     \n\n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:12\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Forecast } from './city/data';\nimport { Observable, Subject } from 'rxjs';\nimport { SavedCity } from './savedCity';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ForecastValuesService {\n\n  forecastValues = Array();\n  updated = new Subject();\n  city: SavedCity;\n\n  getUpdates(): Observable>{\n    return >> this.updated.asObservable();\n  }\n\n  setValues(values: Array) {\n    this.forecastValues = values;\n    this.updated.next(this.forecastValues);\n  }\n\n  getValues(): Array {\n    return this.forecastValues;\n  }\n\n  setCity(city: SavedCity){\n    this.city = city;\n  }\n\n  getCity(): SavedCity{\n    return this.city;\n  }\n  \n  constructor() { }\n}\n\n//Simply stores and shares updates of the forecast values used in the current moment in the application\n \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GraphsComponent.html":{"url":"components/GraphsComponent.html","title":"component - GraphsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GraphsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/graphs/graphs.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-graphs\n            \n\n            \n                styleUrls\n                graphs.component.css\n            \n\n\n\n            \n                templateUrl\n                ./graphs.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                            \n                                cloudColor\n                            \n                            \n                                cloudsAndWindChart\n                            \n                            \n                                dates\n                            \n                            \n                                forecastValues\n                            \n                            \n                                rain\n                            \n                            \n                                rainAndSnowChart\n                            \n                            \n                                rainColor\n                            \n                            \n                                snow\n                            \n                            \n                                temperatureChart\n                            \n                            \n                                temperatureColor\n                            \n                            \n                                temperatures\n                            \n                            \n                                temperaturesMax\n                            \n                            \n                                temperaturesMin\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cloudsAndWind\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                rainAndSnow\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(forecastValuesService: ForecastValuesService, temperatureService: TemperatureService, rainAndSnowService: RainAndSnowService, cloudsAndWindService: CloudsAndWindService, weatherService: WeatherService, route: ActivatedRoute)\n                    \n                \n                        \n                            \n                                Defined in src/app/graphs/graphs.component.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        forecastValuesService\n                                                  \n                                                        \n                                                                    ForecastValuesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        temperatureService\n                                                  \n                                                        \n                                                                    TemperatureService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        rainAndSnowService\n                                                  \n                                                        \n                                                                    RainAndSnowService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        cloudsAndWindService\n                                                  \n                                                        \n                                                                    CloudsAndWindService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        weatherService\n                                                  \n                                                        \n                                                                    WeatherService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cloudsAndWind\n                            \n                            \n                        \n                    \n                \n                \n                    \ncloudsAndWind()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:120\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:63\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rainAndSnow\n                            \n                            \n                        \n                    \n                \n                \n                    \nrainAndSnow()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:103\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperature\n                            \n                            \n                        \n                    \n                \n                \n                    \ntemperature()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:83\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            city\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        city:     \n\n                    \n                \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cloudColor\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cloudColor:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cloudsAndWindChart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cloudsAndWindChart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dates\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dates:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            forecastValues\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        forecastValues:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rain\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rain:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rainAndSnowChart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rainAndSnowChart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rainColor\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rainColor:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        snow:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperatureChart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperatureChart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperatureColor\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperatureColor:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperatures\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperatures:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperaturesMax\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperaturesMax:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperaturesMin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperaturesMin:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:21\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { ForecastValuesService } from '../forecast-values.service';\nimport { Forecast, RespuestaForecast } from '../city/data';\nimport { Chart } from 'chart.js';\nimport { TemperatureService } from './temperature/temperature.service';\nimport { RainAndSnowService } from './rainAndSnow/rain-and-snow.service';\nimport { CloudsAndWindService } from './cloudsAndWind/clouds-and-wind.service';\nimport { WeatherService } from '../weather.service';\nimport { ActivatedRoute, Route } from '@angular/router';\n\n@Component({\n  selector: 'app-graphs',\n  templateUrl: './graphs.component.html',\n  styleUrls: ['./graphs.component.css']\n})\nexport class GraphsComponent implements OnInit {\n\n  forecastValues: Array;\n  temperatures: number[];\n  temperaturesMax: number[];\n  temperaturesMin: number[];\n  rain: number[];\n  snow: number[];\n  dates: string[];\n  temperatureChart: Chart;\n  rainAndSnowChart: Chart;\n  cloudsAndWindChart: Chart;\n  city;\n  temperatureColor = \"\";\n  rainColor = \"\";\n  cloudColor = \"\";\n\n  constructor(\n    private forecastValuesService: ForecastValuesService,\n    private temperatureService: TemperatureService,\n    private rainAndSnowService: RainAndSnowService,\n    private cloudsAndWindService: CloudsAndWindService,\n    private weatherService: WeatherService,\n    private route: ActivatedRoute\n  ) {\n\n    this.forecastValues = forecastValuesService.getValues();\n\n    forecastValuesService.getUpdates().subscribe(values => {\n      this.forecastValues = values;\n      //If the city changes, charts do so\n\n      if (this.temperatureChart) {\n        this.temperatureChart = undefined;\n        //this.temperature();\n      }\n      if (this.rainAndSnowChart) {\n        this.rainAndSnowChart = undefined;\n        //this.rainAndSnow();\n      }\n      if (this.cloudsAndWindChart) {\n        this.cloudsAndWindChart = undefined;\n        //this.cloudsAndWind();\n      }\n    });\n  }\n\n  ngOnInit() {\n\n    this.city = this.route.snapshot.paramMap.get('name');\n\n\n    const id = this.route.snapshot.paramMap.get('id');\n    this.weatherService.getForecast(id).subscribe((rx: RespuestaForecast) => {\n\n      this.forecastValues = [];\n\n      Array.from(rx.list).forEach(element => {\n        this.forecastValues.push(new Forecast(element));\n      });\n      //Updates the service with the current city forecasted values\n      this.forecastValuesService.setValues(this.forecastValues);\n\n      this.temperature();\n    });\n  }\n\n  temperature() {\n    \n    if (this.temperatureChart === undefined) {\n      this.temperatureColor = \"primary\";\n      this.cloudColor = \"\";\n      this.rainColor = \"\";\n      this.cloudsAndWindChart = undefined;\n      this.rainAndSnowChart = undefined;\n\n      this.forecastValues = this.forecastValuesService.getValues();\n\n      this.temperatureChart = this.temperatureService.getTemperatureChart(this.forecastValues);\n    } else {\n      //Makes the chart dissapear\n      this.temperatureChart = undefined;\n      this.temperatureColor = \"\";\n    }\n\n  }\n\n  rainAndSnow() {\n    if (this.rainAndSnowChart === undefined) {\n      this.rainColor = \"primary\";\n      this.temperatureColor = \"\";\n      this.cloudColor = \"\";\n      this.temperatureChart = undefined;\n      this.cloudsAndWindChart = undefined;\n\n      this.forecastValues = this.forecastValuesService.getValues();\n\n      this.rainAndSnowChart = this.rainAndSnowService.getRainAndSnowChart(this.forecastValues);\n    } else {\n      this.rainAndSnowChart = undefined;\n      this.rainColor = \"\";\n    }\n  }\n\n  cloudsAndWind() {\n    if (this.cloudsAndWindChart === undefined) {\n      this.cloudColor = \"primary\";\n      this.temperatureColor = \"\";\n      this.rainColor = \"\";\n      this.temperatureChart = undefined;\n      this.rainAndSnowChart = undefined;\n\n      this.forecastValues = this.forecastValuesService.getValues();\n\n      this.cloudsAndWindChart = this.cloudsAndWindService.getCloudsAndWindChart(this.forecastValues);\n    } else {\n      this.cloudsAndWindChart = undefined;\n      this.cloudColor = \"\";\n    }\n  }\n\n}\n/* This component shows and deletes the charts and obtains them from the services */\n    \n\n    \n        {{city}}\n\n\n\n  \n    \n      Temperature\n    \n    \n    \n      Rain and Snow\n    \n    \n    \n      Clouds and Wind\n    \n  \n\n  \n    \n      {{ temperatureChart }}\n    \n    \n      {{ rainAndSnowChart }}\n    \n    \n      {{ cloudsAndWindChart }}\n    \n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{city}}            Temperature                  Rain and Snow                  Clouds and Wind                  {{ temperatureChart }}              {{ rainAndSnowChart }}              {{ cloudsAndWindChart }}      '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GraphsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/InitialComponent.html":{"url":"components/InitialComponent.html","title":"component - InitialComponent","body":"\n                   \n\n\n\n\n\n  Components\n  InitialComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/initial/initial.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-initial\n            \n\n            \n                styleUrls\n                initial.component.css\n            \n\n\n\n            \n                templateUrl\n                ./initial.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admin\n                            \n                            \n                                citiesList\n                            \n                            \n                                citiesListURL\n                            \n                            \n                                cityMatch\n                            \n                            \n                                found\n                            \n                            \n                                foundCities\n                            \n                            \n                                keyAdmin\n                            \n                            \n                                loading\n                            \n                            \n                                rxCity\n                            \n                            \n                                wasFound\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCitiesList\n                            \n                            \n                                getCity\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                search\n                            \n                            \n                                toggleAdmin\n                            \n                            \n                                uploadAll\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:keyup\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(weatherService: WeatherService, http: HttpClient, citiesServer: CitiesServerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/initial/initial.component.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        weatherService\n                                                  \n                                                        \n                                                                    WeatherService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        citiesServer\n                                                  \n                                                        \n                                                                    CitiesServerService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        city\n                    \n                    \n                            \n                            Type:    string\n\n                            \n                        \n                            Default value: ''\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:34\n                            \n                        \n            \n        \n\n\n\n    \n    HostListeners        \n            \n                \n                    \n                        \n                        \n                            \n                            window:keyup\n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Arguments : '$event' \n                        \n                    \n                \n                    \nwindow:keyup(event: KeyboardEvent)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:126\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCitiesList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCitiesList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:49\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCity\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCity()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:64\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            search\n                            \n                            \n                        \n                    \n                \n                \n                    \nsearch()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:91\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleAdmin\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoggleAdmin()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:119\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            uploadAll\n                            \n                            \n                        \n                    \n                \n                \n                    \nuploadAll()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:109\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            admin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        admin:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesList:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesListURL\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesListURL:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '../../assets/city.list.json'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cityMatch\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cityMatch:     SavedCity\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            found\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        found:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            foundCities\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        foundCities:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            keyAdmin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        keyAdmin:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loading\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        loading:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'none'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rxCity\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rxCity:     SavedCity\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wasFound\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        wasFound:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'none'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, Input, HostListener } from '@angular/core';\n\nimport { WeatherService } from '../weather.service';\n\nimport { WeatherNow } from '../weatherNow';\nimport { SavedCity } from '../savedCity';\n\nimport { SavedCitiesService } from '../saved-cities.service';\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { CitiesServerService } from '../cities-server.service';\n\n\n\n@Component({\n  selector: 'app-initial',\n  templateUrl: './initial.component.html',\n  styleUrls: ['./initial.component.css']\n})\nexport class InitialComponent implements OnInit {\n\n  rxCity: SavedCity;\n  cityMatch: SavedCity;\n  found = false;\n  loading = 'none';\n  wasFound = 'none';\n  citiesListURL = '../../assets/city.list.json';\n  citiesList: Array;\n  foundCities: Array;\n  admin = false;\n  keyAdmin = \"\";\n\n  @Input() city: string = '';\n\n  constructor(\n    private weatherService: WeatherService,\n    private http: HttpClient,\n    private citiesServer: CitiesServerService\n  ) {\n    \n  }\n\n  ngOnInit() {\n    const body = document.getElementsByTagName(\"body\");\n    body[0].classList.add(\"initial-view\");\n  }\n\n  getCitiesList() {\n    //Requests to the assets folder the JSON with all the cities\n    this.citiesList = new Array();\n    this.http.get>(this.citiesListURL).subscribe(rx => {\n      //Stores every city in the cities List were searches will be accomplished\n      Array.from(rx).forEach(element => {\n        this.citiesList.push(new SavedCity(element.name, element.id, element.country, element.coord.lon, element.coord.lat));\n      });\n    }\n\n    );\n    //This method isn't compatible with a optimum performance of the application as it consumes too much memory and bandwidth\n  }\n\n\n  getCity() {\n    //This function looks for a service response searching with a city name\n\n    if (this.city.length == 0) {\n      //If the city field has no value the search is not launched\n      return;\n    }\n\n    this.loading = 'block';\n    this.wasFound = 'none';\n\n    this.weatherService.getWeatherByCityName(this.city).subscribe(rx => {\n      //We subscribe for the search results\n      this.rxCity = rx;\n      this.cityMatch = new SavedCity(this.rxCity.name, this.rxCity.id, this.rxCity.sys.country);\n      this.found = true;\n      this.loading = 'none';\n    },\n      error => {\n        this.found = false;\n        this.loading = 'none';\n        this.wasFound = 'block';\n      });\n\n  }\n\n\n  search(): void {\n    //Search in the cities.JSON is disabled. It produces a performance leakage\n    /*if((this.city.length>0)&&(this.citiesList !== undefined)){\n      this.foundCities = this.citiesList.filter(element => {\n        \n        return (element.name.includes(this.city));\n      });\n    }*/\n    this.getCity(); //Asks the API\n    if (this.city.length == 0) {\n      //If the city field has no value the search is not launched\n      return;\n    }\n    //Search in the dataBase through the server Ontimize EE\n    this.foundCities = this.citiesServer.searchByName(this.city);\n\n  }\n\n  uploadAll() {\n    //This function should not be called because it makes the app crash. However, it has been able to make all the inserts correctly in the dataBase.\n    this.citiesServer.log();\n    console.log(\n      this.citiesServer.upload(>this.citiesList)\n    );\n\n    console.log(\"complete upload of citiesList to the dataBase\");\n  }\n\n  toggleAdmin() {\n    //Show/Hide admin options\n    this.admin = !this.admin;\n  }\n\n  //Listens to the keyboard and triggers a function to show admin options when \"admin\" is written\n  @HostListener('window:keyup', ['$event'])\n  keyEvent(event: KeyboardEvent) {\n\n    this.keyAdmin = this.keyAdmin + event.key;\n    if (this.keyAdmin.substr(-5) === \"admin\") {\n      this.toggleAdmin();\n      this.keyAdmin = \"\";\n    }\n\n  }\n\n}\n/*\nThis component is meant to show an initial view of the application.\n\nIt has got a search utility with which new cities can be accessed\n\nDisplays two answers from two different sources:\n\n  An answer obtained searching by city name in the API\n\n  An answer obtained searching in the Ontimize EE database through the server OR searching in a local list of cities downloaded from assets\n*/\n    \n\n    \n        \n  \n\n    Look for a city: {{ city | uppercase }}\n\n    \n\n      \n        \n      \n      Searching...\n\n    \n  \n\n\n  Search with Weather-Angular!\n\n  \n    {{cityMatch.name}} ({{cityMatch.sys.country}})\n  \n\n  \n    \n    Enable suggestions (may require a 4.2 MB download)\n    Fill in the local dataBase\n  \n  The city searched was not found\n\n  Suggested results: \n  \n     {{found.name}} ({{found.sys.country}}) \n  \n\n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Look for a city: {{ city | uppercase }}                              Searching...        Search with Weather-Angular!      {{cityMatch.name}} ({{cityMatch.sys.country}})            Enable suggestions (may require a 4.2 MB download)    Fill in the local dataBase    The city searched was not found  Suggested results:        {{found.name}} ({{found.sys.country}})     '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'InitialComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/InterceptorComponent.html":{"url":"components/InterceptorComponent.html","title":"component - InterceptorComponent","body":"\n                   \n\n\n\n\n\n  Components\n  InterceptorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/interceptor/interceptor.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                HttpInterceptor\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-interceptor\n            \n\n            \n                styleUrls\n                interceptor.component.css\n            \n\n\n\n            \n                templateUrl\n                ./interceptor.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: LogService)\n                    \n                \n                        \n                            \n                                Defined in src/app/interceptor/interceptor.component.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                    LogService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intercept\n                            \n                            \n                        \n                    \n                \n                \n                    \nintercept(request: HttpRequest, next: HttpHandler)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/interceptor/interceptor.component.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                        \n                                                                    HttpRequest\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        next\n                                                        \n                                                                    HttpHandler\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { LogService } from '../log.service'\n\n@Component({\n  selector: 'app-interceptor',\n  templateUrl: './interceptor.component.html',\n  styleUrls: ['./interceptor.component.css']\n})\nexport class InterceptorComponent implements HttpInterceptor {\n\n  constructor(private auth: LogService) { }\n\n  intercept(request: HttpRequest, next: HttpHandler): Observable> {\n    if(request.method === \"DELETE\"){\n      console.log(\"Filtered the DELETE\");\n      return next.handle(request);\n    }\n    if(request.url.includes(`http://localhost:8080/citiesservice-server/services/rest/users/login`)){\n      return next.handle(request);\n    }\n\n    if(request.url.includes(`http://localhost:8080/citiesservice-server/services/rest`)){\n    request = request.clone({\n      setHeaders: {\n        'Authorization' : `${localStorage.getItem(\"Token\")}`,\n        'Content-Type' : `application/json`\n      }\n    });\n    //console.log(\"Interceptor working\");\n    //console.log(request);\n    }\n\n    \n    return next.handle(request);\n  }\n\n}\n\n    \n\n    \n        \n  interceptor works!\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  interceptor works!'\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'InterceptorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogService.html":{"url":"injectables/LogService.html","title":"injectable - LogService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  LogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/log.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization\n                            \n                            \n                                cities\n                            \n                            \n                                commonUrl\n                            \n                            \n                                contentType\n                            \n                            \n                                currentUser\n                            \n                            \n                                exists\n                            \n                            \n                                goodCommonUrl\n                            \n                            \n                                updated\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeSession\n                            \n                            \n                                createUser\n                            \n                            \n                                deleteBody\n                            \n                            \n                                deleteUser\n                            \n                            \n                                getToken\n                            \n                            \n                                getUpdates\n                            \n                            \n                                logIn\n                            \n                            \n                                logRefresh\n                            \n                            \n                                updatePassword\n                            \n                            \n                                updateUserCities\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(savedCitiesService: SavedCitiesService, http: HttpClient, citiesServerService: CitiesServerService, router: Router, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/log.service.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        savedCitiesService\n                                                  \n                                                        \n                                                                    SavedCitiesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        citiesServerService\n                                                  \n                                                        \n                                                                    CitiesServerService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            closeSession\n                            \n                            \n                        \n                    \n                \n                \n                    \ncloseSession()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:45\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createUser\n                            \n                            \n                        \n                    \n                \n                \n                    \ncreateUser(username: string, password: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:171\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        username\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        password\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteBody\n                            \n                            \n                        \n                    \n                \n                \n                    \ndeleteBody(username: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:228\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        username\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteUser\n                            \n                            \n                        \n                    \n                \n                \n                    \ndeleteUser(user: UserServer)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:208\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        user\n                                                        \n                                                                    UserServer\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getToken\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetToken()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:37\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getUpdates\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetUpdates()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:40\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logIn\n                            \n                            \n                        \n                    \n                \n                \n                    \nlogIn(username: string, password: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:81\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        username\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        password\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logRefresh\n                            \n                            \n                        \n                    \n                \n                \n                    \nlogRefresh()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:140\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatePassword\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdatePassword(password: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:237\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        password\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updateUserCities\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdateUserCities()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:69\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            authorization\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        authorization:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGlvbi10aW1lIjoxNTI4OTU2OTY0MTE2LCJ1c2VybmFtZSI6ImRlbW8ifQ.xKAhjdQ9yEy2AuS8Dp3qtoBmEFL0wAclsK4LRmKZ9nE'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cities\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cities:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            commonUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        commonUrl:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"http://localhost:8080/citiesservice-server/services/rest/log/log\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contentType\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contentType:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'application/json'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUser\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        currentUser:     UserServer\n\n                    \n                \n                    \n                        \n                            Type :     UserServer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exists\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        exists:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            goodCommonUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        goodCommonUrl:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"http://localhost:8080/citiesservice-server/services/rest\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        updated:     \n\n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:21\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { SavedCitiesService } from './saved-cities.service';\nimport { SavedCity } from './savedCity';\nimport { Observable, Subject } from 'rxjs';\nimport { HttpClient, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { ServerResponse, ServedCity } from './servedCity';\nimport { UserServer, CitiesResponse, CitiesResponseUnit } from './userServer';\nimport { WeatherService } from './weather.service';\nimport { CitiesServerService } from './cities-server.service';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material';\nimport { isNumber } from 'util';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LogService {\n\n\n  cities: Array;\n  updated = new Subject();\n  exists: Subject;\n  currentUser: UserServer; //Holds the info of the current logged user\n\n  commonUrl = \"http://localhost:8080/citiesservice-server/services/rest/log/log\";\n  goodCommonUrl = \"http://localhost:8080/citiesservice-server/services/rest\";\n  contentType = 'application/json';\n  authorization = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGlvbi10aW1lIjoxNTI4OTU2OTY0MTE2LCJ1c2VybmFtZSI6ImRlbW8ifQ.xKAhjdQ9yEy2AuS8Dp3qtoBmEFL0wAclsK4LRmKZ9nE';\n\n  constructor(\n    private savedCitiesService: SavedCitiesService,\n    private http: HttpClient,\n    private citiesServerService: CitiesServerService,\n    private router: Router,\n    private snackBar: MatSnackBar\n  ) { }\n  getToken(): string {\n    return `${localStorage.getItem(\"Token\")}`;\n  }\n  getUpdates(): Observable {\n    //Observable indicating if someone is logged in\n    return >this.updated.asObservable();\n  }\n\n  closeSession() {\n    if (this.currentUser === undefined) {\n      this.updated.next(false);\n      return;\n    }\n\n    //save to string favourite cities\n    this.currentUser.setFromList(this.savedCitiesService.getSavedCities());\n    //save the cities that don`t exist yet in the server\n    this.currentUser.citiesList = this.savedCitiesService.getSavedCities();\n    this.citiesServerService.upload(this.currentUser.citiesList);\n\n\n    this.updateUserCities() //New\n    //this.updateSettings(\"CITIES\", this.currentUser.favouriteCities); //To delete\n\n\n    this.savedCitiesService.deleteCities();\n    localStorage.removeItem(\"session\");\n    localStorage.removeItem(\"Token\");\n    this.updated.next(false);\n    this.currentUser = undefined;\n  }\n\n  updateUserCities() {\n    //New\n    const body = `{\n      \"CITIES\" : \"` + this.currentUser.favouriteCities + `\"\n    }`;\n\n    this.http.post(this.goodCommonUrl + \"/fav/update\", body).subscribe(res => { }, err => {\n      console.log(\"There's been an error trying to update user's list of cities in the db\");\n      console.log(body);\n    });\n  }\n\n  logIn(username: string, password: string) {\n    let citiesList = \"\";\n    //base64 coded\n    let auth = \"Basic \" + btoa(`${username}:${password}`);\n\n\n    this.http.post(this.goodCommonUrl + \"/users/login\", \"\", {\n      headers: new HttpHeaders({\n        'Authorization': auth\n      }),\n      observe: 'response'\n    }).subscribe(res => {\n      //Set the token\n      localStorage.setItem(\"Token\", \"Bearer \" + res.headers.get('X-Auth-Token'));\n\n      //Get the favourite cities\n      this.http.post(`${this.goodCommonUrl}/fav/query`, \"\").subscribe(response => {\n        //console.log(response.data[0].CITIES);\n        //console.log(response);\n        citiesList = response.data[0].CITIES;\n        //Fill in the cities server service\n        if (citiesList !== \"\") {\n          this.citiesServerService.loadFavourites(citiesList.split(','));\n        }\n\n        localStorage.setItem(\"session\", JSON.stringify(username));\n        this.currentUser = new UserServer();\n\n        this.currentUser.username = username;\n        this.currentUser.password = `Bearer ${res.headers.get('X-Auth-Token')}`;\n        this.currentUser.favouriteCities = citiesList;\n        this.currentUser.citiesId = citiesList.split(',');\n        this.currentUser.citiesList = this.savedCitiesService.getSavedCities();\n\n        this.updated.next(true);\n        //console.log(this.currentUser.display())\n        this.snackBar.open(\"Logged as \" + this.currentUser.username, \"Ok\", {\n          duration: 1500\n        });\n      }, error => {\n        console.log(\"Failure trying to obtain saved cities from the server\");\n      });\n\n\n\n    }, err => {\n      if(err.status === 401){\n        this.snackBar.open( \"Wrong password or username\" , \"Ok\", {\n          duration: 1500\n        });\n        console.log(\"Access denied\");\n      }else{\n      console.log(`There's been a problem with your log in process.`);\n      console.log(err);\n      }\n    });\n  }\n\n\n  logRefresh(){\n    let citiesList = \"\";\n    this.http.post(`${this.goodCommonUrl}/fav/query`, \"\").subscribe(response => {\n      //console.log(response.data[0].CITIES);\n      //console.log(response);\n      citiesList = response.data[0].CITIES;\n      //Fill in the cities server service\n      if (citiesList !== \"\") {\n        this.citiesServerService.loadFavourites(citiesList.split(','));\n      }\n\n      let username = localStorage.getItem(\"session\");\n      this.currentUser = new UserServer();\n\n      this.currentUser.username = username;\n      this.currentUser.password = localStorage.getItem(\"Token\");;\n      this.currentUser.favouriteCities = citiesList;\n      this.currentUser.citiesId = citiesList.split(',');\n      this.currentUser.citiesList = this.savedCitiesService.getSavedCities();\n\n      this.updated.next(true);\n      //console.log(this.currentUser.display())\n      this.snackBar.open(\"Logged as \" + this.currentUser.username, \"Ok\", {\n        duration: 1500\n      });\n    });\n  }\n\n  \n\n\n  createUser(username: string, password: string){\n    //Default Token for demo demouser. Don`t delete the demouser in the db because it would be complicated to create any other user afterwards\n    localStorage.setItem(\"Token\",\"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGlvbi10aW1lIjoxNTI4Nzk5MTY4MzgxLCJ1c2VybmFtZSI6ImRlbW8ifQ.vwEZijOag2iCSN0UPRTS8jqre1NGzHCrg6fVkDH2-mw\")\n    this.http.post(`${this.goodCommonUrl}/users/user`,`\n    {\n      \"data\": {\n        \"USER_\": \"${username}\",\n        \"PASSWORD\": \"${password}\",\n        \"NAME\": \"\",\n        \"SURNAME\": \"\",\n        \"EMAIL\": \"\",\n        \"NIF\" : \"\"\n      }\n      \n     }\n    `).subscribe(res => {\n      //console.log(res)\n      this.snackBar.open( `User ${username} successfully created`, \"Ok\", {\n        duration: 2500\n      });\n      this.logIn(username,password);\n    }, err =>{\n      if(err.status === 500){\n        this.snackBar.open( \"This username is already in use\", \"Ok\", {\n          duration: 2500\n        });\n      }else{\n        console.log(\"Something went wrong when creating the user\");\n      }\n    });\n  }\n \n  \n  \n\n  \n\n  deleteUser(user: UserServer) {\n    let deleteBody = this.deleteBody(user.username);\n    let bearer = localStorage.getItem(\"Token\");\n    this.closeSession();\n\n    this.http.request(new HttpRequest(\"DELETE\", `${this.goodCommonUrl}/users/user`, deleteBody, {\n      headers: new HttpHeaders({\n        'Content-Type': \"application/json\",\n        'Authorization': bearer\n      })\n    })).subscribe(rx => {\n      console.log(\"Deleted\");\n      this.snackBar.open( `The user has been deleted`, \"Ok\", {\n        duration: 2500\n      });\n      this.router.navigate(['/initial']);\n    });\n\n\n  }\n  deleteBody(username: string): string {\n  //The service is always going to delete the current logged in user, no matter what the body contains\n    return `{\n       \"filter\": {\n         \"USER_\": \"` + username + `\"\n       }\n      }`;\n  }\n\n  updatePassword(password: string){\n    this.http.post(`${this.goodCommonUrl}/users/updatePassword`,`{ \"PASSWORD\" : \"${password}\"}`).subscribe(res => {\n      this.snackBar.open( `Password changed`, \"Ok\", {\n        duration: 2500\n      });\n    }, err => {\n      console.log(\"Something went wrong when changing the password\");\n    });\n  }\n}\n/* This service interacts with the Ontimize Server, with the service of users*/\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LogginDialogComponent.html":{"url":"components/LogginDialogComponent.html","title":"component - LogginDialogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LogginDialogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/loggin-dialog/loggin-dialog.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-loggin-dialog\n            \n\n            \n                styleUrls\n                loggin-dialog.component.css\n            \n\n\n\n            \n                templateUrl\n                ./loggin-dialog.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                form\n                            \n                            \n                                maxLengthError\n                            \n                            \n                                minLengthError\n                            \n                            \n                                password\n                            \n                            \n                                passwordRequiredError\n                            \n                            \n                                username\n                            \n                            \n                                usernameRequiredError\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkErrors\n                            \n                            \n                                newUser\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                submit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(formBuilder: FormBuilder, dialogRef: MatDialogRef, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/loggin-dialog/loggin-dialog.component.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                    MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            checkErrors\n                            \n                            \n                        \n                    \n                \n                \n                    \ncheckErrors()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:42\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            newUser\n                            \n                            \n                        \n                    \n                \n                \n                    \nnewUser()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:63\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:28\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submit\n                            \n                            \n                        \n                    \n                \n                \n                    \nsubmit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:36\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        description:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            form\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        form:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxLengthError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        maxLengthError:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            minLengthError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        minLengthError:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        password:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            passwordRequiredError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        passwordRequiredError:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        username:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            usernameRequiredError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        usernameRequiredError:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material\";\nimport { Router } from \"@angular/router\";\n\n@Component({\n  selector: 'app-loggin-dialog',\n  templateUrl: './loggin-dialog.component.html',\n  styleUrls: ['./loggin-dialog.component.css']\n})\nexport class LogginDialogComponent implements OnInit {\n\n  form: FormGroup;\n  description: string;\n  username: string;\n  password: string;\n  minLengthError = false;\n  maxLengthError = false;\n  passwordRequiredError = false;\n  usernameRequiredError = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private dialogRef: MatDialogRef,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      username: new FormControl(this.username, [Validators.minLength(4), Validators.maxLength(20), Validators.required]),\n      password: new FormControl(this.password, [Validators.required])\n    });\n    \n  }\n  \n  submit() {\n    this.checkErrors();\n    if (!this.form.valid) { return; }\n    this.dialogRef.close(this.form.value);\n  }\n\n  checkErrors(){\n    this.minLengthError = this.maxLengthError = this.passwordRequiredError = this.usernameRequiredError = false;\n    if(this.form.get('username').errors !== null){\n      if(this.form.get('username').errors.minlength !== undefined){\n        this.minLengthError = true;\n      }\n      if(this.form.get('username').errors.maxLength !== undefined){\n        this.maxLengthError = true;\n      }\n      if(this.form.get('username').errors.required !== undefined){\n        this.usernameRequiredError = true;\n      }\n    }\n\n    if(this.form.get('password').errors !== null){\n      if(this.form.get('password').errors.required !== undefined){\n        this.passwordRequiredError = true;\n      }\n    }\n  }\n\n  newUser() {\n    this.dialogRef.close();\n    this.router.navigate(['user']);\n  }\n}\n\n/* This log in dialog pops up when the sign in button in the navigation bar is clicked.\n\nIt just launches a form, validates it and returns the data when closed.\n\nAlso, contains a button that routes to the user creation functionality*/\n\n    \n\n    \n        \n\n    Log In\n\n    \n        \n            \n                \n                    \n                \n                Username is too short\n                Username is too long\n                Ussername is required\n            \n            \n                \n                    \n                \n                Password is required\n            \n\n        \n    \n\n    \n        Cancel\n        \n        Log in\n        \n        Sign up\n    \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Log In                                                                                            Username is too short                Username is too long                Ussername is required                                                                                            Password is required                                    Cancel                Log in                Sign up    '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LogginDialogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MaterialModule.html":{"url":"modules/MaterialModule.html","title":"module - MaterialModule","body":"\n                   \n\n\n\n\n  Modules\n  MaterialModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/material/material.module.ts\n        \n\n\n        \n\n        \n            \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  MatButtonModule,\n  MatMenuModule,\n  MatToolbarModule,\n  MatIconModule,\n  MatCardModule,\n  MatGridListModule,\n  MatSidenavModule,\n  MatSortModule,\n  MatTableModule,\n  MatInputModule,\n  MatSelectModule,\n  MatSliderModule,\n  MatRadioModule,\n  MatListModule,\n  MatProgressSpinnerModule,\n  MatChipsModule,\n  MatTooltipModule,\n  MatExpansionModule,\n  MatDialogModule,\n  MatAutocompleteModule,\n  MatTabsModule,\n  MatSlideToggleModule\n} from '@angular/material';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatMenuModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatCardModule,\n    MatGridListModule,\n    MatSidenavModule,\n    MatSortModule,\n    MatTableModule,\n    MatInputModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatRadioModule,\n    MatListModule,\n    MatProgressSpinnerModule,\n    MatChipsModule,\n    MatTooltipModule,\n    MatExpansionModule,\n    MatDialogModule,\n    MatAutocompleteModule,\n    MatTabsModule,\n    MatSlideToggleModule\n  ],\n  exports: [\n    MatButtonModule,\n    MatMenuModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatCardModule,\n    MatGridListModule,\n    MatSidenavModule,\n    MatSortModule,\n    MatTableModule,\n    MatInputModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatRadioModule,\n    MatListModule,\n    MatProgressSpinnerModule,\n    MatChipsModule,\n    MatTooltipModule,\n    MatExpansionModule,\n    MatDialogModule,\n    MatAutocompleteModule,\n    MatTabsModule,\n    MatSlideToggleModule\n  ],\n  declarations: []\n})\nexport class MaterialModule { }\n\n/* Here components from material are imported and exported in order to not engrose the app.module (just imports MaterialModule )too much and get only the necessary elements */\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavigationComponent.html":{"url":"components/NavigationComponent.html","title":"component - NavigationComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NavigationComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/navigation/navigation.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-navigation\n            \n\n            \n                styleUrls\n                navigation.component.css\n            \n\n\n\n            \n                templateUrl\n                ./navigation.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                citiesSubscription\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                dialogRef\n                            \n                            \n                                emptyList\n                            \n                            \n                                intervalCheck\n                            \n                            \n                                logged\n                            \n                            \n                                logSubscription\n                            \n                            \n                                logSubscription2\n                            \n                            \n                                notEmpty\n                            \n                            \n                                profile\n                            \n                            \n                                routeSubscription\n                            \n                            \n                                savedCities\n                            \n                            \n                                youSureButton\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteCities\n                            \n                            \n                                getCities\n                            \n                            \n                                getLog\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                notSure\n                            \n                            \n                                relog\n                            \n                            \n                                toggleFavourites\n                            \n                            \n                                toggleSession\n                            \n                            \n                                youSure\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                opened\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, savedCitiesService: SavedCitiesService, logService: LogService, dialog: MatDialog, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/navigation/navigation.component.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        savedCitiesService\n                                                  \n                                                        \n                                                                    SavedCitiesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        logService\n                                                  \n                                                        \n                                                                    LogService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        opened\n                    \n                    \n                            \n                            Type:    boolean\n\n                            \n                        \n                            Default value: false\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:23\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteCities\n                            \n                            \n                        \n                    \n                \n                \n                    \ndeleteCities()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:118\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCities\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCities()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:90\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getLog\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetLog()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:76\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:56\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:49\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notSure\n                            \n                            \n                        \n                    \n                \n                \n                    \nnotSure()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:130\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            relog\n                            \n                            \n                        \n                    \n                \n                \n                    \nrelog()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:63\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleFavourites\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoggleFavourites()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:105\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleSession\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoggleSession()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:134\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            youSure\n                            \n                            \n                        \n                    \n                \n                \n                    \nyouSure()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:127\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dialog\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dialog:     MatDialog\n\n                    \n                \n                    \n                        \n                            Type :     MatDialog\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dialogRef\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dialogRef:     MatDialogRef\n\n                    \n                \n                    \n                        \n                            Type :     MatDialogRef\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            emptyList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        emptyList:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'none'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intervalCheck\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        intervalCheck:     \n\n                    \n                \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logged\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        logged:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        logSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logSubscription2\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        logSubscription2:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notEmpty\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        notEmpty:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        profile:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            routeSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        routeSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            savedCities\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        savedCities:     SavedCity[]\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            youSureButton\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        youSureButton:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { SavedCitiesService } from '../saved-cities.service';\nimport { SavedCity } from '../savedCity';\nimport { Subscription } from 'rxjs';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { LogginDialogComponent } from '../loggin-dialog/loggin-dialog.component';\nimport { LogService } from '../log.service';\nimport { MatSnackBar } from '@angular/material';\n\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-navigation',\n  templateUrl: './navigation.component.html',\n  styleUrls: ['./navigation.component.css']\n})\nexport class NavigationComponent implements OnInit, OnDestroy {\n\n  savedCities: SavedCity[];\n  routeSubscription: Subscription;\n  citiesSubscription: Subscription;\n  logSubscription: Subscription;\n  logSubscription2: Subscription;\n  @Input() opened: boolean = false;\n  notEmpty = false;\n  emptyList = 'none';\n  dialogRef: MatDialogRef;\n  logged = false;\n  profile: string = \"\";\n  intervalCheck;\n  youSureButton = false;\n\n  constructor(\n    private router: Router,\n    private savedCitiesService: SavedCitiesService,\n    private logService: LogService,\n    public dialog: MatDialog,\n    private snackBar : MatSnackBar\n  ) {\n    //Trying to listen to a change in the path to refresh info\n    router.events.subscribe(value => {\n      if(!(this.router.url.includes(`/initial`))){\n        const body = document.getElementsByTagName(\"body\");\n        body[0].classList.remove(\"initial-view\");\n      }\n    });\n  }\n\n  \n  ngOnInit() {\n    this.relog();\n    this.getCities();\n    this.getLog();\n  }\n\n\n  ngOnDestroy() {\n    //Unsubscribe from Observables to avoid inefficiency\n    this.routeSubscription.unsubscribe();\n    this.citiesSubscription.unsubscribe();\n    this.logSubscription.unsubscribe();\n  }\n\n  relog() {\n    let token = localStorage.getItem(\"Token\");\n    this.profile = localStorage.getItem(\"session\");\n    if ((token !== null) && (this.profile != null)) {\n      this.profile = this.profile.replace(/['\"]+/g,'');\n      localStorage.setItem(\"session\", this.profile);\n      this.logService.logRefresh();\n    }\n  }\n\n\n\n\n  getLog() {\n    this.logSubscription = this.logService.getUpdates().subscribe(logged => {\n      this.logged = logged;\n      if(this.logService.currentUser === undefined){\n        this.profile = \"USER\";\n      }else{\n      this.profile = this.logService.currentUser.username.replace(/['\"]+/g,''); //For showing settings\n      }\n      if ((this.savedCities.length  {\n\n      this.savedCities = cities;\n      if (cities.length > 0) {\n        this.notEmpty = true;\n        this.emptyList = 'none';\n      } else {\n        this.notEmpty = false;\n      }\n    });\n  }\n\n  toggleFavourites() {\n    if(this.youSureButton){\n      this.youSureButton = false;\n    }\n    if (this.notEmpty) {\n      this.opened = !this.opened;\n      this.emptyList = 'none';\n    } else {\n      this.opened = false;\n      this.emptyList = 'block';\n    }\n  }\n\n  deleteCities() {\n    this.youSureButton = false;\n    this.savedCitiesService.deleteCities();\n    this.getCities();\n    this.opened = false;\n    this.notEmpty = false;\n    this.snackBar.open(\"Favourite cities have been deleted\", \"Ok\", { duration: 3000 }); \n  }\n\n  youSure(){\n    this.youSureButton = true; //Activates the button to deleteCities()\n  }\n  notSure(){\n    this.youSureButton = false;\n  }\n\n  toggleSession() {\n\n    if (this.logged) {\n      this.logService.closeSession();\n      this.deleteCities();\n      return;\n    }\n    //Opens a dialog ref with a form to log in\n    this.dialogRef = this.dialog.open(LogginDialogComponent);\n\n    this.dialogRef.afterClosed().subscribe(data => {\n      //when dialog is closed we try the session with the service's method\n      if (data !== undefined) {\n        if (data.username !== undefined || data.password !== undefined) {\n          this.logService.logIn(data.username, data.password); //Call the log service\n        }\n      }\n    });\n\n  }\n\n\n}\n\n\n/*\nThis component picks the saved cities from the SavedCitiesService and displays the links to city/cod in a sidenav that can be hidden\n\nAlso, presents a link to the inicial view and a menu with the options to log in, settings and about.\n\nLogged in indicator (Check icon).\n*/\n    \n\n    \n        \n\n  \n  \n    \n      Weather Angular\n      Home\n      Favourites\n\n      \n\n      \n        {{profile}}\n      \n\n      \n        Log in\n      \n\n      \n\n      check_circle\n\n\n      \n        more_vert\n      \n      \n\n        \n          Log in\n        \n\n        \n          Settings\n        \n\n        \n          Log out\n        \n\n        \n          About\n        \n\n\n      \n    \n  \n\n\n  There are no cities saved to favourites-->\n\n  \n    \n      \n        \n           {{savedCity.name}} \n        \n        Delete all\n\n      \n\n      \n        \n        \n        \n      \n    \n    \n      \n        This is going to delete all yor favourite cities when you log out. Are you sure? \n        \n          Yes\n          No\n        \n      \n    \n  \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '              Weather Angular      Home      Favourites                    {{profile}}                    Log in                  check_circle              more_vert                              Log in                          Settings                          Log out                          About                      There are no cities saved to favourites-->                               {{savedCity.name}}                 Delete all                                                                This is going to delete all yor favourite cities when you log out. Are you sure?                   Yes          No                    '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NavigationComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NewUserComponent.html":{"url":"components/NewUserComponent.html","title":"component - NewUserComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NewUserComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/new-user/new-user.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-new-user\n            \n\n            \n                styleUrls\n                new-user.component.css\n            \n\n\n\n            \n                templateUrl\n                ./new-user.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                form\n                            \n                            \n                                password2\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                launchForm\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                submit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(formBuilder: FormBuilder, logService: LogService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/new-user/new-user.component.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        logService\n                                                  \n                                                        \n                                                                    LogService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            launchForm\n                            \n                            \n                        \n                    \n                \n                \n                    \nlaunchForm()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:29\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:24\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submit\n                            \n                            \n                        \n                    \n                \n                \n                    \nsubmit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:39\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            form\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        form:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password2\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        password2:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:15\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { UserServer } from '../userServer';\nimport { Router } from \"@angular/router\";\nimport { FormGroup, FormBuilder, Validators, AbstractControl } from '@angular/forms';\nimport { LogService } from '../log.service';\n\n@Component({\n  selector: 'app-new-user',\n  templateUrl: './new-user.component.html',\n  styleUrls: ['./new-user.component.css']\n})\nexport class NewUserComponent implements OnInit {\n\n\n  password2: string;\n  form: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private logService: LogService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.launchForm();\n\n  }\n\n  launchForm() {\n    this.form = this.formBuilder.group({\n      username: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(20), Validators.required])],\n      password: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])],\n      password2: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])]\n    }, {\n        validator: PasswordValidation.MatchPassword\n      });\n  }\n\n  submit() {\n    if (this.form.valid) {\n\n      this.logService.createUser(this.form.value.username, this.form.value.password);\n\n    } else {\n      console.log(\"Not valid\");\n    }\n  }\n}\n\nexport class PasswordValidation {\n  //Validates that the password has been repeated correctly\n  static MatchPassword(AC: AbstractControl) {\n    let p1 = AC.get('password');\n    let p2 = AC.get('password2');\n    if (p1.value != p2.value) {\n      AC.get('password2').setErrors({ MatchPassword: true })\n    } else {\n      return null\n    }\n\n  }\n}\n\n/* This component simply launches a form to ask the log service to create a new user with the info adquired in the form */\n\n/* launchForm() {\n    validator : PasswordValidation;\n    this.form = new FormGroup({\n      username: new FormControl(this.username,[Validators.minLength(5), Validators.maxLength(20), Validators.required]),\n      password: new FormControl(this.password,[Validators.minLength(5), Validators.maxLength(25), Validators.required]),\n      password2: new FormControl(this.password2,[Validators.minLength(5), Validators.maxLength(25), Validators.required, validatePassword(this.form)])\n    }\n  }\n\n  submit() {\n    if (this.form.valid) {\n\n      this.logService.createUser(this.form.value.username, this.form.value.password);\n\n    } else {\n      console.log(\"Not valid\");\n    }\n  }\n}\n\nexport class PasswordValidation {\n  //Validates that the password has been repeated correctly\n  static MatchPassword(AC: AbstractControl) {\n    let p1 = AC.get('password');\n    let p2 = AC.get('password2');\n    if (p1.value != p2.value) {\n      AC.get('password2').setErrors({ MatchPassword: true })\n    } else {\n      return null\n    }\n\n  }\n}*/\n    \n\n    \n        \n  \n    \n      \n        \n          \n        \n      \n      \n        \n          \n        \n      \n      \n        \n          \n        \n      \n      \n        Go!\n      \n    \n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                      Go!            '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NewUserComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordValidation.html":{"url":"classes/PasswordValidation.html","title":"class - PasswordValidation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordValidation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/new-user/new-user.component.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                MatchPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            MatchPassword\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        MatchPassword(AC: AbstractControl)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:52\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        AC\n                                                        \n                                                                    AbstractControl\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { UserServer } from '../userServer';\nimport { Router } from \"@angular/router\";\nimport { FormGroup, FormBuilder, Validators, AbstractControl } from '@angular/forms';\nimport { LogService } from '../log.service';\n\n@Component({\n  selector: 'app-new-user',\n  templateUrl: './new-user.component.html',\n  styleUrls: ['./new-user.component.css']\n})\nexport class NewUserComponent implements OnInit {\n\n\n  password2: string;\n  form: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private logService: LogService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.launchForm();\n\n  }\n\n  launchForm() {\n    this.form = this.formBuilder.group({\n      username: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(20), Validators.required])],\n      password: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])],\n      password2: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])]\n    }, {\n        validator: PasswordValidation.MatchPassword\n      });\n  }\n\n  submit() {\n    if (this.form.valid) {\n\n      this.logService.createUser(this.form.value.username, this.form.value.password);\n\n    } else {\n      console.log(\"Not valid\");\n    }\n  }\n}\n\nexport class PasswordValidation {\n  //Validates that the password has been repeated correctly\n  static MatchPassword(AC: AbstractControl) {\n    let p1 = AC.get('password');\n    let p2 = AC.get('password2');\n    if (p1.value != p2.value) {\n      AC.get('password2').setErrors({ MatchPassword: true })\n    } else {\n      return null\n    }\n\n  }\n}\n\n/* This component simply launches a form to ask the log service to create a new user with the info adquired in the form */\n\n/* launchForm() {\n    validator : PasswordValidation;\n    this.form = new FormGroup({\n      username: new FormControl(this.username,[Validators.minLength(5), Validators.maxLength(20), Validators.required]),\n      password: new FormControl(this.password,[Validators.minLength(5), Validators.maxLength(25), Validators.required]),\n      password2: new FormControl(this.password2,[Validators.minLength(5), Validators.maxLength(25), Validators.required, validatePassword(this.form)])\n    }\n  }\n\n  submit() {\n    if (this.form.valid) {\n\n      this.logService.createUser(this.form.value.username, this.form.value.password);\n\n    } else {\n      console.log(\"Not valid\");\n    }\n  }\n}\n\nexport class PasswordValidation {\n  //Validates that the password has been repeated correctly\n  static MatchPassword(AC: AbstractControl) {\n    let p1 = AC.get('password');\n    let p2 = AC.get('password2');\n    if (p1.value != p2.value) {\n      AC.get('password2').setErrors({ MatchPassword: true })\n    } else {\n      return null\n    }\n\n  }\n}*/\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RainAndSnowService.html":{"url":"injectables/RainAndSnowService.html","title":"injectable - RainAndSnowService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  RainAndSnowService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/graphs/rainAndSnow/rain-and-snow.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                chart\n                            \n                            \n                                dates\n                            \n                            \n                                rain\n                            \n                            \n                                snow\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRainAndSnowChart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getRainAndSnowChart\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetRainAndSnowChart(forecast: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        forecast\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Chart\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        chart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dates\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dates:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rain\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rain:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        snow:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:12\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Forecast } from '../../city/data';\nimport { Chart } from 'chart.js';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RainAndSnowService {\n\n  chart: Chart;\n  rain: number[];\n  snow: number[];\n  dates: string[];\n\n  constructor() { }\n\n  getRainAndSnowChart(forecast: Array): Chart {\n\n    this.rain = forecast.map(item => {\n      return item.rain;\n    });\n\n    this.snow = forecast.map(item => {\n      return item.snow;\n    });\n\n    this.dates = forecast.map(item => {\n      return item.dt_txt;\n    });\n\n    this.chart = new Chart('rainAndSnow', {\n      type: 'bar',\n      data: {\n        labels: this.dates,\n        datasets: [\n          {\n            label: 'Rain',\n            data: this.rain,\n            borderColor: \"#0000ff\",\n            fill: false,\n            showLine: true,\n            backgroundColor: \"#0000ff\"\n          },\n          {\n            label: 'Snow',\n            data: this.snow,\n            borderColor: \"#ffffff\",\n            fill: false,\n            backgroundColor: \"#aaaaaa\"\n          }\n        ]\n      },\n      options: {\n\n        legend: {\n          display: true,\n          labels: {\n\n          }\n        },\n        scales: {\n          xAxes: [{\n            display: true\n          }],\n          yAxes: [{\n            display: true\n          }],\n        }\n      }\n    });\n\n    return this.chart;\n  }\n}\n\n/* This service gets the forecast vakues formated and returns a chart*/\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RespuestaForecast.html":{"url":"classes/RespuestaForecast.html","title":"class - RespuestaForecast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RespuestaForecast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/city/data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                list\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/city/data.ts:96\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            list\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        list:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:96\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Weather } from '../weather'\n\n\nexport class Data {\n    parameter: string;\n    value: string;\n\n    constructor() { }\n}\n/* Data is used to transfer information as an array of Data to the MatTable in city */\n\nexport class Forecast {\n\n    clouds: { all: number };\n    dt: number;\n    dt_txt: string;\n\n    main: {\n        grnd_level: number,\n        humidity: number,\n        pressure: number,\n        sea_level: number,\n        temp: number,\n        temp_kf: number,\n        temp_max: number,\n        temp_min: number\n    };\n\n    weather: Array;\n    /*\n        id\n        main\n        description\n        icon\n    */\n\n    wind: {\n        speed: number,\n        deg: number\n    }\n\n    rain: number;\n    snow: number;\n    constructor(element: Forecast) {\n        this.weather = new Array();\n\n        this.clouds = element.clouds;\n        this.dt = element.dt;\n        this.dt_txt = element.dt_txt;\n\n        this.main = {\n            grnd_level: element.main.grnd_level,\n            humidity: element.main.humidity,\n            pressure: element.main.pressure,\n            sea_level: element.main.sea_level,\n            temp: element.main.temp,\n            temp_kf: element.main.temp_kf,\n            temp_max: element.main.temp_max,\n            temp_min: element.main.temp_min\n        };\n\n\n        element.weather.forEach((weather: Weather) => {\n            const w = new Weather();\n            w.main = weather.main;\n            w.id = weather.id;\n            w.icon = weather.icon;\n            w.description = weather.description;\n\n            this.weather.push(w);\n        });\n\n        this.wind = {\n            speed: element.wind.speed,\n            deg: element.wind.deg\n        };\n\n        if (element.rain == undefined) {\n            //console.log(\"rain undefined\");\n        } else {\n            this.rain = element.rain[\"3h\"];\n        }\n\n        if (element.snow == undefined) {\n            //console.log(\"snow undefined\");\n        } else {\n            this.snow = element.snow[\"3h\"];\n        }\n\n    }\n}\n/* The object Forecast stores all the information about the weather provided by the service for a certain hour */\n\nexport class RespuestaForecast {\n\n    list: Array;\n\n    constructor() { }\n}\n\n/* \nData types used for sending data to the mat-table, Graph services and managing a server response containing the forecast for several hours.\n*/\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SavedCitiesService.html":{"url":"injectables/SavedCitiesService.html","title":"injectable - SavedCitiesService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  SavedCitiesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/saved-cities.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cities\n                            \n                            \n                                city\n                            \n                            \n                                updated\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteCities\n                            \n                            \n                                getSavedCities\n                            \n                            \n                                getUpdates\n                            \n                            \n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/saved-cities.service.ts:14\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteCities\n                            \n                            \n                        \n                    \n                \n                \n                    \ndeleteCities()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:52\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getSavedCities\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetSavedCities()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:23\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     SavedCity[]\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getUpdates\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetUpdates()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            save\n                            \n                            \n                        \n                    \n                \n                \n                    \nsave(cityToSave: SavedCity)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:39\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cityToSave\n                                                        \n                                                                    SavedCity\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cities\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cities:     SavedCity[]\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            city\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        city:     SavedCity\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        updated:     \n\n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:14\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { SavedCity } from './savedCity';\nimport { Observable, Subject } from 'rxjs'\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SavedCitiesService {\n\n  cities : SavedCity[];\n  city : SavedCity;\n  updated = new Subject();\n\n\n  constructor() { }\n\n  getUpdates(): Observable{\n    return > this.updated.asObservable();\n  }\n\n  getSavedCities(): SavedCity[] {\n    this.cities = [];\n    if(JSON.parse(localStorage.getItem(\"favouriteCities\")) === null){ //if there are no cities in the local storage\n      this.updated.next(this.cities); //return cities = [] from the Observable\n      return [];\n    }\n    JSON.parse(localStorage.getItem(\"favouriteCities\")).forEach(element => { //Get back from LS\n      this.city = new SavedCity(element.name, element.id, element.country, element.coord.lon, element.coord.lat);\n      this.cities.push(this.city);\n      this.updated.next(this.cities); //Return Array from the Observable\n      return this.cities;\n    });\n    \n   return this.cities; //Never reaches this instruction? Yes, surpridingly it does, and everything crashed when I commented it\n  }\n\n  save(cityToSave : SavedCity){\n    if(\n      this.cities.find(city => city.id === cityToSave.id) == undefined\n    ){\n    this.cities.push(cityToSave);\n    localStorage.setItem(\"favouriteCities\",JSON.stringify(this.cities));\n    this.updated.next(this.cities); //Metemos cities en el Subject\n  }else{\n    //console.log('This city has already been saved');\n  }\n\n  }\n\n  deleteCities(){\n    localStorage.removeItem(\"favouriteCities\");\n    this.getSavedCities(); //Send an updated observable with the cities available\n  }\n \n}\n /* \n This service manages the list of cities saved in the local storage.\n Returns an Observable with changes in the cities list an can modify or delete the list\n  */\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SavedCity.html":{"url":"classes/SavedCity.html","title":"class - SavedCity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  SavedCity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/savedCity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                coord\n                            \n                            \n                                country\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                sys\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                insertBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, id: string, country: string, lon: number, lat: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/savedCity.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        country\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        lon\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        lat\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            coord\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        coord:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/savedCity.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            country\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        country:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/savedCity.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/savedCity.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/savedCity.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sys\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sys:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/savedCity.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            insertBody\n                            \n                            \n                        \n                    \n                \n                \n                    \ninsertBody()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/savedCity.ts:24\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class SavedCity{\n    name: string;\n    id: string;\n    sys : {country : string};\n    country: string;\n    coord : {\n        lon : number,\n        lat: number\n    };\n\n    constructor(name: string, id: string, country: string = '', lon: number = 0, lat: number = 0) {\n        this.name = name;\n        this.id = id;\n        this.sys = {\n            country : country\n        };\n\n        this.coord = {\n            lon: lon,\n            lat: lat\n        };\n    }\n\n    insertBody(): string{\n        //Prepares a string to make an insert to the server\n        return `{\n            \"data\": {\n              \"ID\": ` + this.id + `,\n              \"COUNTRY\": \"` + this.sys.country + `\",\n              \"LAT\": ` + this.coord.lat + `,\n              \"LON\": ` + this.coord.lon + `,\n              \"NAME\": \"` + this.name + `\"\t\n            }\n            \n           }`;\n    }\n}\n//This object is for displaying and linking to the searched cities. It is used too for storing favourite cities. \n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServedCity.html":{"url":"classes/ServedCity.html","title":"class - ServedCity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServedCity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/servedCity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                COUNTRY\n                            \n                            \n                                ID\n                            \n                            \n                                LAT\n                            \n                            \n                                LON\n                            \n                            \n                                NAME\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, id: number, country: string, lon: number, lat: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/servedCity.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        country\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        lon\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        lat\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            COUNTRY\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        COUNTRY:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ID\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ID:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LAT\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        LAT:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LON\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        LON:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NAME\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        NAME:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ServedCity{\n    NAME: string;\n    ID: number;\n    COUNTRY: string;\n    LON : number;\n    LAT: number;\n    \n\n    constructor(name: string, id: number, country: string = '', lon: number = 0, lat: number = 0) {\n        this.NAME = name;\n        this.ID = id;\n        this.COUNTRY =  country;\n        this.LON = lon;\n        this.LAT = lat;\n        \n    }\n}\n\nexport class ServerResponse{\n    data: Array;\n}\n\n\n/* These are classes to give a type to the server DB results and avoid errors */\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServerResponse.html":{"url":"classes/ServerResponse.html","title":"class - ServerResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServerResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/servedCity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        data:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ServedCity{\n    NAME: string;\n    ID: number;\n    COUNTRY: string;\n    LON : number;\n    LAT: number;\n    \n\n    constructor(name: string, id: number, country: string = '', lon: number = 0, lat: number = 0) {\n        this.NAME = name;\n        this.ID = id;\n        this.COUNTRY =  country;\n        this.LON = lon;\n        this.LAT = lat;\n        \n    }\n}\n\nexport class ServerResponse{\n    data: Array;\n}\n\n\n/* These are classes to give a type to the server DB results and avoid errors */\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SettingsComponent.html":{"url":"components/SettingsComponent.html","title":"component - SettingsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SettingsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/settings/settings.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-settings\n            \n\n            \n                styleUrls\n                settings.component.css\n            \n\n\n\n            \n                templateUrl\n                ./settings.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentUser\n                            \n                            \n                                deleteAccount\n                            \n                            \n                                deleteAccount1\n                            \n                            \n                                formDelete\n                            \n                            \n                                formPassword\n                            \n                            \n                                logSubscription\n                            \n                            \n                                opened\n                            \n                            \n                                pwd\n                            \n                            \n                                valueTime\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildDeleteForm\n                            \n                            \n                                buildPsswdForm\n                            \n                            \n                                changePassword\n                            \n                            \n                                delAccnt\n                            \n                            \n                                isLogged\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                passwd\n                            \n                            \n                                setCurrentUser\n                            \n                            \n                                showDelete\n                            \n                            \n                                submitDelete\n                            \n                            \n                                submitPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(log: LogService, savedCitiesService: SavedCitiesService, router: Router, formBuilder: FormBuilder)\n                    \n                \n                        \n                            \n                                Defined in src/app/settings/settings.component.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        log\n                                                  \n                                                        \n                                                                    LogService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        savedCitiesService\n                                                  \n                                                        \n                                                                    SavedCitiesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            buildDeleteForm\n                            \n                            \n                        \n                    \n                \n                \n                    \nbuildDeleteForm()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:68\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            buildPsswdForm\n                            \n                            \n                        \n                    \n                \n                \n                    \nbuildPsswdForm()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:58\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changePassword\n                            \n                            \n                        \n                    \n                \n                \n                    \nchangePassword(passwd: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:85\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        passwd\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            delAccnt\n                            \n                            \n                        \n                    \n                \n                \n                    \ndelAccnt()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:117\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isLogged\n                            \n                            \n                        \n                    \n                \n                \n                    \nisLogged()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:75\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:45\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:35\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            passwd\n                            \n                            \n                        \n                    \n                \n                \n                    \npasswd()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:111\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setCurrentUser\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetCurrentUser()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:49\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            showDelete\n                            \n                            \n                        \n                    \n                \n                \n                    \nshowDelete()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:122\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitDelete\n                            \n                            \n                        \n                    \n                \n                \n                    \nsubmitDelete()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:97\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitPassword\n                            \n                            \n                        \n                    \n                \n                \n                    \nsubmitPassword()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:88\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUser\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        currentUser:     UserServer\n\n                    \n                \n                    \n                        \n                            Type :     UserServer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteAccount\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        deleteAccount:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteAccount1\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        deleteAccount1:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formDelete\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        formDelete:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formPassword\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        formPassword:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        logSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            opened\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        opened:     \n\n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pwd\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        pwd:     \n\n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valueTime\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        valueTime:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { LogService } from '../log.service';\nimport { UserServer } from '../userServer';\nimport { SavedCitiesService } from '../saved-cities.service';\nimport { Router } from \"@angular/router\";\nimport { Subscription } from 'rxjs';\nimport { FormGroup, FormBuilder, Validators, AbstractControl } from '@angular/forms';\nimport { PasswordValidation } from '../new-user/new-user.component';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.css']\n})\nexport class SettingsComponent implements OnInit {\n\n  currentUser: UserServer;\n  logSubscription: Subscription;\n  opened = true;\n  formPassword: FormGroup;\n  formDelete: FormGroup;\n  valueTime = 1;\n  pwd = true;\n  deleteAccount = false;\n  deleteAccount1 = false;\n\n\n  constructor(\n    private log: LogService,\n    private savedCitiesService: SavedCitiesService,\n    private router: Router,\n    private formBuilder: FormBuilder\n  ) { }\n\n  ngOnInit() {\n\n    this.setCurrentUser();\n\n    this.isLogged();\n\n    this.buildPsswdForm();\n\n    this.buildDeleteForm();\n  }\n  ngOnDestroy() {\n    this.logSubscription.unsubscribe();\n  }\n\n  setCurrentUser() {\n    if (this.log.currentUser === undefined) {\n      this.router.navigate(['initial']);\n    } else {\n      this.currentUser = this.log.currentUser;\n      this.currentUser.citiesList = this.savedCitiesService.getSavedCities();\n    }\n\n  }\n  buildPsswdForm() {\n    //Form to change password\n    this.formPassword = this.formBuilder.group({\n      password: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])],\n      password2: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])]\n    }, {\n        validator: PasswordValidation.MatchPassword\n      })\n  }\n\n  buildDeleteForm() {\n    //Form to delete account\n    this.formDelete = this.formBuilder.group({\n      password: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])]\n    });\n  }\n\n  isLogged() {\n    //If session expires or is closed redirect to home\n    this.logSubscription = this.log.getUpdates().subscribe(logged => {\n      if (!logged) {\n        this.router.navigate(['initial']);\n      }\n    });\n  }\n\n\n  changePassword(passwd: string) {\n    this.log.updatePassword(passwd);\n  }\n  submitPassword() {\n    if (this.formPassword.valid) {\n      this.changePassword(this.formPassword.value.password);\n      //Resets the form\n      this.buildPsswdForm();\n    }\n  }\n\n\n  submitDelete() {\n    if (this.formDelete.valid) {\n      let username = this.currentUser.username;\n      this.log.logIn(username, this.formDelete.value.password);\n      this.log.deleteUser(this.currentUser);\n      \n      console.log(\"Deleting user\");\n\n    }\n  }\n\n\n\n  //Methods to show different contents\n  passwd() {\n    this.pwd = true;\n    this.deleteAccount = false;\n    this.deleteAccount1 = false;\n  }\n  \n  delAccnt() {\n    this.pwd = false;\n    this.deleteAccount = false;\n    this.deleteAccount1 = true;\n  }\n  showDelete() {\n    this.pwd = false;\n    this.deleteAccount = true;\n    this.deleteAccount1 = false;\n  }\n}\n\n    \n\n    \n        \n  {{currentUser.username}} settings:\n\n\n\n\n\n  \n    \n      \n        Change password\n      \n    \n    \n      \n        Delete account\n      \n    \n  \n\n  \n\n\n    \n    \n      \n        \n          \n          \n            \n              \n            \n          \n          \n            \n              \n            \n          \n          \n            Go!\n          \n          \n        \n      \n    \n\n\n    \n    \n      \n      \n      \n        ¿Are you sure you want to permanently delete your account?\n      \n      \n      \n        \n          Yes, let's delete my account\n        \n        \n          No, I shouldn't do this\n        \n      \n      \n      \n    \n    \n      \n        \n          \n          \n            \n              \n            \n          \n          \n          \n          \n            Delete\n          \n          \n          \n        \n      \n    \n\n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  {{currentUser.username}} settings:                    Change password                            Delete account                                                                                                                                                                                        Go!                                                                        ¿Are you sure you want to permanently delete your account?                                    Yes, let\\'s delete my account                          No, I shouldn\\'t do this                                                                                                                                                              Delete                                                  '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SettingsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TemperatureService.html":{"url":"injectables/TemperatureService.html","title":"injectable - TemperatureService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  TemperatureService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/graphs/temperature/temperature.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                chart\n                            \n                            \n                                dates\n                            \n                            \n                                temperatures\n                            \n                            \n                                temperaturesMax\n                            \n                            \n                                temperaturesMin\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTemperatureChart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/graphs/temperature/temperature.service.ts:14\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getTemperatureChart\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetTemperatureChart(forecast: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        forecast\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Chart\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        chart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dates\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dates:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperatures\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperatures:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperaturesMax\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperaturesMax:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperaturesMin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperaturesMin:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:13\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Forecast } from '../../city/data';\nimport { Chart } from 'chart.js';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TemperatureService {\n\n  chart: Chart;\n  temperatures: number[];\n  temperaturesMax: number[];\n  temperaturesMin: number[];\n  dates: string[];\n\n  constructor() { }\n\n  getTemperatureChart(forecast: Array): Chart {\n    \n    this.temperatures = forecast.map(item => {\n      //console.log(item.main.temp);\n      return item.main.temp - 273.15;\n    });\n\n\n    this.temperaturesMax = forecast.map(item => {\n      //console.log(item.main.temp);\n      return item.main.temp_max - 273.15;\n    });\n\n    this.temperaturesMin = forecast.map(item => {\n      //console.log(item.main.temp);\n      return item.main.temp_min - 273.15;\n    });\n\n    this.dates = forecast.map(item => {\n      return item.dt_txt;\n    });\n\n    this.chart = new Chart('temperature', {\n      type: 'line',\n      data: {\n        labels: this.dates,\n        datasets: [\n          {\n            label: 'temperature',\n            data: this.temperatures,\n            borderColor: \"#3cba9f\",\n            fill: false,\n            showLine: true\n          },\n          {\n            label: 'Max temperature',\n            data: this.temperaturesMax,\n            borderColor: \"#ff0000\",\n            fill: false\n          },\n          {\n            label: 'Min temperature',\n            data: this.temperaturesMin,\n            borderColor: \"#0000FF\",\n            fill: false\n          }\n        ]\n      },\n      options: {\n\n        legend: {\n          display: true,\n          labels: {\n\n          }\n        },\n        scales: {\n          xAxes: [{\n            display: true\n          }],\n          yAxes: [{\n            display: true\n          }],\n        }\n      }\n    });\n\n    return this.chart;\n  }\n\n}\n\n/* This service gets the forecast vakues formated and returns a chart*/\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserServer.html":{"url":"classes/UserServer.html","title":"class - UserServer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserServer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/userServer.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                citiesId\n                            \n                            \n                                citiesList\n                            \n                            \n                                favouriteCities\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                display\n                            \n                            \n                                setFromList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/userServer.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesId\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesId:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesList:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            favouriteCities\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        favouriteCities:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        password:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        username:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            display\n                            \n                            \n                        \n                    \n                \n                \n                    \ndisplay()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/userServer.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setFromList\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetFromList(list: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/userServer.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        list\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { SavedCity } from \"./savedCity\";\n\nexport class UserServer {\n    username : string;\n    password : string;\n    favouriteCities : string;\n    citiesId : Array;\n    citiesList : Array;\n\n    constructor(){}\n    \n\n    display(): string{\n        return \"Username: \" + this.username + \"\\nPassword: \" + this.password + \"\\nCities ids: \" + this.citiesId;\n    }\n\n    setFromList(list : Array){\n        this.favouriteCities = list.map(item => item.id).join(',');\n    }\n}\n\n\n\n\n//New\nexport class CitiesResponse {\n    data : Array;\n}\n\nexport class CitiesResponseUnit {\n    CITIES : string;\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Weather.html":{"url":"classes/Weather.html","title":"class - Weather","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Weather\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/weather.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                icon\n                            \n                            \n                                id\n                            \n                            \n                                main\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/weather.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        description:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weather.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            icon\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        icon:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weather.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weather.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            main\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        main:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weather.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Weather {\n\n    id: number;\n    main: string;\n    description: string;\n    icon: string;\n\n    constructor(){}\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WeatherNow.html":{"url":"classes/WeatherNow.html","title":"class - WeatherNow","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  WeatherNow\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/weatherNow.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aux\n                            \n                            \n                                base\n                            \n                            \n                                clouds\n                            \n                            \n                                cod\n                            \n                            \n                                coord\n                            \n                            \n                                dt\n                            \n                            \n                                id\n                            \n                            \n                                main\n                            \n                            \n                                name\n                            \n                            \n                                rain\n                            \n                            \n                                result\n                            \n                            \n                                snow\n                            \n                            \n                                sys\n                            \n                            \n                                weather\n                            \n                            \n                                wind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAndSave\n                            \n                            \n                                displayValues\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/weatherNow.ts:29\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            aux\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        aux:     Data\n\n                    \n                \n                    \n                        \n                            Type :     Data\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            base\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        base:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clouds\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        clouds:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cod:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            coord\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        coord:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dt:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            main\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        main:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rain\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rain:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            result\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        result:     \n\n                    \n                \n                    \n                        \n                            Default value : new Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        snow:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sys\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sys:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            weather\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        weather:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        wind:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:16\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            checkAndSave\n                            \n                            \n                        \n                    \n                \n                \n                    \ncheckAndSave(text: string, variable: any, additional: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weatherNow.ts:174\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        text\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        variable\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        additional\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                ''\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            displayValues\n                            \n                            \n                        \n                    \n                \n                \n                    \ndisplayValues()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weatherNow.ts:102\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Array\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            set\n                            \n                            \n                        \n                    \n                \n                \n                    \nset(rx?: WeatherNow)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weatherNow.ts:35\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rx\n                                                        \n                                                                    WeatherNow\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Weather } from './weather';\nimport { Data } from './city/data'\n\nexport class WeatherNow {\n\n    coord: {lon: number, lat: number};\n    weather: Array;\n\n    /* id: number;\n    main: string;\n    description: string;\n    icon: string;*/\n\n    base: string;\n    main: {temp: number, pressure: number, humidity: number, temp_min: number, temp_max: number, sea_level: number, grnd_level: number};\n    wind: {speed: number, deg: number};\n    clouds: {all: number};\n    rain: number;\n    snow: number;\n    dt: number;\n    sys: {type: number, id: number, message: number, country: string, sunrise: number, sunset: number };\n    id: number;\n    name: string;\n    cod: number;\n\n    //Variables para el displayValues() : \n\n    result = new Array();\n    aux : Data; \n\n    constructor() {\n        this.weather = new Array();\n     }\n\n    set(rx? : WeatherNow){\n        \n        this.coord = {\n            lon: rx.coord.lon,\n            lat: rx.coord.lat\n        };\n        \n        rx.weather.forEach((w: Weather) => {\n            \n            let wthr = new Weather();\n            wthr = {\n                id: w.id,\n                main: w.main,\n                description: w.description,\n                icon: w.icon\n            };\n\n            this.weather.push(wthr);\n        });\n        \n        this.base = rx.base;\n        \n        this.main = {\n            temp: rx.main.temp,\n            pressure: rx.main.pressure,\n            humidity: rx.main.humidity,\n            temp_min: rx.main.temp_min,\n            temp_max: rx.main.temp_max,\n            sea_level: rx.main.sea_level,\n            grnd_level: rx.main.grnd_level\n        };\n        \n        this.wind = {\n            speed: rx.wind.speed,\n            deg: rx.wind.deg\n        };\n        \n\n        this.clouds = {\n            all: rx.clouds.all\n        };\n        if(rx.rain == undefined){\n        }else{\n        this.rain = rx.rain[\"3h\"];\n        }\n        if(rx.snow == undefined){\n        }else{\n        this.snow = rx.snow[\"3h\"];\n        }\n        this.dt = rx.dt;\n        \n        this.sys = {\n            type: rx.sys.type,\n            id: rx.sys.id,\n            message: rx.sys.message,\n            country: rx.sys.country,\n            sunrise: rx.sys.sunrise,\n            sunset: rx.sys.sunset\n        };\n        \n        this.id = rx.id;\n\n        this.name = rx.name;\n\n        this.cod = rx.cod;\n    }\n\n    displayValues(): Array {\n\n        this.result = [];\n\n        //coord\n        this.checkAndSave('longitude', this.coord.lon,'');\n        this.checkAndSave('latitude', this.coord.lat,'');\n\n      \n        //weather\n        let i = 0;\n        this.weather.forEach(w =>{\n            i++;\n            this.checkAndSave('id', w.id,'(' + i + ')');\n            this.checkAndSave('main', w.main,'(' + i + ')');\n            this.checkAndSave('description', w.description,'(' + i + ')');\n            this.checkAndSave('icon', w.icon,'(' + i + ')');\n            \n        });\n\n        //base\n        this.checkAndSave('base', this.base,'');\n        \n        //main\n        this.checkAndSave('temperature', this.main.temp - 273.15,' ℃');\n        this.checkAndSave('pressure', this.main.pressure,'');\n        this.checkAndSave('humidity', this.main.humidity,'');\n        this.checkAndSave('minimum temperature', this.main.temp_min - 273.15,' ℃');\n        this.checkAndSave('maximum temperature', this.main.temp_max - 273.15,' ℃');\n        this.checkAndSave('pressure at sea level', this.main.sea_level,'');\n        this.checkAndSave('pressure at ground level', this.main.grnd_level,'');\n        \n\n        //wind\n        this.checkAndSave('Wind speed', this.wind.speed,'');\n        this.checkAndSave('Wind direction', this.wind.deg,'');\n        \n        //clouds\n        this.checkAndSave('Clouds percentage', this.clouds.all,'%');\n        \n        //rain\n        this.checkAndSave('Rain volume in the last 3 hours', this.rain,' litres');\n        \n        //snow\n        this.checkAndSave('Snow volume in the last 3 hours', this.snow,' litres');\n       \n        //dt\n        this.checkAndSave('dt', this.dt,'');\n\n        //sys\n        this.checkAndSave('sys type', this.sys.type,'');\n        this.checkAndSave('sys id', this.sys.id,'');\n        this.checkAndSave('sys message', this.sys.message,'');\n        this.checkAndSave('sys country', this.sys.country,'');\n        this.checkAndSave('sys sunrise', this.sys.sunrise,'');\n        this.checkAndSave('sys sunset', this.sys.sunset,'');\n        \n        //id\n        this.checkAndSave('id', this.id,'');\n\n        //name\n        this.checkAndSave('name', this.name,'');\n\n        //cod\n        this.checkAndSave('cod', this.cod,'');\n        \n        \n        return this.result;\n        //result is an Array\n        //Data is an object with a parameter and a value\n    }\n\n    checkAndSave(text: string, variable: any, additional: string = ''){\n        \n        if(!( variable === undefined || variable === null)){\n            \n            this.aux = { //aux is a Data object\n                parameter: text,\n                value: variable + additional\n            };\n\n            this.result.push(this.aux);\n        }\n\n    }\n}\n\n/* This Object stores the information about a city's current weather received from the API and prepares it to being displayed in a mat table\n\n*/\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WeatherService.html":{"url":"injectables/WeatherService.html","title":"injectable - WeatherService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  WeatherService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/weather.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                weatherURL\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getForecast\n                            \n                            \n                                getWeather\n                            \n                            \n                                getWeatherByCityName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/weather.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getForecast\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetForecast(id: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weather.service.ts:26\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getWeather\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetWeather(id: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weather.service.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getWeatherByCityName\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetWeatherByCityName(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weather.service.ts:21\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            weatherURL\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        weatherURL:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'https://api.openweathermap.org/data/2.5/weather?q=Vigo&APPID=888b7bb3ed5f95fb9894b5c33589e6a6'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weather.service.ts:11\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs'\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n\n  private weatherURL = 'https://api.openweathermap.org/data/2.5/weather?q=Vigo&APPID=888b7bb3ed5f95fb9894b5c33589e6a6';\n\n\n\n  constructor(private http: HttpClient) { }\n\n  getWeather(id: string): Observable {\n    this.weatherURL = `https://api.openweathermap.org/data/2.5/weather?id=${id}&APPID=888b7bb3ed5f95fb9894b5c33589e6a6`;\n    return this.http.get(this.weatherURL);\n  }\n  getWeatherByCityName(name: string): Observable {\n    this.weatherURL = `https://api.openweathermap.org/data/2.5/weather?q=${name}&APPID=888b7bb3ed5f95fb9894b5c33589e6a6`;\n    return this.http.get(this.weatherURL);\n  }\n\n  getForecast(id: string): Observable {\n    this.weatherURL = `https://api.openweathermap.org/data/2.5/forecast?id=${id}&APPID=888b7bb3ed5f95fb9894b5c33589e6a6`;\n    return this.http.get(this.weatherURL);\n  }\n}\n/* Service that makes requests to the API \"OpenWeather\" and return its responses*/\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                    src/app/about/about.component.ts\n            \n            \n                component\n            \n            \n                AboutComponent\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                    src/app/app.component.ts\n            \n            \n                component\n            \n            \n                AppComponent\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                    src/app/cities-server.service.ts\n            \n            \n                injectable\n            \n            \n                CitiesServerService\n            \n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                    src/app/city/city.component.ts\n            \n            \n                component\n            \n            \n                CityComponent\n            \n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                    src/app/city/data.ts\n            \n            \n                class\n            \n            \n                Data\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                    src/app/city/data.ts\n            \n            \n                class\n            \n            \n                Forecast\n            \n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                    src/app/city/data.ts\n            \n            \n                class\n            \n            \n                RespuestaForecast\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                    src/app/forecast-values.service.ts\n            \n            \n                injectable\n            \n            \n                ForecastValuesService\n            \n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                    src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts\n            \n            \n                injectable\n            \n            \n                CloudsAndWindService\n            \n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                    src/app/graphs/graphs.component.ts\n            \n            \n                component\n            \n            \n                GraphsComponent\n            \n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                    src/app/graphs/rainAndSnow/rain-and-snow.service.ts\n            \n            \n                injectable\n            \n            \n                RainAndSnowService\n            \n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                    src/app/graphs/temperature/temperature.service.ts\n            \n            \n                injectable\n            \n            \n                TemperatureService\n            \n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                    src/app/initial/initial.component.ts\n            \n            \n                component\n            \n            \n                InitialComponent\n            \n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                    src/app/interceptor/interceptor.component.ts\n            \n            \n                component\n            \n            \n                InterceptorComponent\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                    src/app/log.service.ts\n            \n            \n                injectable\n            \n            \n                LogService\n            \n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                    src/app/loggin-dialog/loggin-dialog.component.ts\n            \n            \n                component\n            \n            \n                LogginDialogComponent\n            \n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                    src/app/navigation/navigation.component.ts\n            \n            \n                component\n            \n            \n                NavigationComponent\n            \n            \n                0 %\n                (0/26)\n            \n        \n        \n            \n                \n                    src/app/new-user/new-user.component.ts\n            \n            \n                component\n            \n            \n                NewUserComponent\n            \n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                    src/app/new-user/new-user.component.ts\n            \n            \n                class\n            \n            \n                PasswordValidation\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                    src/app/saved-cities.service.ts\n            \n            \n                injectable\n            \n            \n                SavedCitiesService\n            \n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                    src/app/savedCity.ts\n            \n            \n                class\n            \n            \n                SavedCity\n            \n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                    src/app/servedCity.ts\n            \n            \n                class\n            \n            \n                ServedCity\n            \n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                    src/app/servedCity.ts\n            \n            \n                class\n            \n            \n                ServerResponse\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                    src/app/settings/settings.component.ts\n            \n            \n                component\n            \n            \n                SettingsComponent\n            \n            \n                0 %\n                (0/23)\n            \n        \n        \n            \n                \n                    src/app/userServer.ts\n            \n            \n                class\n            \n            \n                CitiesResponse\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                    src/app/userServer.ts\n            \n            \n                class\n            \n            \n                CitiesResponseUnit\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                    src/app/userServer.ts\n            \n            \n                class\n            \n            \n                UserServer\n            \n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                    src/app/weather.service.ts\n            \n            \n                injectable\n            \n            \n                WeatherService\n            \n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                    src/app/weather.ts\n            \n            \n                class\n            \n            \n                Weather\n            \n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                    src/app/weatherNow.ts\n            \n            \n                class\n            \n            \n                WeatherNow\n            \n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                    src/environments/environment.prod.ts\n            \n            \n                variable\n            \n            \n                environment\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                    src/environments/environment.ts\n            \n            \n                variable\n            \n            \n                environment\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                    src/test.ts\n            \n            \n                variable\n            \n            \n                context\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                    src/test.ts\n            \n            \n                variable\n            \n            \n                require\n            \n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^6.0.4\n        \n            @angular/cdk : ^6.2.1\n        \n            @angular/common : ^6.0.4\n        \n            @angular/compiler : ^6.0.4\n        \n            @angular/core : ^6.0.4\n        \n            @angular/forms : ^6.0.4\n        \n            @angular/http : ^6.0.4\n        \n            @angular/material : ^6.2.1\n        \n            @angular/platform-browser : ^6.0.4\n        \n            @angular/platform-browser-dynamic : ^6.0.4\n        \n            @angular/pwa : ^0.6.8\n        \n            @angular/router : ^6.0.4\n        \n            @angular/service-worker : ^6.0.3\n        \n            @compodoc/compodoc : ^1.1.3\n        \n            @material/fab : ^0.36.1\n        \n            chart.js : ^2.7.2\n        \n            core-js : ^2.5.4\n        \n            hammerjs : ^2.0.8\n        \n            nvm : 0.0.4\n        \n            rxjs : ^6.0.0\n        \n            zone.js : ^0.8.26\n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nWeatherAngular\nThis project was generated with Angular CLI version 6.0.5.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MaterialModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n            \n                \n                    \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAboutComponent\n\nAboutComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAboutComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nCityComponent\n\nCityComponent\n\nAppModule -->\n\nCityComponent->AppModule\n\n\n\n\n\nGraphsComponent\n\nGraphsComponent\n\nAppModule -->\n\nGraphsComponent->AppModule\n\n\n\n\n\nInitialComponent\n\nInitialComponent\n\nAppModule -->\n\nInitialComponent->AppModule\n\n\n\n\n\nInterceptorComponent\n\nInterceptorComponent\n\nAppModule -->\n\nInterceptorComponent->AppModule\n\n\n\n\n\nLogginDialogComponent\n\nLogginDialogComponent\n\nAppModule -->\n\nLogginDialogComponent->AppModule\n\n\n\n\n\nNavigationComponent\n\nNavigationComponent\n\nAppModule -->\n\nNavigationComponent->AppModule\n\n\n\n\n\nNewUserComponent\n\nNewUserComponent\n\nAppModule -->\n\nNewUserComponent->AppModule\n\n\n\n\n\nSettingsComponent\n\nSettingsComponent\n\nAppModule -->\n\nSettingsComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n                \n                \n                \n                    Zoom in\n                    Reset\n                    Zoom out\n                \n            \n\n    \n            \n                \n                    \n                        \n                        \n                            3 modules\n                        \n                    \n                \n            \n            \n                \n                    \n                        \n                        10 components\n                    \n                \n            \n            \n                \n                    \n                        \n                        8 injectables\n                    \n                \n            \n            \n                \n                    \n                        \n                        12 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        \n                            8 routes\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            context   (src/.../test.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            require   (src/.../test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        context:     \n\n                    \n                \n                    \n                        \n                            Default value : require.context('./', true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        require:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        environment:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        environment:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n\n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
