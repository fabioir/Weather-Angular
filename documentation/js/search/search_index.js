var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/components/AboutComponent.html",[0,0.405,1,0.987]],["body/components/AboutComponent.html",[0,0.747,1,1.691,2,0.216,3,0.281,4,1.454,5,1.454,6,1.454,7,0.154,8,2.986,9,1.958,10,2.377,11,1.454,12,2.57,13,2.283,14,1.827,15,4.756,16,1.827,17,4.756,18,0.248,19,0.928,20,2.543,21,0.591,22,0.425,23,3.532,24,3.532,25,0.594,26,0.026,27,1.11,28,0.351,29,0.594,30,0.184,31,0.137,32,1.357,33,2.359,34,2.627,35,2.986,36,2.627,37,1.597,38,3.532,39,3.532,40,5.377,41,3.532,42,1.966,43,3.532,44,4.546,45,1.966,46,2.888,47,4.864,48,1.827,49,2.648,50,4.756,51,3.176,52,4.756,53,3.176,54,4.021,55,2.648,56,3.538,57,4.021,58,1.224,59,1.224,60,1.708,61,0.996,62,3.842,63,3.176,64,4.021,65,4.864,66,3.538,67,4.756,68,4.756,69,4.021,70,4.756,71,4.756,72,2.442,73,4.021,74,4.756,75,4.756,76,4.756,77,4.756,78,4.756,79,4.756,80,4.756,81,4.756,82,1.038,83,1.958,84,1.708,85,1.827,86,2.369,87,1.454,88,0.627,89,1.454,90,1.11,91,1.454,92,1.038,93,1.454,94,1.038,95,1.454,96,1.038,97,1.454,98,1.11,99,1.454,100,1.11,101,1.357,102,1.454,103,1.11,104,1.454,105,0.972,106,0.351,107,1.454,108,1.038,109,1.454,110,0.018,111,0.018]],["title/components/AppComponent.html",[0,0.405,90,1.055]],["body/components/AppComponent.html",[0,0.769,1,1.248,2,0.259,3,0.222,4,1.748,5,1.748,6,1.748,7,0.185,11,1.748,12,2.64,13,2.307,14,2.061,16,2.061,18,0.298,22,0.38,26,0.026,28,0.422,29,0.714,30,0.222,31,0.165,37,1.426,49,2.986,60,1.926,82,1.248,83,2.208,84,1.926,85,2.061,86,2.543,87,1.748,88,0.708,89,1.748,90,1.94,91,1.748,92,1.248,93,1.748,94,1.248,95,1.748,96,1.248,97,1.748,98,1.334,99,1.748,100,1.334,101,1.632,102,1.748,103,1.334,104,1.748,105,1.168,106,0.422,107,1.748,108,1.248,109,1.748,110,0.02,111,0.02,112,3.59,113,2.208,114,5.363,115,5.363,116,0.647,117,6.175,118,0.77,119,0.338,120,1.334,121,1.093,122,4.246]],["title/modules/AppModule.html",[123,1.484,124,2.243]],["body/modules/AppModule.html",[0,0.39,1,1.77,2,0.197,3,0.169,7,0.141,13,1.085,26,0.026,28,0.687,29,0.543,30,0.233,31,0.125,46,1.961,49,1.798,55,2.858,82,0.95,90,2.07,92,1.77,94,1.77,96,1.77,98,1.939,100,1.977,101,1.241,103,1.892,105,1.656,106,0.321,108,1.77,110,0.017,111,0.017,113,1.33,123,1.978,124,4.66,125,2.157,126,3.818,127,4.341,128,2.731,129,2.731,130,2.731,131,2.731,132,3.656,133,3.656,134,3.783,135,2.403,136,2.157,137,3.23,138,4.474,139,4.474,140,2.403,141,2.403,142,3.328,143,3.23,144,2.731,145,4.474,146,2.491,147,4.474,148,2.491,149,3.23,150,2.731,151,3.23,152,3.23,153,2.731,154,3.23,155,2.731,156,2.731,157,2.403,158,3.23,159,2.157,160,2.731,161,3.783,162,4.474,163,1.536,164,4.474,165,1.798,166,2.403,167,2.731,168,2.731,169,3.23,170,4.474,171,3.23,172,3.23,173,1.961,174,3.23,175,3.23,176,2.731,177,3.23,178,3.23,179,3.23,180,1.16,181,2.157,182,3.23,183,3.23,184,3.23,185,3.23]],["title/modules/AppRoutingModule.html",[123,1.484,132,2.039]],["body/modules/AppRoutingModule.html",[0,0.798,1,1.525,2,0.246,3,0.21,7,0.175,26,0.027,28,0.679,29,0.678,30,0.271,31,0.156,32,1.548,37,1.352,46,2.445,92,1.525,94,1.686,96,1.525,105,1.427,106,0.401,108,1.525,110,0.019,111,0.019,123,2.292,132,3.149,140,2.996,142,3.857,144,3.405,150,3.405,153,3.405,163,1.916,165,2.242,166,2.996,167,3.405,168,3.405,186,4.027,187,4.027,188,3.405,189,2.69,190,5.185,191,3.11,192,1.658,193,5.185,194,4.027,195,4.384,196,5.185,197,4.918,198,4.027,199,4.384,200,4.027,201,4.027,202,4.027,203,2.068,204,1.916,205,4.027,206,4.027,207,2.068,208,2.69,209,2.996,210,3.405,211,4.027,212,4.027,213,4.027,214,3.405]],["title/classes/CitiesResponse.html",[31,0.13,215,1.869]],["body/classes/CitiesResponse.html",[2,0.277,3,0.237,7,0.197,18,0.318,21,0.499,22,0.406,25,0.763,26,0.026,28,0.451,30,0.316,31,0.245,58,1.167,61,1.325,106,0.451,110,0.021,111,0.021,116,0.675,118,0.932,119,0.361,215,3.111,216,3.029,217,1.485,218,4.535,219,1.876,220,2.004,221,2.658,222,2.157,223,3.373,224,3.373,225,2.525,226,1.743,227,3.373,228,3.373,229,3.373,230,3.373,231,1.248,232,3.373,233,3.373,234,3.373,235,3.373,236,3.373,237,2.525]],["title/classes/CitiesResponseUnit.html",[31,0.13,237,1.869]],["body/classes/CitiesResponseUnit.html",[2,0.277,3,0.237,7,0.197,18,0.318,21,0.499,22,0.406,25,0.763,26,0.026,28,0.451,30,0.316,31,0.245,58,1.627,61,0.95,106,0.451,110,0.021,111,0.021,116,0.675,118,0.962,119,0.361,215,2.525,216,3.029,217,1.42,219,1.876,220,2.004,221,2.658,222,2.157,223,3.373,224,3.373,225,2.525,226,1.743,227,3.373,228,3.373,229,3.373,230,3.373,231,1.248,232,3.373,233,3.373,234,3.373,235,3.373,236,3.373,237,3.111,238,4.535]],["title/injectables/CitiesServerService.html",[239,0.808,240,2.039]],["body/injectables/CitiesServerService.html",[2,0.134,3,0.114,7,0.095,18,0.154,19,0.656,21,0.37,22,0.545,25,1.06,26,0.027,27,0.687,28,0.494,29,0.368,30,0.114,31,0.085,32,0.84,48,0.84,53,1.46,58,1.349,59,0.865,69,1.849,88,0.814,106,0.543,110,0.02,111,0.012,113,0.9,116,0.406,118,0.945,119,0.502,120,1.287,121,1.405,146,1.217,180,1.207,181,1.46,204,1.04,217,1.369,219,1.667,225,2.919,231,1.266,239,0.986,240,2.042,241,5.219,242,1.849,243,4.193,244,3.89,245,3.89,246,3.363,247,3.363,248,3.363,249,2.362,250,3.363,251,3.363,252,3.465,253,1.849,254,3.072,255,2.414,256,3.363,257,0.85,258,0.991,259,2.246,260,3.363,261,6.519,262,2.186,263,3.363,264,1.647,265,2.186,266,3.363,267,2.186,268,2.186,269,3.89,270,3.363,271,2.186,272,3.363,273,2.186,274,3.363,275,2.186,276,2.843,277,2.843,278,2.186,279,2.843,280,3.363,281,2.186,282,2.501,283,2.186,284,3.316,285,1.217,286,1.872,287,1.123,288,1.217,289,1.04,290,1.292,291,1.217,292,2.843,293,1.207,294,1.385,295,2.737,296,4.6,297,3.89,298,3.072,299,4.6,300,4.6,301,2.186,302,4.6,303,2.186,304,4.097,305,3.465,306,2.186,307,1.46,308,3.363,309,2.042,310,2.186,311,1.849,312,2.186,313,5.243,314,3.316,315,2.186,316,2.186,317,3.363,318,2.186,319,3.363,320,2.186,321,3.363,322,3.363,323,3.363,324,3.363,325,3.363,326,2.186,327,2.186,328,3.363,329,3.363,330,3.363,331,2.501,332,3.363,333,3.363,334,3.363,335,2.042,336,2.042,337,2.042,338,2.843,339,3.363,340,3.363,341,3.363,342,3.363,343,3.363,344,3.363,345,2.186,346,0.9,347,2.186,348,1.328,349,2.186,350,2.186,351,2.186,352,2.186,353,2.186,354,2.186,355,2.186,356,2.186,357,2.186,358,1.849,359,0.9]],["title/components/CityComponent.html",[0,0.405,92,0.987]],["body/components/CityComponent.html",[0,0.684,1,0.715,2,0.297,3,0.127,4,1.502,5,1.002,6,1.002,7,0.106,9,1.502,10,1.933,11,1.002,12,2.399,13,2.096,14,1.401,16,1.401,18,0.171,19,0.712,20,2.148,21,0.401,22,0.558,25,0.736,26,0.026,27,1.374,28,0.613,29,0.409,30,0.127,31,0.094,32,1.401,37,0.817,42,2.705,45,1.354,48,0.935,58,1.406,59,1.25,60,1.962,61,1.187,82,0.715,83,1.502,84,1.309,85,1.401,86,2.001,87,1.002,88,0.641,89,1.002,90,0.764,91,1.002,92,1.429,93,1.002,94,1.072,95,1.002,96,0.715,97,1.002,98,0.764,99,1.002,100,0.764,101,0.935,102,1.002,103,0.764,104,1.002,105,0.669,106,0.564,107,1.002,108,0.715,109,1.002,110,0.014,111,0.014,116,0.44,119,0.435,120,1.374,121,1.562,163,1.734,189,1.625,191,2.246,192,1.002,197,1.81,203,1.249,214,3.699,217,1.169,219,1.748,226,0.935,231,1.203,255,2.504,257,0.85,258,0.441,287,2.246,288,1.354,290,2,294,1.502,295,1.625,346,1.502,348,2.214,360,2.057,361,3.647,362,3.647,363,5.205,364,5.205,365,4.859,366,2.241,367,3.872,368,4.859,369,4.859,370,3.79,371,4.859,372,4.859,373,2.057,374,4.108,375,2.909,376,3.441,377,3.254,378,3.614,379,3.647,380,2.433,381,2.433,382,2.433,383,2.433,384,2.433,385,2.433,386,2.433,387,2.599,388,2.433,389,2.433,390,2.433,391,1.625,392,2.057,393,2.057,394,2.433,395,1.872,396,1.81,397,1.249,398,2.057,399,2.433,400,2.433,401,2.433,402,2.03,403,2.436,404,2.95,405,1.81,406,2.03,407,2.214,408,2.057,409,2.057,410,2.433,411,2.433,412,2.433,413,2.433,414,2.433,415,2.057,416,2.433,417,2.433,418,2.433,419,2.433,420,2.433,421,1.477,422,2.433,423,2.433,424,2.433,425,2.433,426,2.057,427,2.433,428,2.057,429,2.433,430,2.433,431,2.433,432,2.433,433,2.433,434,2.433,435,2.433,436,2.433,437,2.433,438,2.433,439,2.433,440,1.81,441,2.057,442,1.81,443,2.433,444,2.057,445,1.81,446,2.433,447,1.81,448,2.057,449,2.433,450,1.81,451,1.625,452,3.647,453,3.647,454,3.647,455,3.647]],["title/injectables/CloudsAndWindService.html",[239,0.808,456,2.243]],["body/injectables/CloudsAndWindService.html",[2,0.211,3,0.181,7,0.151,18,0.243,19,0.915,21,0.585,22,0.55,25,1.034,26,0.027,28,0.53,29,0.582,30,0.181,31,0.134,59,0.891,61,1.115,82,1.018,88,0.457,106,0.344,110,0.017,111,0.017,113,1.425,116,0.566,118,0.764,119,0.501,180,2.141,217,1.196,226,2.192,231,1.291,239,1.28,257,0.539,258,0.851,264,1.932,289,1.646,291,2.612,294,1.932,366,1.911,402,1.927,456,3.134,457,5.317,458,2.927,459,4.418,460,3.501,461,3.811,462,3.501,463,4.692,464,3.462,465,4.692,466,3.462,467,3.462,468,3.462,469,3.462,470,3.462,471,1.927,472,2.102,473,2.849,474,3.959,475,3.462,476,2.849,477,3.462,478,3.49,479,2.575,480,3.49,481,3.462,482,2.575,483,4.244,484,2.575,485,2.102,486,3.49,487,3.462,488,3.967,489,2.927,490,2.927,491,4.692,492,2.927,493,4.692,494,2.575,495,2.575,496,2.575,497,2.575,498,4.692,499,3.967,500,2.232,501,3.967,502,3.462,503,3.462,504,2.575,505,2.575]],["title/classes/Data.html",[31,0.13,61,0.704]],["body/classes/Data.html",[2,0.213,3,0.182,7,0.152,18,0.245,21,0.629,22,0.477,26,0.027,28,0.347,30,0.279,31,0.222,32,1.338,45,2.623,48,1.81,55,1.939,58,0.896,59,1.212,60,2.212,61,1.291,72,1.788,106,0.469,110,0.017,111,0.017,116,0.569,118,0.904,119,0.425,121,1.472,203,1.788,207,1.788,217,1.285,231,0.958,257,0.89,264,2.122,293,2.054,346,1.434,359,1.434,366,2.054,387,1.657,395,1.788,406,1.939,421,2.115,451,2.326,460,1.939,462,1.939,473,2.115,476,2.115,485,2.861,506,2.326,507,4.711,508,3.483,509,2.591,510,2.591,511,2.326,512,2.591,513,2.861,514,3.147,515,3.147,516,3.147,517,3.147,518,3.147,519,3.504,520,3.147,521,3.147,522,1.939,523,3.147,524,1.939,525,1.939,526,2.591,527,2.326,528,2.591,529,2.326,530,2.591,531,2.591,532,2.591,533,2.326,534,2.591,535,2.591,536,2.591,537,2.591,538,2.591,539,2.591,540,2.591,541,2.591,542,2.591,543,2.591,544,2.326,545,2.591,546,2.326,547,2.591,548,2.326,549,2.591,550,2.326,551,2.591,552,2.591,553,2.591,554,2.591,555,2.591,556,2.591,557,2.115,558,2.591,559,2.591,560,2.591,561,2.115,562,2.591,563,2.591,564,3.147,565,1.788,566,2.326,567,2.326,568,2.115]],["title/classes/Forecast.html",[31,0.13,366,1.206]],["body/classes/Forecast.html",[2,0.193,3,0.165,7,0.137,18,0.221,21,0.557,22,0.568,26,0.026,28,0.314,30,0.264,31,0.213,32,1.212,45,2.45,48,1.691,55,1.756,58,0.812,59,1.132,60,2.282,61,1.209,72,1.619,84,1.132,88,0.416,106,0.438,110,0.016,111,0.016,116,0.531,118,0.828,119,0.536,121,0.812,203,1.619,207,1.619,217,1.342,231,0.868,257,0.685,258,0.572,264,2.146,293,1.969,346,1.298,359,1.298,366,2.202,387,1.5,395,1.619,406,1.756,421,1.915,451,2.106,460,3.053,462,3.053,473,1.915,476,1.915,485,2.672,506,2.106,509,2.346,510,2.346,511,3.663,512,4.08,513,3.503,514,2.939,515,2.939,516,2.939,517,2.939,518,2.939,519,3.273,520,2.939,521,2.939,522,1.756,523,2.939,524,3.053,525,3.053,526,3.273,527,2.106,528,2.346,529,2.106,530,2.346,531,2.346,532,2.346,533,2.106,534,2.346,535,2.346,536,2.346,537,2.346,538,2.346,539,2.346,540,2.346,541,2.346,542,2.346,543,2.346,544,2.106,545,2.346,546,2.106,547,2.346,548,2.106,549,2.346,550,2.106,551,2.346,552,2.346,553,2.346,554,2.346,555,2.346,556,2.346,557,1.915,558,2.346,559,2.346,560,2.346,561,1.915,562,2.346,563,2.346,564,2.939,565,1.619,566,2.106,567,2.106,568,1.915,569,4.4,570,4.445,571,3.153,572,3.153,573,3.153,574,3.153,575,3.153,576,3.153,577,3.153]],["title/injectables/ForecastValuesService.html",[239,0.808,376,2.039]],["body/injectables/ForecastValuesService.html",[2,0.23,3,0.196,7,0.164,18,0.264,19,0.968,21,0.61,22,0.59,25,1.096,26,0.026,27,1.558,28,0.587,29,0.633,30,0.196,31,0.146,46,2.283,48,1.445,58,1.62,88,0.654,106,0.493,110,0.018,111,0.018,113,1.548,116,0.599,119,0.442,120,1.558,121,1.578,217,1.442,219,2.235,239,1.335,257,0.772,258,0.899,289,1.788,346,1.548,366,1.78,376,3.011,404,2.283,407,3.723,471,2.093,578,5.628,579,3.179,580,4.987,581,4.388,582,4.388,583,5.898,584,4.958,585,4.958,586,3.76,587,3.76,588,3.76,589,3.089,590,3.76,591,4.958,592,3.76,593,4.958,594,3.76,595,3.76,596,3.76,597,4.127,598,3.76,599,1.788,600,2.797,601,4.193,602,3.76,603,3.688,604,2.797,605,3.76,606,3.76]],["title/components/GraphsComponent.html",[0,0.405,94,0.987]],["body/components/GraphsComponent.html",[0,0.633,1,0.644,2,0.134,3,0.114,4,0.901,5,0.901,6,0.901,7,0.095,9,1.386,10,1.812,11,0.901,12,2.343,13,2.047,14,1.293,16,1.293,18,0.154,19,0.657,20,2.034,21,0.37,22,0.58,25,0.774,26,0.027,27,1.446,28,0.575,29,0.368,30,0.114,31,0.085,32,0.841,37,0.735,42,1.218,58,1.451,59,0.866,62,1.462,82,0.644,83,1.386,84,1.208,85,1.293,86,1.895,87,0.901,88,0.541,89,0.901,90,0.688,91,0.901,92,0.644,93,0.901,94,1.353,95,0.901,96,0.644,97,0.901,98,0.688,99,0.901,100,0.688,101,0.841,102,0.901,103,0.688,104,0.901,105,0.602,106,0.218,107,0.901,108,0.644,109,0.901,110,0.012,111,0.012,116,0.406,118,0.83,119,0.497,120,1.288,121,1.278,191,2.363,192,0.901,203,1.728,217,0.921,231,0.602,257,0.341,258,0.397,264,1.98,290,2.016,293,2.262,366,1.472,374,3.892,375,2.805,376,3.185,391,1.462,393,1.851,395,1.728,397,1.124,404,1.329,407,1.329,408,1.851,409,1.851,426,1.851,428,1.851,456,3.649,459,4.123,460,1.873,461,3.074,462,1.873,471,1.218,472,1.329,524,2.92,525,2.92,580,3.892,601,4.435,603,1.628,607,1.851,608,3.365,609,3.365,610,4.602,611,5.245,612,5.245,613,4.602,614,5.245,615,4.602,616,4.392,617,3.892,618,3.892,619,4.602,620,4.602,621,2.188,622,3.649,623,3.649,624,3.365,625,2.188,626,2.188,627,2.188,628,2.188,629,2.188,630,2.188,631,2.188,632,2.188,633,2.188,634,2.188,635,2.188,636,2.188,637,2.188,638,2.188,639,2.188,640,2.188,641,2.188,642,2.188,643,2.188,644,2.188,645,2.188,646,2.188,647,2.188,648,2.188,649,5.463,650,2.845,651,5.463,652,2.188,653,5.463,654,2.188,655,2.188,656,2.188,657,2.188,658,4.602,659,4.1,660,4.602,661,4.602,662,4.1,663,2.188,664,1.462,665,2.188,666,2.188,667,2.188,668,1.218]],["title/components/InitialComponent.html",[0,0.405,96,0.987]],["body/components/InitialComponent.html",[0,0.615,1,0.598,2,0.124,3,0.166,4,0.838,5,0.838,6,0.838,7,0.089,9,1.31,10,1.731,11,0.838,12,2.302,13,2.04,14,1.222,16,1.222,18,0.143,19,0.764,20,1.957,21,0.35,22,0.573,25,0.952,26,0.026,27,1.672,28,0.529,29,0.342,30,0.106,31,0.079,32,0.782,33,1.359,34,1.514,35,1.721,36,2.366,37,0.683,42,1.771,46,1.932,49,1.771,53,2.125,54,2.69,57,3.743,58,1.649,59,0.524,60,1.142,62,2.125,63,2.125,82,0.598,83,1.31,84,1.142,85,1.222,86,1.823,87,0.838,88,0.634,89,0.838,90,0.639,91,0.838,92,0.598,93,0.838,94,0.598,95,0.838,96,1.302,97,0.838,98,0.639,99,0.838,100,0.639,101,0.782,102,0.838,103,0.639,104,0.838,105,0.56,106,0.441,107,0.838,108,0.598,109,0.838,110,0.018,111,0.012,116,0.384,118,0.831,119,0.461,120,1.672,121,1.456,146,1.133,173,1.932,176,2.69,180,0.731,181,1.359,199,3.311,207,1.045,209,1.514,217,1.195,219,1.849,225,2.674,226,0.782,240,2.688,252,1.721,254,2.957,255,0.9,257,0.317,258,0.71,259,2.615,284,1.359,287,1.045,288,1.133,290,1.505,291,1.771,292,4.306,293,0.731,294,1.978,305,1.721,307,1.359,309,1.236,314,4.33,346,0.838,359,1.31,367,1.514,370,1.932,375,2.615,391,1.359,396,1.514,403,1.359,444,2.69,447,2.913,500,1.513,565,1.633,581,3.293,664,2.125,669,1.721,670,3.181,671,3.181,672,5.505,673,4.427,674,4.427,675,5.092,676,4.427,677,4.427,678,4.427,679,4.427,680,4.427,681,4.427,682,4.427,683,4.427,684,3.743,685,3.916,686,3.181,687,2.035,688,3.916,689,3.181,690,2.035,691,3.181,692,2.035,693,3.181,694,2.035,695,2.035,696,2.035,697,2.035,698,2.035,699,2.035,700,2.035,701,2.035,702,2.035,703,3.181,704,2.035,705,2.035,706,2.035,707,2.035,708,2.035,709,4.499,710,2.035,711,2.035,712,2.035,713,1.721,714,3.181,715,2.035,716,2.035,717,2.035,718,2.035,719,2.035,720,2.035,721,2.035,722,1.721,723,1.721,724,1.721,725,1.721,726,1.721,727,2.035,728,2.035,729,2.035,730,3.181,731,2.035,732,1.721,733,2.035,734,2.035,735,3.311,736,3.916,737,3.181,738,3.181,739,3.916,740,2.69,741,3.181,742,2.035,743,2.035,744,2.035,745,2.035,746,2.035,747,2.035,748,3.181,749,2.035,750,2.035,751,2.035,752,2.035,753,2.035,754,3.181,755,2.035,756,2.035,757,1.721,758,2.035,759,1.721,760,1.721,761,1.514,762,2.035,763,2.035,764,2.035,765,2.035,766,2.035,767,3.181,768,2.035,769,2.035,770,2.035,771,2.035,772,2.035,773,3.916,774,2.035,775,2.035,776,2.035,777,2.035,778,2.035,779,1.721,780,2.035,781,3.181,782,3.916,783,3.916,784,3.181,785,3.181,786,3.181,787,2.125,788,3.181,789,3.181,790,3.181,791,3.181]],["title/components/InterceptorComponent.html",[0,0.405,98,1.055]],["body/components/InterceptorComponent.html",[0,0.733,1,1.074,2,0.223,3,0.191,4,1.503,5,1.503,6,1.503,7,0.159,9,2.002,11,1.503,12,2.583,13,2.257,14,1.869,16,1.869,18,0.256,19,0.949,21,0.401,22,0.435,25,0.981,26,0.026,28,0.58,29,0.614,30,0.191,31,0.142,37,1.226,82,1.074,83,2.002,84,1.746,85,1.869,86,2.401,87,1.503,88,0.769,89,1.503,90,1.147,91,1.503,92,1.074,93,1.503,94,1.074,95,1.503,96,1.074,97,1.503,98,1.832,99,1.503,100,1.147,101,1.403,102,1.503,103,1.147,104,1.503,105,1.005,106,0.363,107,1.503,108,1.074,109,1.503,110,0.018,111,0.018,119,0.436,146,2.033,243,2.716,257,0.757,258,0.882,282,2.716,298,2.439,307,3.248,589,3.044,599,1.737,668,2.707,792,3.087,793,5.467,794,5.83,795,4.863,796,4.863,797,4.863,798,3.651,799,2.773,800,3.651,801,4.112,802,4.863,803,4.93,804,5.467,805,5.83,806,3.651,807,3.651,808,2.217,809,3.087,810,3.651,811,3.651,812,5.467,813,4.863,814,3.651,815,3.087,816,3.651,817,3.651,818,2.716,819,3.651,820,5.467,821,3.651]],["title/injectables/LogService.html",[239,0.808,799,1.597]],["body/injectables/LogService.html",[2,0.177,3,0.094,7,0.079,18,0.127,19,0.566,21,0.319,22,0.562,25,1.007,26,0.027,27,1.597,28,0.579,29,0.304,30,0.094,31,0.07,32,0.695,33,1.936,37,0.608,48,0.695,51,2.422,53,1.209,58,1.52,59,1.167,61,0.379,62,1.209,88,0.671,106,0.526,110,0.011,111,0.011,113,0.745,116,0.35,118,0.952,119,0.477,120,1.521,121,1.167,146,1.007,163,0.861,192,0.745,204,2.513,207,0.929,215,1.007,217,0.814,219,0.973,220,2.47,221,2.716,222,2.809,225,2.941,237,1.007,239,0.872,240,3.087,243,3.6,244,3.506,245,3.506,249,2.129,254,2.769,255,2.139,257,0.753,258,0.878,259,2.422,276,4.093,277,2.451,279,3.506,282,2.697,284,2.422,285,1.007,286,1.614,287,2.129,288,1.007,289,0.861,290,1.743,291,1.614,293,1.041,295,3.395,297,2.451,298,1.209,309,1.76,311,3.836,338,1.53,348,1.76,358,1.53,359,1.868,375,0.929,377,2.697,378,3.084,391,1.209,397,1.488,404,1.76,407,2.755,440,3.781,445,1.346,565,0.929,568,1.099,582,3.084,589,2.525,597,3.6,599,0.861,600,1.346,668,2.308,713,1.53,779,1.53,799,1.379,801,3.506,803,1.53,815,2.451,818,2.697,822,1.53,823,3.506,824,4.146,825,4.146,826,2.898,827,4.146,828,2.898,829,4.146,830,2.898,831,4.146,832,2.898,833,4.146,834,1.809,835,2.83,836,2.898,837,1.809,838,2.898,839,1.809,840,2.898,841,1.809,842,2.898,843,1.809,844,1.809,845,1.809,846,2.898,847,1.809,848,1.809,849,2.898,850,1.809,851,1.809,852,1.809,853,2.898,854,1.809,855,1.809,856,1.809,857,1.809,858,1.809,859,1.809,860,1.809,861,1.809,862,1.53,863,1.809,864,3.506,865,2.898,866,1.809,867,2.898,868,3.066,869,3.066,870,1.809,871,1.809,872,1.809,873,4.146,874,1.53,875,1.809,876,1.809,877,2.898,878,1.809,879,1.809,880,4.146,881,1.809,882,2.451,883,1.809,884,2.156,885,1.809,886,1.809,887,1.809,888,1.809,889,1.809,890,2.898,891,3.506,892,1.809,893,2.898,894,2.898,895,2.898,896,2.898,897,2.898,898,2.898,899,2.898,900,1.53,901,1.809,902,3.506,903,2.898,904,2.898,905,2.898,906,2.898,907,2.898,908,2.898,909,3.626,910,1.809,911,2.898,912,1.809,913,4.536,914,3.626,915,1.809,916,1.809,917,1.809,918,1.809,919,1.809,920,1.809,921,1.53,922,1.809,923,2.898,924,1.809,925,1.809,926,1.809,927,1.809,928,1.809,929,1.809,930,2.898,931,1.809,932,1.809,933,1.809,934,1.809,935,1.809,936,4.146,937,1.809,938,1.809,939,1.53,940,2.898,941,2.898,942,1.809,943,1.809,944,1.809,945,1.809,946,1.809,947,1.809,948,1.53,949,1.809,950,1.809,951,1.099,952,1.809,953,1.809,954,1.809]],["title/components/LogginDialogComponent.html",[0,0.405,100,1.055]],["body/components/LogginDialogComponent.html",[0,0.65,1,0.774,2,0.161,3,0.137,4,1.084,5,1.084,6,1.084,7,0.115,9,1.592,10,2.026,11,1.084,12,2.438,13,2.131,14,1.486,16,1.486,18,0.185,19,0.755,20,2.233,21,0.425,22,0.573,25,0.946,26,0.026,27,1.587,28,0.503,29,0.443,30,0.137,31,0.102,37,0.884,61,0.552,82,0.774,83,1.592,84,1.389,85,1.486,86,2.08,87,1.084,88,0.605,89,1.084,90,0.827,91,1.084,92,0.774,93,1.084,94,0.774,95,1.084,96,0.774,97,1.084,98,0.827,99,1.084,100,1.587,101,2.234,102,1.084,103,0.827,104,1.084,105,0.725,106,0.503,107,1.084,108,0.774,109,1.084,110,0.014,111,0.014,116,0.467,118,0.874,119,0.429,120,1.587,121,1.3,148,1.466,159,4.317,163,1.253,173,1.599,180,1.814,191,1.352,192,1.084,204,1.253,208,1.759,221,2.894,222,2.765,249,2.763,257,0.41,258,0.478,290,1.761,293,1.814,294,2.506,450,2.877,482,1.959,522,2.812,568,1.599,735,2.227,787,3.373,835,3.236,955,5.465,956,2.227,957,3.876,958,3.867,959,3.867,960,3.267,961,5.051,962,5.051,963,5.051,964,5.051,965,5.051,966,5.051,967,3.757,968,2.227,969,3.757,970,3.876,971,4.271,972,3.867,973,2.633,974,2.633,975,2.633,976,2.633,977,2.633,978,3.593,979,2.633,980,2.633,981,2.633,982,2.633,983,2.633,984,2.633,985,2.583,986,2.633,987,2.633,988,1.959,989,2.633,990,2.633,991,1.959,992,2.583,993,2.633,994,2.633,995,1.959,996,2.633,997,3.867,998,3.867,999,3.867,1000,3.867,1001,2.633,1002,2.153,1003,2.633,1004,2.633,1005,2.633,1006,2.633,1007,2.633,1008,2.633,1009,2.633,1010,2.633,1011,4.583,1012,4.583,1013,2.633,1014,1.959,1015,2.633,1016,3.867,1017,3.867,1018,3.867,1019,3.867]],["title/modules/MaterialModule.html",[123,1.484,133,2.039]],["body/modules/MaterialModule.html",[0,0.518,2,0.262,3,0.224,7,0.187,26,0.026,28,0.649,29,0.722,30,0.308,31,0.166,84,1.542,110,0.02,111,0.02,123,1.898,126,3.194,133,3.588,142,4.018,161,4.997,163,2.043,188,4.567,189,2.868,195,4.997,732,3.631,1020,4.294,1021,5.909,1022,5.909,1023,5.909,1024,5.909,1025,5.909,1026,5.909,1027,5.909,1028,5.909,1029,5.909,1030,5.909,1031,5.909,1032,5.909,1033,5.909,1034,5.909,1035,5.909,1036,5.909,1037,5.909,1038,5.909,1039,5.909,1040,5.909,1041,4.294,1042,4.294,1043,4.294,1044,4.294,1045,4.294,1046,4.294]],["title/components/NavigationComponent.html",[0,0.405,103,1.055]],["body/components/NavigationComponent.html",[0,0.605,1,0.577,2,0.189,3,0.102,4,0.808,5,0.808,6,0.808,7,0.085,9,1.273,10,1.691,11,0.808,12,2.282,13,1.994,14,1.188,16,1.188,18,0.138,19,0.746,20,1.918,21,0.34,22,0.587,25,0.983,26,0.027,27,1.8,28,0.557,29,0.33,30,0.102,31,0.076,32,0.754,33,1.311,34,1.46,36,2.3,37,1.585,42,1.093,49,1.721,56,1.46,58,1.351,59,0.505,60,1.11,61,0.411,66,4.481,72,1.008,82,0.577,83,1.273,84,1.11,85,1.188,86,1.787,87,0.808,88,0.505,89,0.808,90,0.617,91,0.808,92,0.577,93,0.808,94,0.577,95,0.808,96,0.577,97,0.808,98,0.617,99,0.808,100,0.972,101,1.188,102,0.808,103,1.364,104,0.808,105,0.54,106,0.195,107,0.808,108,0.577,109,0.808,110,0.011,111,0.011,116,0.373,118,0.678,119,0.465,120,1.576,121,1.291,136,2.899,159,1.311,160,1.66,163,0.934,180,1.11,192,0.808,197,1.46,204,0.934,208,2.065,219,1.879,226,0.754,249,3.224,255,2.404,257,0.306,258,0.561,269,2.615,287,2.229,288,1.093,290,1.668,293,1.558,294,2.539,295,1.311,348,3.045,373,1.66,377,2.846,378,3.228,396,1.46,397,1.008,398,1.66,440,1.46,441,1.66,450,1.46,500,0.934,581,2.846,589,1.093,599,0.934,668,2.629,684,3.67,709,3.67,740,1.66,757,2.615,759,1.66,799,2.496,808,1.192,818,1.46,835,2.792,862,1.66,874,1.66,882,2.615,891,2.615,900,1.66,921,1.66,951,1.878,957,4.598,960,1.192,970,3.67,971,3.67,1002,1.721,1014,1.46,1047,1.66,1048,3.235,1049,3.092,1050,3.092,1051,4.34,1052,3.825,1053,4.34,1054,4.34,1055,3.67,1056,4.34,1057,4.34,1058,5.015,1059,4.34,1060,4.34,1061,3.992,1062,4.34,1063,3.67,1064,4.34,1065,4.34,1066,4.34,1067,4.34,1068,4.34,1069,3.67,1070,5.015,1071,3.092,1072,1.963,1073,1.963,1074,1.963,1075,1.963,1076,1.963,1077,1.963,1078,1.963,1079,1.963,1080,1.963,1081,1.963,1082,1.963,1083,1.963,1084,1.963,1085,1.963,1086,1.963,1087,1.963,1088,1.963,1089,1.963,1090,1.963,1091,1.963,1092,1.963,1093,1.963,1094,1.963,1095,1.963,1096,1.963,1097,1.963,1098,1.963,1099,1.963,1100,1.963,1101,1.963,1102,1.46,1103,1.963,1104,1.963,1105,1.963,1106,1.66,1107,5.015,1108,1.963,1109,1.963,1110,1.66,1111,1.963,1112,3.092,1113,1.963,1114,1.963,1115,1.963,1116,1.963,1117,1.963,1118,4.34,1119,3.825,1120,1.963,1121,4.34,1122,4.34,1123,1.963,1124,1.963,1125,1.963,1126,1.963,1127,1.963,1128,1.963,1129,1.963,1130,1.963,1131,1.963,1132,1.963,1133,3.092,1134,1.963,1135,1.963,1136,2.615,1137,1.963,1138,1.963,1139,1.963,1140,1.963,1141,1.963,1142,1.963,1143,1.66,1144,2.615,1145,3.092,1146,3.092,1147,3.092,1148,3.092,1149,2.615,1150,2.065]],["title/components/NewUserComponent.html",[0,0.405,105,0.924]],["body/components/NewUserComponent.html",[0,0.693,1,0.821,2,0.246,3,0.146,4,1.15,5,1.15,6,1.15,7,0.122,9,1.662,10,2.095,11,1.15,12,2.466,13,2.155,14,1.551,16,1.551,18,0.196,19,0.788,20,2.295,21,0.444,22,0.513,25,0.927,26,0.027,27,1.489,28,0.548,29,0.47,30,0.247,31,0.184,37,0.938,51,1.865,59,0.719,82,0.821,83,1.662,84,1.449,85,1.551,86,2.138,87,1.15,88,0.625,89,1.15,90,0.877,91,1.15,92,0.821,93,1.15,94,0.821,95,1.15,96,0.821,97,1.15,98,0.877,99,1.15,100,0.877,101,1.073,102,1.15,103,0.877,104,1.15,105,1.429,106,0.639,107,1.15,108,0.821,109,1.15,110,0.015,111,0.015,116,0.487,118,0.68,119,0.378,148,1.555,165,3.296,173,1.696,180,1.449,192,1.15,204,2.254,220,1.784,221,1.92,222,2.47,249,1.434,257,0.435,258,0.506,290,1.821,403,1.865,442,2.077,604,2.077,761,3.002,799,2.816,808,1.696,835,3.296,951,2.451,960,3.486,967,4.097,968,2.361,969,3.834,978,3.679,985,3.954,988,3.002,991,3.002,992,3.834,995,3.002,1002,2.247,1151,4.403,1152,2.077,1153,3.413,1154,3.413,1155,4.27,1156,4.658,1157,4.036,1158,2.792,1159,2.792,1160,2.792,1161,2.792,1162,3.526,1163,2.361,1164,2.077,1165,3.526,1166,3.863,1167,2.077,1168,3.413,1169,3.413,1170,3.413,1171,2.878,1172,3.413,1173,3.413,1174,3.413,1175,3.413,1176,3.413,1177,3.413,1178,3.413,1179,3.413,1180,3.413,1181,3.413,1182,3.413,1183,2.361,1184,2.361,1185,2.361,1186,2.361]],["title/classes/PasswordValidation.html",[31,0.13,1171,2.039]],["body/classes/PasswordValidation.html",[0,0.635,2,0.282,3,0.177,7,0.147,9,1.393,10,2.042,12,1.3,13,1.136,14,1.3,16,1.3,18,0.238,19,0.901,20,1.496,21,0.372,22,0.303,25,0.885,26,0.027,28,0.589,29,0.569,30,0.274,31,0.219,51,2.26,59,0.871,88,0.446,105,0.931,106,0.633,110,0.017,111,0.017,118,0.486,119,0.27,148,1.884,165,2.572,173,2.055,180,1.659,192,1.393,204,2.197,220,2.042,221,2.197,222,2.688,249,1.738,257,0.527,258,0.614,290,2.021,403,2.26,442,2.517,604,2.517,761,3.437,799,2.502,808,2.055,835,2.929,960,3.194,967,3.437,969,3.513,978,3.513,985,4.175,988,3.437,991,3.437,992,4.079,995,3.437,1002,2.572,1151,3.437,1152,2.517,1153,2.861,1154,2.861,1155,3.913,1156,3.907,1162,4.401,1163,2.861,1164,2.517,1165,3.913,1166,4.204,1167,2.517,1168,3.907,1169,3.907,1170,3.907,1171,3.432,1172,3.907,1173,4.779,1174,4.448,1175,3.907,1176,3.907,1177,3.907,1178,3.907,1179,3.907,1180,3.907,1181,3.907,1182,4.779,1183,2.861,1184,2.861,1185,2.861,1186,2.861,1187,3.384,1188,3.384]],["title/injectables/RainAndSnowService.html",[239,0.808,623,2.243]],["body/injectables/RainAndSnowService.html",[2,0.222,3,0.189,7,0.158,18,0.255,19,0.945,21,0.599,22,0.557,25,1.049,26,0.027,28,0.542,29,0.61,30,0.189,31,0.141,59,0.934,61,1.142,82,1.067,88,0.479,106,0.361,110,0.018,111,0.018,113,1.494,116,0.585,118,0.782,119,0.497,180,2.088,217,1.224,226,2.094,239,1.311,257,0.565,258,0.878,264,1.958,289,1.726,291,2.696,294,1.994,366,1.957,402,2.02,459,4.454,461,3.884,471,2.02,472,2.203,474,4.054,478,3.602,479,2.699,480,3.602,482,2.699,483,4.326,484,2.699,486,3.602,488,4.094,489,3.068,494,2.699,495,2.699,496,2.699,497,2.699,504,2.699,505,2.699,524,3.373,525,3.373,557,2.94,561,2.94,623,3.234,1189,5.381,1190,3.068,1191,4.842,1192,4.842,1193,4.842,1194,3.628,1195,3.628,1196,3.628,1197,3.628,1198,3.628,1199,3.628,1200,3.628,1201,4.094,1202,3.628]],["title/classes/RespuestaForecast.html",[31,0.13,395,1.724]],["body/classes/RespuestaForecast.html",[2,0.216,3,0.184,7,0.154,18,0.248,21,0.632,22,0.425,26,0.027,28,0.351,30,0.281,31,0.223,32,1.357,45,2.648,48,1.827,55,1.966,58,0.909,59,1.224,60,2.221,61,1.258,72,1.813,106,0.473,110,0.018,111,0.018,116,0.574,118,0.772,119,0.379,121,0.909,203,1.813,207,1.813,217,1.389,231,0.972,257,0.55,264,2.126,293,2.066,346,1.454,359,1.454,366,2.066,387,1.68,395,2.442,406,1.966,421,2.145,451,2.359,460,1.966,462,1.966,473,2.145,476,2.145,485,2.888,506,2.359,509,2.627,510,2.627,511,2.359,512,2.627,513,2.888,514,3.176,515,3.176,516,3.176,517,3.176,518,3.176,519,3.538,520,3.176,521,3.176,522,1.966,523,3.176,524,1.966,525,1.966,526,2.627,527,2.359,528,2.627,529,2.359,530,2.627,531,2.627,532,2.627,533,2.359,534,2.627,535,2.627,536,2.627,537,2.627,538,2.627,539,2.627,540,2.627,541,2.627,542,2.627,543,2.627,544,2.359,545,2.627,546,2.359,547,2.627,548,2.359,549,2.627,550,2.359,551,2.627,552,2.627,553,2.627,554,2.627,555,2.627,556,2.627,557,2.145,558,2.627,559,2.627,560,2.627,561,2.145,562,2.627,563,2.627,564,3.176,565,2.954,566,2.359,567,2.359,568,2.145,1203,4.756]],["title/injectables/SavedCitiesService.html",[239,0.808,255,1.484]],["body/injectables/SavedCitiesService.html",[2,0.213,3,0.182,7,0.152,18,0.245,19,0.919,21,0.587,22,0.573,25,1.114,26,0.026,27,1.48,28,0.531,29,0.586,30,0.182,31,0.135,58,1.746,59,0.896,88,0.459,106,0.531,110,0.017,111,0.017,113,1.434,116,0.569,119,0.425,120,1.094,121,0.896,217,0.782,219,2.255,239,1.284,255,2.082,257,0.542,258,0.632,287,2.937,289,1.657,293,1.251,331,2.591,397,1.788,407,3.629,447,3.504,448,3.984,565,2.741,566,2.326,567,2.326,582,4.255,589,3.506,597,4.255,599,1.657,600,2.591,603,4.255,668,1.939,722,2.945,723,2.945,724,2.945,725,2.945,726,2.945,760,2.945,939,2.945,1002,1.939,1061,4.836,1150,2.326,1204,5.489,1205,2.945,1206,5.72,1207,4.711,1208,3.483,1209,3.483,1210,3.483,1211,4.711,1212,3.483,1213,3.483,1214,3.483,1215,3.483,1216,3.483,1217,5.339,1218,3.483,1219,3.483,1220,3.483,1221,3.483,1222,3.483,1223,3.483,1224,3.483,1225,3.483,1226,3.483,1227,3.483,1228,3.483,1229,3.483,1230,3.483,1231,3.483,1232,3.483,1233,3.483,1234,3.483,1235,3.483,1236,3.483,1237,3.483,1238,2.945,1239,3.483]],["title/classes/SavedCity.html",[31,0.13,219,1.128]],["body/classes/SavedCity.html",[2,0.222,3,0.19,7,0.158,18,0.256,19,0.947,21,0.4,22,0.57,25,0.816,26,0.027,30,0.19,31,0.188,48,1.399,58,1.249,61,0.763,88,0.853,110,0.018,111,0.018,116,0.586,118,0.999,119,0.527,181,2.431,219,1.629,226,1.399,231,1.802,257,0.566,258,0.66,264,2.033,314,2.431,335,4.051,336,3.867,337,3.867,346,1.499,348,2.21,359,1.499,387,1.731,405,2.707,500,2.308,570,4.331,664,2.431,1136,3.077,1240,3.077,1241,4.923,1242,4.923,1243,5.823,1244,3.609,1245,3.639,1246,3.639,1247,3.639,1248,3.639,1249,3.639,1250,3.639,1251,3.639,1252,3.241,1253,3.241,1254,3.077,1255,3.077,1256,3.077,1257,3.077,1258,3.077]],["title/classes/ServedCity.html",[31,0.13,286,1.869]],["body/classes/ServedCity.html",[2,0.249,3,0.212,7,0.177,18,0.286,21,0.447,22,0.575,26,0.026,30,0.272,31,0.236,61,0.853,88,0.863,110,0.021,111,0.019,116,0.63,118,0.98,119,0.521,217,0.914,231,1.823,257,0.634,258,0.738,264,2.191,285,2.266,286,2.907,309,2.472,335,4.023,336,4.023,337,4.023,359,1.676,500,2.483,884,3.028,1102,3.028,1244,3.884,1252,2.719,1253,2.719,1259,3.028,1260,5.221,1261,4.071,1262,4.071,1263,4.071,1264,4.071,1265,3.442,1266,3.442,1267,3.442,1268,3.442]],["title/classes/ServerResponse.html",[31,0.13,285,1.869]],["body/classes/ServerResponse.html",[2,0.281,3,0.24,7,0.2,18,0.323,22,0.411,26,0.026,30,0.294,31,0.246,61,1.331,88,0.744,110,0.023,111,0.021,116,0.68,118,0.912,119,0.449,217,1.369,231,1.677,264,2.084,285,3.138,286,2.56,309,2.793,335,3.701,336,3.701,337,3.701,359,1.894,500,2.681,884,3.421,1102,3.421,1244,3.421,1252,3.072,1253,3.072,1259,3.421,1265,3.889,1266,3.889,1267,3.889,1268,3.889,1269,4.599]],["title/components/SettingsComponent.html",[0,0.405,108,0.987]],["body/components/SettingsComponent.html",[0,0.607,1,0.661,2,0.137,3,0.117,4,0.926,5,0.926,6,0.926,7,0.098,9,1.415,10,1.843,11,0.926,12,2.357,13,2.06,14,1.321,16,1.321,18,0.158,19,0.814,20,2.064,21,0.378,22,0.591,25,1.032,26,0.027,27,1.928,28,0.566,29,0.378,30,0.117,31,0.087,37,1.689,42,1.252,56,1.673,66,3.473,82,0.661,83,1.415,84,1.234,85,1.321,86,1.922,87,0.926,88,0.616,89,0.926,90,0.707,91,0.926,92,0.661,93,0.926,94,0.661,95,0.926,96,0.661,97,0.926,98,0.707,99,0.926,100,0.707,101,0.864,102,0.926,103,0.707,104,0.926,105,0.619,106,0.342,107,0.926,108,1.373,109,0.926,110,0.013,111,0.013,116,0.415,118,0.599,119,0.44,120,1.58,121,1.294,135,1.673,148,1.252,165,1.252,166,1.673,180,1.981,192,0.926,204,1.07,209,1.673,210,1.902,220,2.223,221,1.07,222,2.392,249,2.141,255,2.438,257,0.535,258,0.623,264,1.08,287,1.155,288,1.252,290,1.794,293,0.808,294,2.449,298,1.502,397,2.141,599,1.07,668,3.246,799,2.221,808,1.366,823,3.948,835,3.071,864,1.902,868,1.902,869,1.902,902,1.902,948,1.902,951,2.087,960,2.532,969,3.684,978,3.684,985,2.295,992,2.785,1014,1.673,1048,1.902,1055,3.948,1063,3.948,1069,3.948,1106,1.902,1110,1.902,1144,1.902,1149,2.906,1150,2.295,1155,1.673,1162,1.673,1164,2.556,1165,3.102,1166,3.102,1167,1.673,1171,1.366,1270,1.902,1271,3.436,1272,3.436,1273,4.669,1274,4.669,1275,4.669,1276,4.669,1277,4.669,1278,4.669,1279,4.669,1280,4.669,1281,3.436,1282,4.669,1283,4.669,1284,5.029,1285,4.669,1286,4.669,1287,4.669,1288,4.669,1289,2.249,1290,3.436,1291,2.249,1292,2.249,1293,3.436,1294,2.249,1295,2.249,1296,2.249,1297,2.249,1298,2.249,1299,2.249,1300,2.249,1301,2.249,1302,2.249,1303,2.249,1304,2.249,1305,2.249,1306,2.249,1307,2.249,1308,2.249,1309,2.249,1310,2.249,1311,3.436,1312,2.249,1313,2.249,1314,2.249,1315,3.436,1316,2.249,1317,3.436,1318,3.436,1319,2.249,1320,5.516,1321,2.249,1322,2.249,1323,2.249,1324,2.249,1325,2.249,1326,2.249,1327,2.249,1328,2.249,1329,2.249,1330,2.249,1331,4.17,1332,4.17,1333,4.17,1334,3.436,1335,3.436,1336,3.436,1337,2.249,1338,2.249,1339,2.249,1340,2.249]],["title/injectables/TemperatureService.html",[239,0.808,622,2.243]],["body/injectables/TemperatureService.html",[2,0.213,3,0.182,7,0.152,18,0.245,19,0.919,21,0.587,22,0.563,25,1.06,26,0.027,28,0.531,29,0.586,30,0.182,31,0.135,59,0.896,61,1.198,82,1.024,88,0.459,106,0.347,110,0.017,111,0.017,113,1.434,116,0.569,118,0.766,119,0.502,180,2.054,217,1.199,226,2.052,239,1.284,257,0.542,258,0.855,264,2.04,289,1.657,291,2.972,294,2.198,366,1.917,402,1.939,459,4.423,461,3.82,471,1.939,472,2.115,474,4.255,478,3.504,479,2.591,480,3.504,483,4.445,484,2.591,486,3.971,490,2.945,494,2.591,495,2.591,496,2.591,497,2.591,499,2.945,501,2.945,504,2.591,505,2.591,616,4.685,617,4.836,618,4.836,622,3.147,650,3.984,1201,2.945,1341,2.945,1342,4.711,1343,4.711,1344,4.711,1345,3.483,1346,3.483,1347,3.483,1348,3.483,1349,3.483,1350,5.339,1351,3.483,1352,4.514,1353,4.711,1354,3.483,1355,4.711,1356,3.483,1357,3.483,1358,3.483,1359,3.483]],["title/classes/UserServer.html",[31,0.13,220,1.484]],["body/classes/UserServer.html",[2,0.245,3,0.209,7,0.174,18,0.281,19,1.008,21,0.629,22,0.591,25,0.962,26,0.026,27,1.259,28,0.399,30,0.298,31,0.234,58,1.031,61,0.839,88,0.528,106,0.399,110,0.019,111,0.019,116,0.624,118,0.978,119,0.51,215,2.23,216,2.676,217,1.511,219,1.735,220,2.284,221,2.976,222,2.875,223,4.496,224,4.496,225,3.365,226,2.322,227,2.98,228,2.98,229,2.98,230,2.98,231,1.102,232,2.98,233,3.844,234,2.98,235,2.98,236,2.98,237,2.23,257,0.623,258,0.727,565,2.057,1360,5.167,1361,5.167,1362,4.006,1363,4.006,1364,4.006,1365,4.006,1366,4.006,1367,4.006]],["title/classes/Weather.html",[31,0.13,60,1.206]],["body/classes/Weather.html",[2,0.292,3,0.25,7,0.208,18,0.336,21,0.682,22,0.589,26,0.025,30,0.25,31,0.224,60,2.073,72,3.306,110,0.021,111,0.021,116,0.697,118,0.988,119,0.513,231,1.772,264,1.948,513,3.91,522,3.585,1368,4.045,1369,5.773,1370,4.783,1371,4.783,1372,4.783]],["title/classes/WeatherNow.html",[31,0.13,370,2.039]],["body/classes/WeatherNow.html",[2,0.137,3,0.117,7,0.098,18,0.158,19,0.669,21,0.458,22,0.582,25,0.784,26,0.026,27,1.077,28,0.341,30,0.117,31,0.133,37,1.151,45,1.249,60,2.134,61,1.11,63,1.498,72,1.761,85,0.862,88,0.727,106,0.464,110,0.02,111,0.013,116,0.414,118,0.916,119,0.538,120,1.077,121,1.2,217,1.309,226,0.862,231,1.635,257,0.726,258,0.622,264,2.141,293,1.495,331,1.668,335,2.528,336,2.082,337,2.082,346,0.923,367,1.668,370,3.05,387,1.98,404,1.362,405,1.668,406,1.249,415,1.896,421,1.362,460,2.796,462,2.796,471,1.249,473,1.362,476,1.362,485,2.528,492,1.896,500,1.067,511,3.355,513,3.346,514,2.29,515,2.29,516,2.29,517,2.29,518,2.29,520,2.29,521,2.29,522,1.909,523,2.29,524,2.796,525,2.796,527,1.498,529,2.29,533,1.498,544,2.29,546,2.29,548,2.29,550,2.29,557,2.082,561,2.082,564,2.29,570,4.421,616,2.551,1002,1.249,1150,1.498,1241,4.247,1242,4.247,1252,2.29,1253,2.29,1254,1.896,1255,1.896,1256,1.896,1257,1.896,1258,1.896,1352,3.52,1373,1.896,1374,5.022,1375,5.022,1376,5.022,1377,3.429,1378,5.022,1379,3.429,1380,2.243,1381,2.243,1382,2.243,1383,2.243,1384,2.243,1385,2.243,1386,2.243,1387,2.243,1388,2.243,1389,2.243,1390,2.243,1391,2.243,1392,2.243,1393,2.243,1394,3.429,1395,3.68,1396,4.661,1397,2.243,1398,3.429,1399,2.243,1400,3.429,1401,2.243,1402,4.163,1403,4.163,1404,4.163,1405,2.243,1406,2.243,1407,2.243,1408,2.243,1409,3.429,1410,2.243,1411,3.429,1412,2.243,1413,2.243,1414,2.243,1415,2.243,1416,2.243,1417,2.243,1418,2.243,1419,2.243,1420,2.243,1421,2.243,1422,2.243,1423,2.243,1424,2.243,1425,2.243,1426,2.243,1427,2.243,1428,2.243,1429,2.243,1430,2.243,1431,2.243,1432,2.243,1433,2.243,1434,2.243,1435,2.243,1436,3.429,1437,2.243,1438,3.429,1439,2.243,1440,2.243,1441,2.243,1442,3.429,1443,2.243,1444,2.243,1445,2.243,1446,2.243,1447,2.243,1448,2.243,1449,4.163,1450,2.243,1451,2.243,1452,2.243,1453,2.243,1454,2.243,1455,2.243,1456,2.243,1457,2.243,1458,3.429,1459,2.243,1460,2.243,1461,2.243,1462,3.429,1463,2.243,1464,2.243,1465,2.243,1466,2.243,1467,2.243,1468,3.429,1469,3.429,1470,2.899,1471,3.429,1472,2.243,1473,2.243,1474,5.296,1475,2.243,1476,2.243,1477,2.243,1478,2.243,1479,2.243,1480,2.243,1481,2.243,1482,2.243,1483,2.243,1484,2.243,1485,2.243]],["title/injectables/WeatherService.html",[239,0.808,375,1.724]],["body/injectables/WeatherService.html",[2,0.234,3,0.2,7,0.167,18,0.269,19,0.98,21,0.422,22,0.552,25,1.085,26,0.026,28,0.557,29,0.645,30,0.2,31,0.149,48,1.474,58,1.293,59,0.987,63,3.356,64,3.244,65,3.244,88,0.835,110,0.019,111,0.019,113,1.58,116,0.607,118,0.966,119,0.492,120,1.205,121,0.987,146,2.136,207,1.97,231,1.542,239,1.348,253,3.244,254,3.97,257,0.925,258,1.078,259,3.356,284,2.562,289,1.825,290,2.153,307,2.562,314,3.356,366,1.378,375,2.58,387,1.825,392,3.244,402,2.136,589,3.592,599,1.825,664,2.562,809,3.244,1486,3.244,1487,5.945,1488,5.024,1489,5.024,1490,5.024,1491,5.024,1492,5.024,1493,3.836,1494,5.024,1495,3.836,1496,5.024,1497,3.836,1498,5.024,1499,5.024,1500,3.244,1501,5.603,1502,3.836,1503,5.603,1504,3.836,1505,3.836,1506,3.836,1507,3.836,1508,3.836]],["title/coverage.html",[1509,3.886]],["body/coverage.html",[0,0.796,1,1.05,7,0.155,8,3.019,26,0.026,31,0.26,60,1.282,61,0.748,90,1.122,92,1.05,94,1.05,96,1.05,98,1.122,100,1.122,103,1.122,105,0.982,106,0.355,108,1.05,110,0.018,111,0.018,112,3.019,119,0.284,157,3.564,159,2.385,165,2.667,215,1.988,216,3.611,219,1.199,220,1.578,237,1.988,239,1.55,240,2.168,241,3.019,242,3.019,255,1.578,285,1.988,286,1.988,360,3.019,366,1.282,370,2.168,375,1.833,376,2.168,395,1.833,406,1.988,456,2.385,457,3.019,458,3.019,500,3.359,506,3.611,578,3.019,579,3.019,607,3.019,622,2.385,623,2.385,669,3.019,787,2.385,792,3.019,799,1.698,822,3.019,955,3.019,956,3.019,1047,3.019,1151,3.564,1152,3.564,1171,2.168,1189,3.019,1190,3.019,1204,3.019,1205,3.019,1240,3.019,1259,3.564,1270,3.019,1341,3.019,1368,3.019,1373,3.019,1395,3.859,1486,3.019,1500,3.019,1509,3.019,1510,3.571,1511,3.571,1512,5.407,1513,6.026,1514,4.791,1515,3.571,1516,4.791,1517,5.778,1518,5.778,1519,4.791,1520,3.571,1521,3.571,1522,4.791,1523,3.571,1524,4.791,1525,3.019,1526,5.778,1527,3.019,1528,4.051,1529,3.019,1530,3.571]],["title/dependencies.html",[125,2.7,1531,2.798]],["body/dependencies.html",[26,0.026,29,0.795,110,0.021,111,0.021,125,3.155,140,4.262,141,4.262,148,2.63,155,3.994,156,3.994,163,2.247,189,3.155,192,1.945,472,2.868,599,2.247,1532,4.724,1533,6.865,1534,4.724,1535,5.729,1536,4.724,1537,4.724,1538,4.724,1539,4.724,1540,4.724,1541,4.724,1542,4.724,1543,4.724,1544,4.724,1545,4.724,1546,4.724,1547,4.724,1548,4.724,1549,4.724,1550,4.724,1551,4.724,1552,4.724,1553,4.724,1554,4.724,1555,4.724,1556,4.724]],["title/index.html",[18,0.196,402,1.558,1557,2.798]],["body/index.html",[0,0.729,3,0.235,7,0.196,13,1.514,26,0.021,44,5.334,47,3.812,48,2.321,49,3.363,73,4.707,88,0.595,106,0.449,110,0.021,111,0.021,136,3.011,208,3.011,346,1.856,359,2.292,397,2.315,445,3.353,951,2.737,1143,3.812,1558,4.508,1559,6.04,1560,4.508,1561,4.508,1562,6.69,1563,6.69,1564,4.508,1565,4.508,1566,4.508,1567,4.508,1568,4.508,1569,4.508,1570,4.508,1571,6.481,1572,4.508,1573,4.508,1574,4.508,1575,4.508,1576,4.508,1577,3.812,1578,5.567,1579,6.481,1580,5.567,1581,5.567,1582,4.508,1583,6.309,1584,4.508,1585,4.508,1586,4.508,1587,6.04,1588,4.508,1589,4.508]],["title/modules.html",[123,2.031]],["body/modules.html",[26,0.023,110,0.023,111,0.023,123,2.358,124,3.563,132,3.24,133,3.24,141,3.968,203,3.161,1238,5.206,1590,5.335,1591,5.335,1592,6.49]],["title/overview.html",[1593,3.886]],["body/overview.html",[0,0.529,1,1.754,26,0.026,30,0.229,31,0.17,55,2.442,82,1.29,90,2.09,92,1.754,94,1.754,96,1.754,98,1.875,100,1.875,103,1.875,105,1.642,108,1.754,110,0.02,111,0.02,123,2.419,124,4.745,125,2.929,126,3.262,127,3.708,128,3.708,129,3.708,130,3.708,131,3.708,132,3.623,133,3.623,134,4.628,135,3.262,136,2.929,191,2.252,239,1.055,1470,3.708,1593,3.708,1594,4.386,1595,5.473,1596,4.386]],["title/routes.html",[191,2.36]],["body/routes.html",[26,0.023,110,0.023,111,0.023,191,2.826]],["title/miscellaneous/variables.html",[1395,2.7,1597,2.366]],["body/miscellaneous/variables.html",[18,0.344,26,0.026,110,0.022,111,0.022,119,0.499,120,1.968,121,1.612,157,5.008,180,2.102,294,2.016,387,3.087,787,4.183,1395,3.271,1525,4.141,1527,4.141,1528,4.141,1529,5.296,1577,4.951,1597,4.141,1598,5.855,1599,4.897,1600,4.897,1601,4.897,1602,4.897]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":500,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{},"coverage.html":{}}}],["0.0.4",{"_index":1553,"title":{},"body":{"dependencies.html":{}}}],["0.36.1",{"_index":1545,"title":{},"body":{"dependencies.html":{}}}],["0.6.8",{"_index":1540,"title":{},"body":{"dependencies.html":{}}}],["0.8.26",{"_index":1556,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1526,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1516,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1514,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1520,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1513,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":1518,"title":{},"body":{"coverage.html":{}}}],["0/23",{"_index":1523,"title":{},"body":{"coverage.html":{}}}],["0/26",{"_index":1521,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1512,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1515,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1524,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1517,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1519,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1522,"title":{},"body":{"coverage.html":{}}}],["0000ff",{"_index":1201,"title":{},"body":{"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["1",{"_index":1311,"title":{},"body":{"components/SettingsComponent.html":{}}}],["1.1.3",{"_index":1543,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1594,"title":{},"body":{"overview.html":{}}}],["100",{"_index":503,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["12",{"_index":1596,"title":{},"body":{"overview.html":{}}}],["1500",{"_index":909,"title":{},"body":{"injectables/LogService.html":{}}}],["2.0.8",{"_index":1551,"title":{},"body":{"dependencies.html":{}}}],["2.5.4",{"_index":1549,"title":{},"body":{"dependencies.html":{}}}],["2.7.2",{"_index":1546,"title":{},"body":{"dependencies.html":{}}}],["2500",{"_index":936,"title":{},"body":{"injectables/LogService.html":{}}}],["273.15",{"_index":1352,"title":{},"body":{"injectables/TemperatureService.html":{},"classes/WeatherNow.html":{}}}],["3",{"_index":1470,"title":{},"body":{"classes/WeatherNow.html":{},"overview.html":{}}}],["3000",{"_index":441,"title":{},"body":{"components/CityComponent.html":{},"components/NavigationComponent.html":{}}}],["3cba9f",{"_index":1358,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["4.2",{"_index":788,"title":{},"body":{"components/InitialComponent.html":{}}}],["401",{"_index":912,"title":{},"body":{"injectables/LogService.html":{}}}],["5",{"_index":776,"title":{},"body":{"components/InitialComponent.html":{}}}],["500",{"_index":938,"title":{},"body":{"injectables/LogService.html":{}}}],["6.0.0",{"_index":1554,"title":{},"body":{"dependencies.html":{}}}],["6.0.3",{"_index":1541,"title":{},"body":{"dependencies.html":{}}}],["6.0.4",{"_index":1533,"title":{},"body":{"dependencies.html":{}}}],["6.0.5",{"_index":1561,"title":{},"body":{"index.html":{}}}],["6.2.1",{"_index":1535,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":68,"title":{},"body":{"components/AboutComponent.html":{}}}],["8",{"_index":1595,"title":{},"body":{"overview.html":{}}}],["aaaaaa",{"_index":489,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{}}}],["about'},{'nam",{"_index":89,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["about.component.css",{"_index":15,"title":{},"body":{"components/AboutComponent.html":{}}}],["about.component.html",{"_index":17,"title":{},"body":{"components/AboutComponent.html":{}}}],["about/about.compon",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["aboutcompon",{"_index":1,"title":{"components/AboutComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["abstractcontrol",{"_index":1162,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["ac",{"_index":1188,"title":{},"body":{"classes/PasswordValidation.html":{}}}],["ac.get('password",{"_index":1176,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["ac.get('password2",{"_index":1178,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["ac.get('password2').seterror",{"_index":1181,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["access",{"_index":780,"title":{},"body":{"components/InitialComponent.html":{}}}],["accomplish",{"_index":719,"title":{},"body":{"components/InitialComponent.html":{}}}],["account",{"_index":1320,"title":{},"body":{"components/SettingsComponent.html":{}}}],["activ",{"_index":1124,"title":{},"body":{"components/NavigationComponent.html":{}}}],["activatedrout",{"_index":374,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["actual_compon",{"_index":109,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["addit",{"_index":1396,"title":{},"body":{"classes/WeatherNow.html":{}}}],["admin",{"_index":672,"title":{},"body":{"components/InitialComponent.html":{}}}],["adquir",{"_index":442,"title":{},"body":{"components/CityComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["afterward",{"_index":925,"title":{},"body":{"injectables/LogService.html":{}}}],["alreadi",{"_index":939,"title":{},"body":{"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["alway",{"_index":950,"title":{},"body":{"injectables/LogService.html":{}}}],["an",{"_index":313,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["angular",{"_index":49,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{},"index.html":{}}}],["angular/anim",{"_index":1532,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1534,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":189,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"modules/MaterialModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"injectables/WeatherService.html":{}}}],["angular/compil",{"_index":1536,"title":{},"body":{"dependencies.html":{}}}],["angular/cor",{"_index":29,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{},"dependencies.html":{}}}],["angular/form",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"dependencies.html":{}}}],["angular/http",{"_index":1537,"title":{},"body":{"dependencies.html":{}}}],["angular/materi",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"dependencies.html":{}}}],["angular/material/dialog",{"_index":1095,"title":{},"body":{"components/NavigationComponent.html":{}}}],["angular/platform",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"dependencies.html":{}}}],["angular/pwa",{"_index":1539,"title":{},"body":{"dependencies.html":{}}}],["angular/rout",{"_index":192,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"dependencies.html":{}}}],["angular/servic",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["ans.push",{"_index":320,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["answer",{"_index":782,"title":{},"body":{"components/InitialComponent.html":{}}}],["api",{"_index":63,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["app",{"_index":13,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"index.html":{}}}],["app.compon",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.css",{"_index":114,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":115,"title":{},"body":{"components/AppComponent.html":{}}}],["app.modul",{"_index":1045,"title":{},"body":{"modules/MaterialModule.html":{}}}],["appcompon",{"_index":90,"title":{"components/AppComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["applic",{"_index":46,"title":{},"body":{"components/AboutComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/ForecastValuesService.html":{},"components/InitialComponent.html":{}}}],["application/json",{"_index":282,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["appmodul",{"_index":124,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodul",{"_index":132,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["argument",{"_index":690,"title":{},"body":{"components/InitialComponent.html":{}}}],["array",{"_index":217,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{}}}],["array.from(rx).foreach(el",{"_index":720,"title":{},"body":{"components/InitialComponent.html":{}}}],["array.from(rx.list).foreach(el",{"_index":426,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["artifact",{"_index":1572,"title":{},"body":{"index.html":{}}}],["ask",{"_index":403,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["asset",{"_index":714,"title":{},"body":{"components/InitialComponent.html":{}}}],["assets/city.list.json",{"_index":703,"title":{},"body":{"components/InitialComponent.html":{}}}],["auth",{"_index":801,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["author",{"_index":243,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["automat",{"_index":1567,"title":{},"body":{"index.html":{}}}],["aux",{"_index":1374,"title":{},"body":{"classes/WeatherNow.html":{}}}],["avail",{"_index":1238,"title":{},"body":{"injectables/SavedCitiesService.html":{},"modules.html":{}}}],["avoid",{"_index":1102,"title":{},"body":{"components/NavigationComponent.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["back",{"_index":1219,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["background",{"_index":39,"title":{},"body":{"components/AboutComponent.html":{}}}],["backgroundcolor",{"_index":488,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{}}}],["bada55",{"_index":487,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["bandwidth",{"_index":734,"title":{},"body":{"components/InitialComponent.html":{}}}],["bar",{"_index":482,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"components/LogginDialogComponent.html":{},"injectables/RainAndSnowService.html":{}}}],["base",{"_index":1375,"title":{},"body":{"classes/WeatherNow.html":{}}}],["base64",{"_index":886,"title":{},"body":{"injectables/LogService.html":{}}}],["basic",{"_index":887,"title":{},"body":{"injectables/LogService.html":{}}}],["basic_express",{"_index":339,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["be",{"_index":1485,"title":{},"body":{"classes/WeatherNow.html":{}}}],["bearer",{"_index":276,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["befor",{"_index":432,"title":{},"body":{"components/CityComponent.html":{}}}],["block",{"_index":740,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["bodi",{"_index":33,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["body).subscribe(r",{"_index":879,"title":{},"body":{"injectables/LogService.html":{}}}],["body[0].classlist.add(\"initi",{"_index":35,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{}}}],["body[0].classlist.remove(\"initi",{"_index":1098,"title":{},"body":{"components/NavigationComponent.html":{}}}],["boolean",{"_index":269,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/NavigationComponent.html":{}}}],["bootstrap",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["bordercolor",{"_index":486,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["brows",{"_index":1592,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browser/anim",{"_index":194,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["browseranimationsmodul",{"_index":193,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["browsermodul",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["btoa(`${username}:${password",{"_index":888,"title":{},"body":{"injectables/LogService.html":{}}}],["build",{"_index":1571,"title":{},"body":{"index.html":{}}}],["builddeleteform",{"_index":1279,"title":{},"body":{"components/SettingsComponent.html":{}}}],["buildpsswdform",{"_index":1280,"title":{},"body":{"components/SettingsComponent.html":{}}}],["button",{"_index":450,"title":{},"body":{"components/CityComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["call",{"_index":759,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["cancel",{"_index":1019,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["cccccc",{"_index":493,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["certain",{"_index":563,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["chang",{"_index":397,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"index.html":{}}}],["changepassword",{"_index":1281,"title":{},"body":{"components/SettingsComponent.html":{}}}],["changepassword(passwd",{"_index":1293,"title":{},"body":{"components/SettingsComponent.html":{}}}],["chart",{"_index":459,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["chart('cloudsandwind",{"_index":481,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["chart('rainandsnow",{"_index":1200,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["chart('temperatur",{"_index":1357,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["chart.j",{"_index":472,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{},"dependencies.html":{}}}],["check",{"_index":1143,"title":{},"body":{"components/NavigationComponent.html":{},"index.html":{}}}],["check_circl",{"_index":1145,"title":{},"body":{"components/NavigationComponent.html":{}}}],["checkandsav",{"_index":1377,"title":{},"body":{"classes/WeatherNow.html":{}}}],["checkandsave(text",{"_index":1394,"title":{},"body":{"classes/WeatherNow.html":{}}}],["checkerror",{"_index":965,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["citi",{"_index":58,"title":{},"body":{"components/AboutComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/UserServer.html":{},"injectables/WeatherService.html":{}}}],["cities.foreach(c",{"_index":349,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["cities.json",{"_index":749,"title":{},"body":{"components/InitialComponent.html":{}}}],["cities.length",{"_index":1117,"title":{},"body":{"components/NavigationComponent.html":{}}}],["cities.servic",{"_index":288,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["cities.service.t",{"_index":1205,"title":{},"body":{"injectables/SavedCitiesService.html":{},"coverage.html":{}}}],["cities.service.ts:12",{"_index":1214,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:13",{"_index":1215,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:14",{"_index":1207,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:19",{"_index":1210,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:23",{"_index":1209,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:39",{"_index":1212,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:52",{"_index":1208,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["citiesid",{"_index":224,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["citieslist",{"_index":225,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/UserServer.html":{}}}],["citieslist.foreach(c",{"_index":301,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["citieslist.split",{"_index":905,"title":{},"body":{"injectables/LogService.html":{}}}],["citieslisturl",{"_index":673,"title":{},"body":{"components/InitialComponent.html":{}}}],["citiesrespons",{"_index":215,"title":{"classes/CitiesResponse.html":{}},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/LogService.html":{},"classes/UserServer.html":{},"coverage.html":{}}}],["citiesresponseunit",{"_index":237,"title":{"classes/CitiesResponseUnit.html":{}},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/LogService.html":{},"classes/UserServer.html":{},"coverage.html":{}}}],["citiesserv",{"_index":688,"title":{},"body":{"components/InitialComponent.html":{}}}],["citiesserverservic",{"_index":240,"title":{"injectables/CitiesServerService.html":{}},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"coverage.html":{}}}],["citiessubscript",{"_index":1051,"title":{},"body":{"components/NavigationComponent.html":{}}}],["city'",{"_index":1484,"title":{},"body":{"classes/WeatherNow.html":{}}}],["city'},{'nam",{"_index":93,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["city.component.css",{"_index":361,"title":{},"body":{"components/CityComponent.html":{}}}],["city.component.html",{"_index":362,"title":{},"body":{"components/CityComponent.html":{}}}],["city.id",{"_index":1229,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["city.insertbodi",{"_index":303,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["city.nam",{"_index":312,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["city/:id/:nam",{"_index":202,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["city/city.compon",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["city/cod",{"_index":1137,"title":{},"body":{"components/NavigationComponent.html":{}}}],["city/data",{"_index":471,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{},"classes/WeatherNow.html":{}}}],["citycompon",{"_index":92,"title":{"components/CityComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["citymatch",{"_index":674,"title":{},"body":{"components/InitialComponent.html":{}}}],["citymatch.nam",{"_index":785,"title":{},"body":{"components/InitialComponent.html":{}}}],["citymatch.sys.countri",{"_index":786,"title":{},"body":{"components/InitialComponent.html":{}}}],["cityshown",{"_index":363,"title":{},"body":{"components/CityComponent.html":{}}}],["cityshown.nam",{"_index":452,"title":{},"body":{"components/CityComponent.html":{}}}],["citytosav",{"_index":1213,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["citytosave.id",{"_index":1230,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["class",{"_index":31,"title":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/PasswordValidation.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"overview.html":{}}}],["cli",{"_index":1559,"title":{},"body":{"index.html":{}}}],["click",{"_index":1013,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["client",{"_index":52,"title":{},"body":{"components/AboutComponent.html":{}}}],["close",{"_index":1014,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["closesess",{"_index":825,"title":{},"body":{"injectables/LogService.html":{}}}],["cloud",{"_index":460,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["cloudcolor",{"_index":610,"title":{},"body":{"components/GraphsComponent.html":{}}}],["cloudsandwind",{"_index":619,"title":{},"body":{"components/GraphsComponent.html":{}}}],["cloudsandwind/cloud",{"_index":645,"title":{},"body":{"components/GraphsComponent.html":{}}}],["cloudsandwindchart",{"_index":611,"title":{},"body":{"components/GraphsComponent.html":{}}}],["cloudsandwindservic",{"_index":456,"title":{"injectables/CloudsAndWindService.html":{}},"body":{"injectables/CloudsAndWindService.html":{},"components/GraphsComponent.html":{},"coverage.html":{}}}],["cluster_appmodul",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declar",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_import",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cod",{"_index":1376,"title":{},"body":{"classes/WeatherNow.html":{}}}],["code",{"_index":445,"title":{},"body":{"components/CityComponent.html":{},"injectables/LogService.html":{},"index.html":{}}}],["column",{"_index":343,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["comment",{"_index":1227,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["commonmodul",{"_index":188,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["commonurl",{"_index":244,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["compat",{"_index":728,"title":{},"body":{"components/InitialComponent.html":{}}}],["compil",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["complet",{"_index":431,"title":{},"body":{"components/CityComponent.html":{}}}],["complexsearch",{"_index":246,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["complexsearch(valu",{"_index":260,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["complexsearchid",{"_index":247,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["complexsearchid(valu",{"_index":263,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["complic",{"_index":924,"title":{},"body":{"injectables/LogService.html":{}}}],["compodoc/compodoc",{"_index":1542,"title":{},"body":{"dependencies.html":{}}}],["compon",{"_index":0,"title":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["component_templ",{"_index":87,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["comprobamo",{"_index":329,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log",{"_index":763,"title":{},"body":{"components/InitialComponent.html":{}}}],["console.log(\"access",{"_index":915,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(\"complet",{"_index":765,"title":{},"body":{"components/InitialComponent.html":{}}}],["console.log(\"delet",{"_index":948,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["console.log(\"failur",{"_index":910,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(\"filt",{"_index":811,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["console.log(\"interceptor",{"_index":819,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["console.log(\"log",{"_index":327,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log(\"not",{"_index":1170,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["console.log(\"queri",{"_index":317,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log(\"rain",{"_index":556,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["console.log(\"snow",{"_index":560,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["console.log(\"someth",{"_index":940,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(\"there'",{"_index":881,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(\"tri",{"_index":310,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log(\"upload",{"_index":306,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log('thi",{"_index":1235,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["console.log(`there'",{"_index":917,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(bodi",{"_index":885,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(err",{"_index":920,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(item.main.temp",{"_index":1350,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["console.log(r",{"_index":934,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(request",{"_index":821,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["console.log(respons",{"_index":897,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(response.data[0].c",{"_index":896,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(rx",{"_index":308,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log(this.currentuser.display",{"_index":907,"title":{},"body":{"injectables/LogService.html":{}}}],["const",{"_index":32,"title":{},"body":{"components/AboutComponent.html":{},"modules/AppRoutingModule.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{}}}],["constructor",{"_index":21,"title":{},"body":{"components/AboutComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["constructor(auth",{"_index":798,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["constructor(el",{"_index":526,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["constructor(forecastvaluesservic",{"_index":621,"title":{},"body":{"components/GraphsComponent.html":{}}}],["constructor(formbuild",{"_index":968,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{}}}],["constructor(http",{"_index":253,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/WeatherService.html":{}}}],["constructor(log",{"_index":1289,"title":{},"body":{"components/SettingsComponent.html":{}}}],["constructor(nam",{"_index":1244,"title":{},"body":{"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["constructor(priv",{"_index":809,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/WeatherService.html":{}}}],["constructor(rout",{"_index":373,"title":{},"body":{"components/CityComponent.html":{},"components/NavigationComponent.html":{}}}],["constructor(savedcitiesservic",{"_index":834,"title":{},"body":{"injectables/LogService.html":{}}}],["constructor(weatherservic",{"_index":687,"title":{},"body":{"components/InitialComponent.html":{}}}],["consum",{"_index":731,"title":{},"body":{"components/InitialComponent.html":{}}}],["contain",{"_index":568,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"classes/RespuestaForecast.html":{}}}],["content",{"_index":298,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["contenttyp",{"_index":245,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["context",{"_index":1529,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["coord",{"_index":1241,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["core",{"_index":1547,"title":{},"body":{"dependencies.html":{}}}],["correctli",{"_index":761,"title":{},"body":{"components/InitialComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["countri",{"_index":335,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{}}}],["coverag",{"_index":1509,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["crash",{"_index":760,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["creat",{"_index":51,"title":{},"body":{"components/AboutComponent.html":{},"injectables/LogService.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["createus",{"_index":826,"title":{},"body":{"injectables/LogService.html":{}}}],["createuser(usernam",{"_index":838,"title":{},"body":{"injectables/LogService.html":{}}}],["creation",{"_index":1015,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["current",{"_index":404,"title":{},"body":{"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"injectables/LogService.html":{},"classes/WeatherNow.html":{}}}],["currentus",{"_index":823,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["currentuser.usernam",{"_index":1334,"title":{},"body":{"components/SettingsComponent.html":{}}}],["data",{"_index":61,"title":{"classes/Data.html":{}},"body":{"components/AboutComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"coverage.html":{}}}],["data.password",{"_index":1133,"title":{},"body":{"components/NavigationComponent.html":{}}}],["data.usernam",{"_index":1132,"title":{},"body":{"components/NavigationComponent.html":{}}}],["databas",{"_index":292,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{}}}],["dataset",{"_index":484,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["datasourc",{"_index":364,"title":{},"body":{"components/CityComponent.html":{}}}],["date",{"_index":461,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["db",{"_index":884,"title":{},"body":{"injectables/LogService.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["declar",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"overview.html":{}}}],["default",{"_index":120,"title":{},"body":{"components/AppComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"miscellaneous/variables.html":{}}}],["defin",{"_index":22,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["deg",{"_index":523,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["delaccnt",{"_index":1282,"title":{},"body":{"components/SettingsComponent.html":{}}}],["delet",{"_index":668,"title":{},"body":{"components/GraphsComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{}}}],["deleteaccount",{"_index":1273,"title":{},"body":{"components/SettingsComponent.html":{}}}],["deleteaccount1",{"_index":1274,"title":{},"body":{"components/SettingsComponent.html":{}}}],["deletebodi",{"_index":827,"title":{},"body":{"injectables/LogService.html":{}}}],["deletebody(usernam",{"_index":840,"title":{},"body":{"injectables/LogService.html":{}}}],["deletec",{"_index":1061,"title":{},"body":{"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["deleteus",{"_index":828,"title":{},"body":{"injectables/LogService.html":{}}}],["deleteuser(us",{"_index":842,"title":{},"body":{"injectables/LogService.html":{}}}],["demo",{"_index":922,"title":{},"body":{"injectables/LogService.html":{}}}],["demous",{"_index":923,"title":{},"body":{"injectables/LogService.html":{}}}],["deni",{"_index":916,"title":{},"body":{"injectables/LogService.html":{}}}],["depend",{"_index":125,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["descript",{"_index":522,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"components/LogginDialogComponent.html":{},"classes/RespuestaForecast.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{}}}],["dev",{"_index":1565,"title":{},"body":{"index.html":{}}}],["develop",{"_index":47,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["dialog",{"_index":957,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["dialog'},{'nam",{"_index":102,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["dialog.compon",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"components/NavigationComponent.html":{}}}],["dialog.component.css",{"_index":958,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.html",{"_index":959,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.t",{"_index":956,"title":{},"body":{"components/LogginDialogComponent.html":{},"coverage.html":{}}}],["dialog.component.ts:13",{"_index":979,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:14",{"_index":977,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:15",{"_index":984,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:16",{"_index":982,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:17",{"_index":981,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:18",{"_index":980,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:19",{"_index":983,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:20",{"_index":972,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:28",{"_index":975,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:36",{"_index":976,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:42",{"_index":973,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:63",{"_index":974,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog/loggin",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"coverage.html":{}}}],["dialogref",{"_index":970,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["differ",{"_index":209,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/InitialComponent.html":{},"components/SettingsComponent.html":{}}}],["direct",{"_index":85,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{}}}],["directive|pipe|service|class|guard|interface|enum|modul",{"_index":1570,"title":{},"body":{"index.html":{}}}],["directori",{"_index":1574,"title":{},"body":{"index.html":{}}}],["disabl",{"_index":750,"title":{},"body":{"components/InitialComponent.html":{}}}],["display",{"_index":226,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/SavedCity.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{}}}],["displayedcolumn",{"_index":365,"title":{},"body":{"components/CityComponent.html":{}}}],["displayvalu",{"_index":1378,"title":{},"body":{"classes/WeatherNow.html":{}}}],["dissapear",{"_index":665,"title":{},"body":{"components/GraphsComponent.html":{}}}],["dist",{"_index":1573,"title":{},"body":{"index.html":{}}}],["document",{"_index":1510,"title":{},"body":{"coverage.html":{}}}],["document.getelementsbytagname(\"bodi",{"_index":34,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["don`t",{"_index":867,"title":{},"body":{"injectables/LogService.html":{}}}],["download",{"_index":783,"title":{},"body":{"components/InitialComponent.html":{}}}],["dt",{"_index":511,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["dt_txt",{"_index":512,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["durat",{"_index":440,"title":{},"body":{"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["dure",{"_index":78,"title":{},"body":{"components/AboutComponent.html":{}}}],["dynam",{"_index":1538,"title":{},"body":{"dependencies.html":{}}}],["e2",{"_index":1584,"title":{},"body":{"index.html":{}}}],["each",{"_index":213,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["econom",{"_index":74,"title":{},"body":{"components/AboutComponent.html":{}}}],["ee",{"_index":54,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{}}}],["el",{"_index":331,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/SavedCitiesService.html":{},"classes/WeatherNow.html":{}}}],["element",{"_index":84,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["element.cloud",{"_index":528,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.coord.lat",{"_index":726,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["element.coord.lon",{"_index":725,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["element.countri",{"_index":724,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["element.dt",{"_index":530,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.dt_txt",{"_index":532,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.id",{"_index":723,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["element.main.grnd_level",{"_index":534,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.humid",{"_index":535,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.pressur",{"_index":536,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.sea_level",{"_index":537,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.temp",{"_index":538,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.temp_kf",{"_index":539,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.temp_max",{"_index":540,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.temp_min",{"_index":541,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.name.includes(this.c",{"_index":756,"title":{},"body":{"components/InitialComponent.html":{}}}],["element.paramet",{"_index":454,"title":{},"body":{"components/CityComponent.html":{}}}],["element.rain",{"_index":555,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.rain[\"3h",{"_index":558,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.snow",{"_index":559,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.snow[\"3h",{"_index":562,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.valu",{"_index":455,"title":{},"body":{"components/CityComponent.html":{}}}],["element.weather.foreach((weath",{"_index":542,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.wind.deg",{"_index":554,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.wind.spe",{"_index":553,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["email",{"_index":932,"title":{},"body":{"injectables/LogService.html":{}}}],["emptylist",{"_index":1053,"title":{},"body":{"components/NavigationComponent.html":{}}}],["en",{"_index":1234,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["enabl",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"components/InitialComponent.html":{}}}],["end",{"_index":1583,"title":{},"body":{"index.html":{}}}],["engros",{"_index":1044,"title":{},"body":{"modules/MaterialModule.html":{}}}],["entrycompon",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["environ",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment.product",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["environments/environ",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":880,"title":{},"body":{"injectables/LogService.html":{}}}],["error",{"_index":309,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["es",{"_index":333,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["event",{"_index":691,"title":{},"body":{"components/InitialComponent.html":{}}}],["event.key",{"_index":774,"title":{},"body":{"components/InitialComponent.html":{}}}],["everyth",{"_index":1226,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["execut",{"_index":1580,"title":{},"body":{"index.html":{}}}],["exist",{"_index":311,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["expir",{"_index":1322,"title":{},"body":{"components/SettingsComponent.html":{}}}],["export",{"_index":30,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"overview.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjjcmvhdglvbi10aw1lijoxnti4nzk5mty4mzgxlcj1c2vybmftzsi6imrlbw8ifq.vwezijoag2icsn0uprts8jqre1ngzhcrg6fvkdh2",{"_index":927,"title":{},"body":{"injectables/LogService.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjjcmvhdglvbi10aw1lijoxnti4otu2oty0mte2lcj1c2vybmftzsi6imrlbw8ifq.xkahjdq9yey2aus8dp3qtobmefl0waclsk4lrmkz9n",{"_index":277,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["fail",{"_index":326,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["fals",{"_index":294,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"injectables/RainAndSnowService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"miscellaneous/variables.html":{}}}],["fav/upd",{"_index":878,"title":{},"body":{"injectables/LogService.html":{}}}],["favorit",{"_index":453,"title":{},"body":{"components/CityComponent.html":{}}}],["favourit",{"_index":348,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"classes/SavedCity.html":{}}}],["favouritec",{"_index":223,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["ff0000",{"_index":1359,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["ffffff",{"_index":1202,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["field",{"_index":738,"title":{},"body":{"components/InitialComponent.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"index.html":{}}}],["fill",{"_index":291,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["filter",{"_index":338,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["flag",{"_index":1576,"title":{},"body":{"index.html":{}}}],["folder",{"_index":715,"title":{},"body":{"components/InitialComponent.html":{}}}],["forecast",{"_index":366,"title":{"classes/Forecast.html":{}},"body":{"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{},"coverage.html":{}}}],["forecast(el",{"_index":428,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["forecast.map(item",{"_index":474,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["forecastvalu",{"_index":580,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{}}}],["forecastvaluesservic",{"_index":376,"title":{"injectables/ForecastValuesService.html":{}},"body":{"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"coverage.html":{}}}],["forecastvaluesservice.getupdates().subscribe(valu",{"_index":648,"title":{},"body":{"components/GraphsComponent.html":{}}}],["forecastvaluesservice.getvalu",{"_index":647,"title":{},"body":{"components/GraphsComponent.html":{}}}],["form",{"_index":960,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["format",{"_index":505,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["formbuild",{"_index":969,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["formcontrol",{"_index":986,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["formcontrol(this.password",{"_index":993,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["formcontrol(this.password,[validators.minlength(5",{"_index":1184,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["formcontrol(this.password2,[validators.minlength(5",{"_index":1185,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["formcontrol(this.usernam",{"_index":989,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["formcontrol(this.username,[validators.minlength(5",{"_index":1183,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["formdelet",{"_index":1275,"title":{},"body":{"components/SettingsComponent.html":{}}}],["formgroup",{"_index":978,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["formpassword",{"_index":1276,"title":{},"body":{"components/SettingsComponent.html":{}}}],["formsmodul",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":675,"title":{},"body":{"components/InitialComponent.html":{}}}],["found.nam",{"_index":790,"title":{},"body":{"components/InitialComponent.html":{}}}],["found.sys.countri",{"_index":791,"title":{},"body":{"components/InitialComponent.html":{}}}],["foundciti",{"_index":676,"title":{},"body":{"components/InitialComponent.html":{}}}],["framework",{"_index":50,"title":{},"body":{"components/AboutComponent.html":{}}}],["free",{"_index":65,"title":{},"body":{"components/AboutComponent.html":{},"injectables/WeatherService.html":{}}}],["full",{"_index":201,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["function",{"_index":735,"title":{},"body":{"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{}}}],["further",{"_index":1586,"title":{},"body":{"index.html":{}}}],["gener",{"_index":44,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["get",{"_index":402,"title":{"index.html":{}},"body":{"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{}}}],["getciti",{"_index":581,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["getcitieslist",{"_index":681,"title":{},"body":{"components/InitialComponent.html":{}}}],["getcityweath",{"_index":371,"title":{},"body":{"components/CityComponent.html":{}}}],["getcloudsandwindchart",{"_index":463,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["getcloudsandwindchart(forecast",{"_index":465,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["getforecast",{"_index":1488,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getforecast(id",{"_index":1492,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getlog",{"_index":1062,"title":{},"body":{"components/NavigationComponent.html":{}}}],["getrainandsnowchart",{"_index":1191,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["getrainandsnowchart(forecast",{"_index":1193,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["getsavedc",{"_index":1206,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["gettemperaturechart",{"_index":1342,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["gettemperaturechart(forecast",{"_index":1344,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["gettoken",{"_index":829,"title":{},"body":{"injectables/LogService.html":{}}}],["getupd",{"_index":582,"title":{},"body":{"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["getvalu",{"_index":583,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["getweath",{"_index":1489,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getweather(id",{"_index":1494,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getweatherbycitynam",{"_index":1490,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getweatherbycityname(nam",{"_index":1496,"title":{},"body":{"injectables/WeatherService.html":{}}}],["give",{"_index":1268,"title":{},"body":{"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["go",{"_index":951,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"index.html":{}}}],["goodcommonurl",{"_index":824,"title":{},"body":{"injectables/LogService.html":{}}}],["graph",{"_index":203,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"classes/RespuestaForecast.html":{},"modules.html":{}}}],["graphs'},{'nam",{"_index":95,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["graphs.component.css",{"_index":608,"title":{},"body":{"components/GraphsComponent.html":{}}}],["graphs.component.html",{"_index":609,"title":{},"body":{"components/GraphsComponent.html":{}}}],["graphs/:id/:nam",{"_index":205,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["graphs/graphs.compon",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["graphscompon",{"_index":94,"title":{"components/GraphsComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["grnd_level",{"_index":514,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["ground",{"_index":1460,"title":{},"body":{"classes/WeatherNow.html":{}}}],["hammerj",{"_index":1550,"title":{},"body":{"dependencies.html":{}}}],["header",{"_index":297,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["help",{"_index":1587,"title":{},"body":{"index.html":{}}}],["here",{"_index":1041,"title":{},"body":{"modules/MaterialModule.html":{}}}],["hidden",{"_index":1139,"title":{},"body":{"components/NavigationComponent.html":{}}}],["hold",{"_index":861,"title":{},"body":{"injectables/LogService.html":{}}}],["home",{"_index":1144,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["host",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["hostlisten",{"_index":685,"title":{},"body":{"components/InitialComponent.html":{}}}],["hostlistener('window:keyup",{"_index":771,"title":{},"body":{"components/InitialComponent.html":{}}}],["hour",{"_index":564,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["html",{"_index":83,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["http",{"_index":259,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"injectables/WeatherService.html":{}}}],["http://localhost:4200",{"_index":1566,"title":{},"body":{"index.html":{}}}],["http://localhost:8080/citiesservic",{"_index":279,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["http_interceptor",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["httpclient",{"_index":254,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"injectables/WeatherService.html":{}}}],["httpclientmodul",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["httpevent",{"_index":807,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["httphandler",{"_index":805,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["httpheader",{"_index":284,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"injectables/WeatherService.html":{}}}],["httpinterceptor",{"_index":793,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["httpoption",{"_index":296,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["httpoptions).subscribe(rx",{"_index":304,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["httprequest",{"_index":803,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["httprequest(\"delet",{"_index":945,"title":{},"body":{"injectables/LogService.html":{}}}],["https://api.openweathermap.org/data/2.5/forecast?id=${id}&appid=888b7bb3ed5f95fb9894b5c33589e6a6",{"_index":1507,"title":{},"body":{"injectables/WeatherService.html":{}}}],["https://api.openweathermap.org/data/2.5/weather?id=${id}&appid=888b7bb3ed5f95fb9894b5c33589e6a6",{"_index":1502,"title":{},"body":{"injectables/WeatherService.html":{}}}],["https://api.openweathermap.org/data/2.5/weather?q=${name}&appid=888b7bb3ed5f95fb9894b5c33589e6a6",{"_index":1506,"title":{},"body":{"injectables/WeatherService.html":{}}}],["https://api.openweathermap.org/data/2.5/weather?q=vigo&appid=888b7bb3ed5f95fb9894b5c33589e6a6",{"_index":1498,"title":{},"body":{"injectables/WeatherService.html":{}}}],["humid",{"_index":515,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["icon",{"_index":72,"title":{},"body":{"components/AboutComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{}}}],["id",{"_index":231,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["id\")).subscribe(rx",{"_index":351,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["id\",\"country\",\"lat\",\"lon\",\"nam",{"_index":344,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["identifi",{"_index":1500,"title":{},"body":{"injectables/WeatherService.html":{},"coverage.html":{}}}],["if(!(this.router.url.includes(`/initi",{"_index":1097,"title":{},"body":{"components/NavigationComponent.html":{}}}],["if((this.city.length>0)&&(this.citieslist",{"_index":753,"title":{},"body":{"components/InitialComponent.html":{}}}],["if(err.statu",{"_index":911,"title":{},"body":{"injectables/LogService.html":{}}}],["if(json.parse(localstorage.getitem(\"favouritec",{"_index":1216,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["if(request.method",{"_index":810,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["if(request.url.includes(`http://localhost:8080/citiesservic",{"_index":813,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["if(rx.rain",{"_index":1423,"title":{},"body":{"classes/WeatherNow.html":{}}}],["if(rx.snow",{"_index":1425,"title":{},"body":{"classes/WeatherNow.html":{}}}],["if(this.form.get('password').error",{"_index":1006,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["if(this.form.get('password').errors.requir",{"_index":1007,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["if(this.form.get('username').error",{"_index":1001,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["if(this.form.get('username').errors.maxlength",{"_index":1004,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["if(this.form.get('username').errors.minlength",{"_index":1003,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["if(this.form.get('username').errors.requir",{"_index":1005,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["if(this.logservice.currentus",{"_index":1113,"title":{},"body":{"components/NavigationComponent.html":{}}}],["if(this.yousurebutton",{"_index":1120,"title":{},"body":{"components/NavigationComponent.html":{}}}],["imag",{"_index":40,"title":{},"body":{"components/AboutComponent.html":{}}}],["imatia",{"_index":80,"title":{},"body":{"components/AboutComponent.html":{}}}],["implement",{"_index":9,"title":{},"body":{"components/AboutComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["import",{"_index":28,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["includ",{"_index":449,"title":{},"body":{"components/CityComponent.html":{}}}],["index",{"_index":18,"title":{"index.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["indic",{"_index":862,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["ineffici",{"_index":1103,"title":{},"body":{"components/NavigationComponent.html":{}}}],["info",{"_index":2,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["inform",{"_index":45,"title":{},"body":{"components/AboutComponent.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["inici",{"_index":1141,"title":{},"body":{"components/NavigationComponent.html":{}}}],["initi",{"_index":199,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/InitialComponent.html":{}}}],["initial'},{'nam",{"_index":97,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["initial.component.css",{"_index":670,"title":{},"body":{"components/InitialComponent.html":{}}}],["initial.component.html",{"_index":671,"title":{},"body":{"components/InitialComponent.html":{}}}],["initial/initial.compon",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["initialcompon",{"_index":96,"title":{"components/InitialComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["inject",{"_index":239,"title":{"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{}},"body":{"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"overview.html":{}}}],["innov",{"_index":81,"title":{},"body":{"components/AboutComponent.html":{}}}],["input",{"_index":684,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["insert",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"classes/SavedCity.html":{}}}],["insertbodi",{"_index":1243,"title":{},"body":{"classes/SavedCity.html":{}}}],["instruct",{"_index":1224,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["interact",{"_index":358,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["intercept",{"_index":797,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["intercept(request",{"_index":802,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["interceptor",{"_index":794,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["interceptor'},{'nam",{"_index":99,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["interceptor.component.css",{"_index":795,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["interceptor.component.html",{"_index":796,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["interceptor/interceptor.compon",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["interceptorcompon",{"_index":98,"title":{"components/InterceptorComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["internship",{"_index":79,"title":{},"body":{"components/AboutComponent.html":{}}}],["intervalcheck",{"_index":1054,"title":{},"body":{"components/NavigationComponent.html":{}}}],["islog",{"_index":1283,"title":{},"body":{"components/SettingsComponent.html":{}}}],["isn't",{"_index":727,"title":{},"body":{"components/InitialComponent.html":{}}}],["isnumb",{"_index":860,"title":{},"body":{"injectables/LogService.html":{}}}],["item.clouds.al",{"_index":475,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["item.countri",{"_index":323,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["item.dt_txt",{"_index":479,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["item.id).join",{"_index":236,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["item.id.tostr",{"_index":322,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["item.lat",{"_index":325,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["item.lon",{"_index":324,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["item.main.temp",{"_index":1351,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["item.main.temp_max",{"_index":1354,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["item.main.temp_min",{"_index":1356,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["item.rain",{"_index":1198,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["item.snow",{"_index":1199,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["item.wind.spe",{"_index":477,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["js",{"_index":1548,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":716,"title":{},"body":{"components/InitialComponent.html":{}}}],["json.parse(localstorage.getitem(\"favouritecities\")).foreach(el",{"_index":1218,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["json.stringify(usernam",{"_index":901,"title":{},"body":{"injectables/LogService.html":{}}}],["karma",{"_index":1582,"title":{},"body":{"index.html":{}}}],["keyadmin",{"_index":677,"title":{},"body":{"components/InitialComponent.html":{}}}],["keyboard",{"_index":768,"title":{},"body":{"components/InitialComponent.html":{}}}],["keyboardev",{"_index":693,"title":{},"body":{"components/InitialComponent.html":{}}}],["keyevent(ev",{"_index":772,"title":{},"body":{"components/InitialComponent.html":{}}}],["label",{"_index":483,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["last",{"_index":1469,"title":{},"body":{"classes/WeatherNow.html":{}}}],["lat",{"_index":336,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{}}}],["launch",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["launchform",{"_index":1156,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["lead",{"_index":1504,"title":{},"body":{"injectables/WeatherService.html":{}}}],["leakag",{"_index":752,"title":{},"body":{"components/InitialComponent.html":{}}}],["legend",{"_index":82,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"injectables/RainAndSnowService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"overview.html":{}}}],["let'",{"_index":1337,"title":{},"body":{"components/SettingsComponent.html":{}}}],["let\\'",{"_index":1339,"title":{},"body":{"components/SettingsComponent.html":{}}}],["level",{"_index":1458,"title":{},"body":{"classes/WeatherNow.html":{}}}],["limit",{"_index":67,"title":{},"body":{"components/AboutComponent.html":{}}}],["line",{"_index":490,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/TemperatureService.html":{}}}],["link",{"_index":1136,"title":{},"body":{"components/NavigationComponent.html":{},"classes/SavedCity.html":{}}}],["list",{"_index":565,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/UserServer.html":{}}}],["list.map(item",{"_index":235,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["listen",{"_index":396,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["liter",{"_index":570,"title":{},"body":{"classes/Forecast.html":{},"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["litr",{"_index":1471,"title":{},"body":{"classes/WeatherNow.html":{}}}],["load",{"_index":678,"title":{},"body":{"components/InitialComponent.html":{}}}],["loadfavourit",{"_index":248,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["loadfavourites(c",{"_index":266,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["local",{"_index":447,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["localhost",{"_index":433,"title":{},"body":{"components/CityComponent.html":{}}}],["localstorag",{"_index":347,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["localstorage.getitem(\"sess",{"_index":921,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["localstorage.getitem(\"token",{"_index":818,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["localstorage.removeitem(\"favouritec",{"_index":1236,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["localstorage.removeitem(\"sess",{"_index":875,"title":{},"body":{"injectables/LogService.html":{}}}],["localstorage.removeitem(\"token",{"_index":876,"title":{},"body":{"injectables/LogService.html":{}}}],["localstorage.setitem(\"favouritecities\",json.stringify(this.c",{"_index":1232,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["localstorage.setitem(\"sess",{"_index":900,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["localstorage.setitem(\"token",{"_index":892,"title":{},"body":{"injectables/LogService.html":{}}}],["localstorage.setitem(\"token\",\"bear",{"_index":926,"title":{},"body":{"injectables/LogService.html":{}}}],["locat",{"_index":392,"title":{},"body":{"components/CityComponent.html":{},"injectables/WeatherService.html":{}}}],["log",{"_index":249,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["log.servic",{"_index":808,"title":{},"body":{"components/InterceptorComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["loggin",{"_index":101,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["loggindialogcompon",{"_index":100,"title":{"components/LogginDialogComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":830,"title":{},"body":{"injectables/LogService.html":{}}}],["login(usernam",{"_index":846,"title":{},"body":{"injectables/LogService.html":{}}}],["logrefresh",{"_index":831,"title":{},"body":{"injectables/LogService.html":{}}}],["logservic",{"_index":799,"title":{"injectables/LogService.html":{}},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"coverage.html":{}}}],["logsubscript",{"_index":1055,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["logsubscription2",{"_index":1056,"title":{},"body":{"components/NavigationComponent.html":{}}}],["lon",{"_index":337,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{}}}],["long",{"_index":1017,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["look",{"_index":736,"title":{},"body":{"components/InitialComponent.html":{}}}],["lop",{"_index":340,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["ls",{"_index":1220,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["main",{"_index":513,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{}}}],["make",{"_index":664,"title":{},"body":{"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"classes/SavedCity.html":{},"injectables/WeatherService.html":{}}}],["manag",{"_index":567,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{}}}],["mat",{"_index":421,"title":{},"body":{"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["mat_dialog_data",{"_index":987,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["matautocompletemodul",{"_index":1038,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matbuttonmodul",{"_index":195,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["matcardmodul",{"_index":1024,"title":{},"body":{"modules/MaterialModule.html":{}}}],["match",{"_index":111,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["matcheckboxmodul",{"_index":196,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["matchipsmodul",{"_index":1035,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matchpassword",{"_index":1182,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["matchpassword(ac",{"_index":1174,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["matdialog",{"_index":1070,"title":{},"body":{"components/NavigationComponent.html":{}}}],["matdialogmodul",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{}}}],["matdialogref",{"_index":971,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["materi",{"_index":1042,"title":{},"body":{"modules/MaterialModule.html":{}}}],["material/fab",{"_index":1544,"title":{},"body":{"dependencies.html":{}}}],["material/material.modul",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["materialmodul",{"_index":133,"title":{"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["matexpansionmodul",{"_index":1037,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matgridlistmodul",{"_index":1025,"title":{},"body":{"modules/MaterialModule.html":{}}}],["math.max(...this.wind",{"_index":502,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["maticonmodul",{"_index":1023,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matinputmodul",{"_index":1029,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matlistmodul",{"_index":1033,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matmenumodul",{"_index":1021,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matprogressspinnermodul",{"_index":1034,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matradiomodul",{"_index":1032,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matselectmodul",{"_index":1030,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matsidenavmodul",{"_index":1026,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matslidermodul",{"_index":1031,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matslidetogglemodul",{"_index":1040,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matsnackbar",{"_index":378,"title":{},"body":{"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["matsnackbarmodul",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["matsortmodul",{"_index":1027,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattabl",{"_index":510,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["mattabledatasourc",{"_index":394,"title":{},"body":{"components/CityComponent.html":{}}}],["mattabledatasource(this.valuesdisplay",{"_index":423,"title":{},"body":{"components/CityComponent.html":{}}}],["mattablemodul",{"_index":1028,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattabsmodul",{"_index":1039,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matter",{"_index":952,"title":{},"body":{"injectables/LogService.html":{}}}],["mattoolbarmodul",{"_index":1022,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattooltipmodul",{"_index":1036,"title":{},"body":{"modules/MaterialModule.html":{}}}],["max",{"_index":501,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/TemperatureService.html":{}}}],["maxlengtherror",{"_index":961,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["mb",{"_index":789,"title":{},"body":{"components/InitialComponent.html":{}}}],["meant",{"_index":778,"title":{},"body":{"components/InitialComponent.html":{}}}],["memori",{"_index":733,"title":{},"body":{"components/InitialComponent.html":{}}}],["menu",{"_index":1142,"title":{},"body":{"components/NavigationComponent.html":{}}}],["messag",{"_index":1402,"title":{},"body":{"classes/WeatherNow.html":{}}}],["metadata",{"_index":11,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["metemo",{"_index":1233,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["method",{"_index":19,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["microservic",{"_index":443,"title":{},"body":{"components/CityComponent.html":{}}}],["min",{"_index":499,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/TemperatureService.html":{}}}],["minlengtherror",{"_index":962,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["minut",{"_index":71,"title":{},"body":{"components/AboutComponent.html":{}}}],["miscellan",{"_index":1597,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["missunderstand",{"_index":1505,"title":{},"body":{"injectables/WeatherService.html":{}}}],["modifi",{"_index":1239,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["modul",{"_index":123,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":606,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["more",{"_index":1588,"title":{},"body":{"index.html":{}}}],["more_vert",{"_index":1146,"title":{},"body":{"components/NavigationComponent.html":{}}}],["much",{"_index":732,"title":{},"body":{"components/InitialComponent.html":{},"modules/MaterialModule.html":{}}}],["multi",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["mw",{"_index":928,"title":{},"body":{"injectables/LogService.html":{}}}],["name",{"_index":88,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"index.html":{}}}],["navig",{"_index":208,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"index.html":{}}}],["navigation'},{'nam",{"_index":104,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["navigation.component.css",{"_index":1049,"title":{},"body":{"components/NavigationComponent.html":{}}}],["navigation.component.html",{"_index":1050,"title":{},"body":{"components/NavigationComponent.html":{}}}],["navigation/navigation.compon",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["navigationcompon",{"_index":103,"title":{"components/NavigationComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["nciti",{"_index":230,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["necessari",{"_index":1046,"title":{},"body":{"modules/MaterialModule.html":{}}}],["never",{"_index":1222,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["new",{"_index":106,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"coverage.html":{},"index.html":{}}}],["newus",{"_index":966,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["newusercompon",{"_index":105,"title":{"components/NewUserComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["next",{"_index":804,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["next.handle(request",{"_index":812,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["ng",{"_index":1563,"title":{},"body":{"index.html":{}}}],["ngmodul",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["ngondestroy",{"_index":1063,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["ngoninit",{"_index":20,"title":{},"body":{"components/AboutComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["nif",{"_index":933,"title":{},"body":{"injectables/LogService.html":{}}}],["none",{"_index":709,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["notempti",{"_index":1057,"title":{},"body":{"components/NavigationComponent.html":{}}}],["notsur",{"_index":1064,"title":{},"body":{"components/NavigationComponent.html":{}}}],["npassword",{"_index":228,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["null",{"_index":1002,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/SavedCitiesService.html":{},"classes/WeatherNow.html":{}}}],["number",{"_index":264,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{}}}],["nvm",{"_index":1552,"title":{},"body":{"dependencies.html":{}}}],["object",{"_index":387,"title":{},"body":{"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"miscellaneous/variables.html":{}}}],["observ",{"_index":589,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"injectables/WeatherService.html":{}}}],["obtain",{"_index":62,"title":{},"body":{"components/AboutComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{}}}],["ok",{"_index":295,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["on",{"_index":212,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["ondestroy",{"_index":1048,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["oninit",{"_index":10,"title":{},"body":{"components/AboutComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["ontim",{"_index":53,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{}}}],["op",{"_index":341,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["open",{"_index":1069,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["openweath",{"_index":1508,"title":{},"body":{"injectables/WeatherService.html":{}}}],["openweathermap",{"_index":64,"title":{},"body":{"components/AboutComponent.html":{},"injectables/WeatherService.html":{}}}],["optimum",{"_index":729,"title":{},"body":{"components/InitialComponent.html":{}}}],["option",{"_index":258,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["order",{"_index":1043,"title":{},"body":{"modules/MaterialModule.html":{}}}],["out",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"components/NavigationComponent.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1593,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p1",{"_index":1175,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["p1.valu",{"_index":1179,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["p2",{"_index":1177,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["p2.valu",{"_index":1180,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["packag",{"_index":1531,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["para",{"_index":1405,"title":{},"body":{"classes/WeatherNow.html":{}}}],["param",{"_index":261,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["paramet",{"_index":257,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["parámetro",{"_index":332,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["passwd",{"_index":1284,"title":{},"body":{"components/SettingsComponent.html":{}}}],["password",{"_index":222,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"classes/UserServer.html":{}}}],["password2",{"_index":1155,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["passwordrequirederror",{"_index":963,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["passwordvalid",{"_index":1171,"title":{"classes/PasswordValidation.html":{}},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"coverage.html":{}}}],["passwordvalidation.matchpassword",{"_index":1167,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["password}\"}`).subscribe(r",{"_index":954,"title":{},"body":{"injectables/LogService.html":{}}}],["path",{"_index":197,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/NavigationComponent.html":{}}}],["pathmatch",{"_index":200,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["per",{"_index":70,"title":{},"body":{"components/AboutComponent.html":{}}}],["percentag",{"_index":492,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/WeatherNow.html":{}}}],["perform",{"_index":730,"title":{},"body":{"components/InitialComponent.html":{}}}],["perman",{"_index":1336,"title":{},"body":{"components/SettingsComponent.html":{}}}],["pick",{"_index":1135,"title":{},"body":{"components/NavigationComponent.html":{}}}],["pop",{"_index":1010,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["popstateev",{"_index":400,"title":{},"body":{"components/CityComponent.html":{}}}],["possibl",{"_index":446,"title":{},"body":{"components/CityComponent.html":{}}}],["prepar",{"_index":405,"title":{},"body":{"components/CityComponent.html":{},"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["present",{"_index":1140,"title":{},"body":{"components/NavigationComponent.html":{}}}],["pressur",{"_index":516,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["primari",{"_index":659,"title":{},"body":{"components/GraphsComponent.html":{}}}],["primero",{"_index":328,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["privat",{"_index":290,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"injectables/WeatherService.html":{}}}],["problem",{"_index":918,"title":{},"body":{"injectables/LogService.html":{}}}],["process",{"_index":919,"title":{},"body":{"injectables/LogService.html":{}}}],["prod",{"_index":1575,"title":{},"body":{"index.html":{}}}],["produc",{"_index":751,"title":{},"body":{"components/InitialComponent.html":{}}}],["product",{"_index":1577,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["proffit",{"_index":75,"title":{},"body":{"components/AboutComponent.html":{}}}],["profil",{"_index":1058,"title":{},"body":{"components/NavigationComponent.html":{}}}],["project",{"_index":73,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["properti",{"_index":116,"title":{},"body":{"components/AppComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["protractor",{"_index":1585,"title":{},"body":{"index.html":{}}}],["provid",{"_index":55,"title":{},"body":{"components/AboutComponent.html":{},"modules/AppModule.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"overview.html":{}}}],["providedin",{"_index":289,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{}}}],["public",{"_index":1052,"title":{},"body":{"components/NavigationComponent.html":{}}}],["purpos",{"_index":76,"title":{},"body":{"components/AboutComponent.html":{}}}],["put",{"_index":414,"title":{},"body":{"components/CityComponent.html":{}}}],["pwd",{"_index":1277,"title":{},"body":{"components/SettingsComponent.html":{}}}],["que",{"_index":330,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["queri",{"_index":69,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{}}}],["rain",{"_index":524,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["rainandsnow",{"_index":620,"title":{},"body":{"components/GraphsComponent.html":{}}}],["rainandsnow/rain",{"_index":643,"title":{},"body":{"components/GraphsComponent.html":{}}}],["rainandsnowchart",{"_index":612,"title":{},"body":{"components/GraphsComponent.html":{}}}],["rainandsnowservic",{"_index":623,"title":{"injectables/RainAndSnowService.html":{}},"body":{"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"coverage.html":{}}}],["raincolor",{"_index":613,"title":{},"body":{"components/GraphsComponent.html":{}}}],["reach",{"_index":1223,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["reactiveformsmodul",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["readm",{"_index":1589,"title":{},"body":{"index.html":{}}}],["receiv",{"_index":415,"title":{},"body":{"components/CityComponent.html":{},"classes/WeatherNow.html":{}}}],["redirect",{"_index":210,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/SettingsComponent.html":{}}}],["redirectto",{"_index":198,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["ref",{"_index":1127,"title":{},"body":{"components/NavigationComponent.html":{}}}],["refresh",{"_index":398,"title":{},"body":{"components/CityComponent.html":{},"components/NavigationComponent.html":{}}}],["reload",{"_index":1568,"title":{},"body":{"index.html":{}}}],["relog",{"_index":1065,"title":{},"body":{"components/NavigationComponent.html":{}}}],["repeat",{"_index":1172,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["repres",{"_index":420,"title":{},"body":{"components/CityComponent.html":{}}}],["request",{"_index":307,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/WeatherService.html":{}}}],["request.clon",{"_index":816,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["requir",{"_index":787,"title":{},"body":{"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":1601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res.headers.get('x",{"_index":893,"title":{},"body":{"injectables/LogService.html":{}}}],["reset",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"components/SettingsComponent.html":{},"overview.html":{}}}],["respons",{"_index":207,"title":{},"body":{"modules/AppRoutingModule.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/RespuestaForecast.html":{},"injectables/WeatherService.html":{}}}],["response.data[0].c",{"_index":898,"title":{},"body":{"injectables/LogService.html":{}}}],["respuestaforecast",{"_index":395,"title":{"classes/RespuestaForecast.html":{}},"body":{"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"classes/RespuestaForecast.html":{},"coverage.html":{}}}],["result",{"_index":110,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":25,"title":{},"body":{"components/AboutComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["right",{"_index":211,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["root",{"_index":113,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{}}}],["root'},{'nam",{"_index":91,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["rop",{"_index":342,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rout",{"_index":191,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/LogginDialogComponent.html":{},"overview.html":{},"routes.html":{}}}],["router",{"_index":835,"title":{},"body":{"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["router.events.subscribe(valu",{"_index":1096,"title":{},"body":{"components/NavigationComponent.html":{}}}],["routermodul",{"_index":190,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(rout",{"_index":206,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routesubscript",{"_index":1059,"title":{},"body":{"components/NavigationComponent.html":{}}}],["routing.modul",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.t",{"_index":187,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["run",{"_index":1562,"title":{},"body":{"index.html":{}}}],["rx",{"_index":367,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"classes/WeatherNow.html":{}}}],["rx.base",{"_index":1412,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.clouds.al",{"_index":1422,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.cod",{"_index":1437,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.coord.lat",{"_index":1407,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.coord.lon",{"_index":1406,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.data.foreach(item",{"_index":319,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.data.length",{"_index":316,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.data[0].countri",{"_index":355,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.data[0].id.tostr",{"_index":354,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.data[0].lat",{"_index":357,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.data[0].lon",{"_index":356,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.dt",{"_index":1427,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.id",{"_index":1434,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.grnd_level",{"_index":1419,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.humid",{"_index":1415,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.pressur",{"_index":1414,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.sea_level",{"_index":1418,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.temp",{"_index":1413,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.temp_max",{"_index":1417,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.temp_min",{"_index":1416,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.name",{"_index":1435,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.rain[\"3h",{"_index":1424,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.snow[\"3h",{"_index":1426,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.countri",{"_index":1431,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.id",{"_index":1429,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.messag",{"_index":1430,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.sunris",{"_index":1432,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.sunset",{"_index":1433,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.typ",{"_index":1428,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.weather.foreach((w",{"_index":1408,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.wind.deg",{"_index":1421,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.wind.spe",{"_index":1420,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rxciti",{"_index":679,"title":{},"body":{"components/InitialComponent.html":{}}}],["rxj",{"_index":599,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/WeatherService.html":{},"dependencies.html":{}}}],["save",{"_index":287,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{}}}],["save(citytosav",{"_index":1211,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["savec",{"_index":372,"title":{},"body":{"components/CityComponent.html":{}}}],["savedc",{"_index":219,"title":{"classes/SavedCity.html":{}},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/UserServer.html":{},"coverage.html":{}}}],["savedcitiesservic",{"_index":255,"title":{"injectables/SavedCitiesService.html":{}},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"coverage.html":{}}}],["savedcity(element.nam",{"_index":722,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["savedcity(item.nam",{"_index":321,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["savedcity(nam",{"_index":411,"title":{},"body":{"components/CityComponent.html":{}}}],["savedcity(rx.data[0].nam",{"_index":353,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["savedcity(this.rxcity.nam",{"_index":745,"title":{},"body":{"components/InitialComponent.html":{}}}],["savedcity.nam",{"_index":1147,"title":{},"body":{"components/NavigationComponent.html":{}}}],["scaffold",{"_index":1569,"title":{},"body":{"index.html":{}}}],["scale",{"_index":495,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["sea",{"_index":1457,"title":{},"body":{"classes/WeatherNow.html":{}}}],["sea_level",{"_index":517,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["search",{"_index":314,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"classes/SavedCity.html":{},"injectables/WeatherService.html":{}}}],["searchbyid",{"_index":250,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["searchbyid(c",{"_index":270,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["searchbynam",{"_index":251,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["searchbyname(nam",{"_index":272,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["selector",{"_index":12,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["send",{"_index":566,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{}}}],["serv",{"_index":1564,"title":{},"body":{"index.html":{}}}],["servedc",{"_index":286,"title":{"classes/ServedCity.html":{}},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"coverage.html":{}}}],["server",{"_index":359,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"index.html":{}}}],["server.servic",{"_index":713,"title":{},"body":{"components/InitialComponent.html":{},"injectables/LogService.html":{}}}],["server.service.t",{"_index":242,"title":{},"body":{"injectables/CitiesServerService.html":{},"coverage.html":{}}}],["server.service.ts:107",{"_index":265,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:125",{"_index":271,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:146",{"_index":267,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:15",{"_index":278,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:17",{"_index":281,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:18",{"_index":283,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:19",{"_index":256,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:26",{"_index":275,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:53",{"_index":273,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:84",{"_index":268,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:89",{"_index":262,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server/services/rest",{"_index":815,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["server/services/rest/cities/c",{"_index":280,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server/services/rest/log/log",{"_index":853,"title":{},"body":{"injectables/LogService.html":{}}}],["server/services/rest/users/login",{"_index":814,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["serverrespons",{"_index":285,"title":{"classes/ServerResponse.html":{}},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"coverage.html":{}}}],["servic",{"_index":59,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{}}}],["service'",{"_index":1131,"title":{},"body":{"components/NavigationComponent.html":{}}}],["serviceworkermodul",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["serviceworkermodule.register('/ngsw",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["session",{"_index":56,"title":{},"body":{"components/AboutComponent.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["set",{"_index":37,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{}}}],["set(rx",{"_index":1400,"title":{},"body":{"classes/WeatherNow.html":{}}}],["setciti",{"_index":584,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["setcity(c",{"_index":591,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["setcurrentus",{"_index":1285,"title":{},"body":{"components/SettingsComponent.html":{}}}],["setfromlist",{"_index":1360,"title":{},"body":{"classes/UserServer.html":{}}}],["setfromlist(list",{"_index":233,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["sethead",{"_index":817,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["settings.component.css",{"_index":1271,"title":{},"body":{"components/SettingsComponent.html":{}}}],["settings.component.html",{"_index":1272,"title":{},"body":{"components/SettingsComponent.html":{}}}],["settings/settings.compon",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["settingscompon",{"_index":108,"title":{"components/SettingsComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["setvalu",{"_index":585,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["setvalues(valu",{"_index":593,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["sever",{"_index":451,"title":{},"body":{"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["share",{"_index":605,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["short",{"_index":1016,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["shouldn't",{"_index":1338,"title":{},"body":{"components/SettingsComponent.html":{}}}],["shouldn\\'t",{"_index":1340,"title":{},"body":{"components/SettingsComponent.html":{}}}],["show",{"_index":42,"title":{},"body":{"components/AboutComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["show/hid",{"_index":766,"title":{},"body":{"components/InitialComponent.html":{}}}],["showdelet",{"_index":1286,"title":{},"body":{"components/SettingsComponent.html":{}}}],["showforecast",{"_index":368,"title":{},"body":{"components/CityComponent.html":{}}}],["showlin",{"_index":494,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["sidenav",{"_index":1138,"title":{},"body":{"components/NavigationComponent.html":{}}}],["sign",{"_index":1012,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["simpli",{"_index":604,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["snackbar",{"_index":377,"title":{},"body":{"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["snow",{"_index":525,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["snow.servic",{"_index":644,"title":{},"body":{"components/GraphsComponent.html":{}}}],["snow.service.t",{"_index":1190,"title":{},"body":{"injectables/RainAndSnowService.html":{},"coverage.html":{}}}],["snow.service.ts:10",{"_index":1195,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["snow.service.ts:11",{"_index":1196,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["snow.service.ts:12",{"_index":1197,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["snow.service.ts:13",{"_index":1192,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["snow.service.ts:17",{"_index":1194,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["someon",{"_index":863,"title":{},"body":{"injectables/LogService.html":{}}}],["somw",{"_index":43,"title":{},"body":{"components/AboutComponent.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"index.html":{}}}],["spec\\.t",{"_index":1602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["speed",{"_index":485,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["src/.../environment.prod.t",{"_index":1599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.t",{"_index":1600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../test.t",{"_index":1598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/about/about.component.t",{"_index":8,"title":{},"body":{"components/AboutComponent.html":{},"coverage.html":{}}}],["src/app/about/about.component.ts:13",{"_index":24,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/about/about.component.ts:9",{"_index":23,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/app",{"_index":186,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.t",{"_index":112,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:9",{"_index":122,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.t",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/citi",{"_index":241,"title":{},"body":{"injectables/CitiesServerService.html":{},"coverage.html":{}}}],["src/app/city/city.component.t",{"_index":360,"title":{},"body":{"components/CityComponent.html":{},"coverage.html":{}}}],["src/app/city/city.component.ts:25",{"_index":383,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:26",{"_index":390,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:27",{"_index":388,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:28",{"_index":389,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:29",{"_index":384,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:30",{"_index":385,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:31",{"_index":386,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:32",{"_index":379,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:47",{"_index":381,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:50",{"_index":380,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:85",{"_index":382,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/data.t",{"_index":506,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"coverage.html":{}}}],["src/app/city/data.ts:14",{"_index":571,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:15",{"_index":572,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:16",{"_index":573,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:18",{"_index":574,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:29",{"_index":576,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:37",{"_index":577,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:42",{"_index":575,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:43",{"_index":569,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:5",{"_index":508,"title":{},"body":{"classes/Data.html":{}}}],["src/app/city/data.ts:6",{"_index":507,"title":{},"body":{"classes/Data.html":{}}}],["src/app/city/data.ts:96",{"_index":1203,"title":{},"body":{"classes/RespuestaForecast.html":{}}}],["src/app/forecast",{"_index":578,"title":{},"body":{"injectables/ForecastValuesService.html":{},"coverage.html":{}}}],["src/app/graphs/cloudsandwind/cloud",{"_index":457,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"coverage.html":{}}}],["src/app/graphs/graphs.component.t",{"_index":607,"title":{},"body":{"components/GraphsComponent.html":{},"coverage.html":{}}}],["src/app/graphs/graphs.component.ts:103",{"_index":627,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:120",{"_index":625,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:18",{"_index":632,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:19",{"_index":639,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:20",{"_index":640,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:21",{"_index":641,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:22",{"_index":633,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:23",{"_index":636,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:24",{"_index":631,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:25",{"_index":637,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:26",{"_index":634,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:27",{"_index":630,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:28",{"_index":629,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:29",{"_index":638,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:30",{"_index":635,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:31",{"_index":624,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:63",{"_index":626,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:83",{"_index":628,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/rainandsnow/rain",{"_index":1189,"title":{},"body":{"injectables/RainAndSnowService.html":{},"coverage.html":{}}}],["src/app/graphs/temperature/temperature.service.t",{"_index":1341,"title":{},"body":{"injectables/TemperatureService.html":{},"coverage.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:10",{"_index":1346,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:11",{"_index":1347,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:12",{"_index":1348,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:13",{"_index":1349,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:14",{"_index":1343,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:18",{"_index":1345,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/initial/initial.component.t",{"_index":669,"title":{},"body":{"components/InitialComponent.html":{},"coverage.html":{}}}],["src/app/initial/initial.component.ts:109",{"_index":700,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:119",{"_index":699,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:126",{"_index":694,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:23",{"_index":711,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:24",{"_index":705,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:25",{"_index":706,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:26",{"_index":710,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:27",{"_index":712,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:28",{"_index":704,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:29",{"_index":702,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:30",{"_index":707,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:31",{"_index":701,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:32",{"_index":708,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:34",{"_index":689,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:44",{"_index":697,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:49",{"_index":695,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:64",{"_index":696,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:91",{"_index":698,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/interceptor/interceptor.component.t",{"_index":792,"title":{},"body":{"components/InterceptorComponent.html":{},"coverage.html":{}}}],["src/app/interceptor/interceptor.component.ts:11",{"_index":800,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["src/app/interceptor/interceptor.component.ts:15",{"_index":806,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["src/app/log.service.t",{"_index":822,"title":{},"body":{"injectables/LogService.html":{},"coverage.html":{}}}],["src/app/log.service.ts:140",{"_index":848,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:171",{"_index":839,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:20",{"_index":852,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:208",{"_index":843,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:21",{"_index":859,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:22",{"_index":857,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:228",{"_index":841,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:23",{"_index":856,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:237",{"_index":850,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:25",{"_index":854,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:26",{"_index":858,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:27",{"_index":855,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:28",{"_index":836,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:37",{"_index":844,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:40",{"_index":845,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:45",{"_index":837,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:69",{"_index":851,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:81",{"_index":847,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/loggin",{"_index":955,"title":{},"body":{"components/LogginDialogComponent.html":{},"coverage.html":{}}}],["src/app/material/material.module.t",{"_index":1020,"title":{},"body":{"modules/MaterialModule.html":{}}}],["src/app/navigation/navigation.component.t",{"_index":1047,"title":{},"body":{"components/NavigationComponent.html":{},"coverage.html":{}}}],["src/app/navigation/navigation.component.ts:105",{"_index":1080,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:118",{"_index":1073,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:127",{"_index":1082,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:130",{"_index":1078,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:134",{"_index":1081,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:18",{"_index":1094,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:19",{"_index":1093,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:20",{"_index":1083,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:21",{"_index":1089,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:22",{"_index":1090,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:23",{"_index":1072,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:24",{"_index":1091,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:25",{"_index":1086,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:26",{"_index":1085,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:27",{"_index":1088,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:28",{"_index":1092,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:29",{"_index":1087,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:30",{"_index":1071,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:36",{"_index":1084,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:49",{"_index":1077,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:56",{"_index":1076,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:63",{"_index":1079,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:76",{"_index":1075,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:90",{"_index":1074,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/new",{"_index":1151,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"coverage.html":{}}}],["src/app/sav",{"_index":1204,"title":{},"body":{"injectables/SavedCitiesService.html":{},"coverage.html":{}}}],["src/app/savedcity.t",{"_index":1240,"title":{},"body":{"classes/SavedCity.html":{},"coverage.html":{}}}],["src/app/savedcity.ts:2",{"_index":1249,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:24",{"_index":1251,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:3",{"_index":1248,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:4",{"_index":1250,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:5",{"_index":1247,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:6",{"_index":1246,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:9",{"_index":1245,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/servedcity.t",{"_index":1259,"title":{},"body":{"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"coverage.html":{}}}],["src/app/servedcity.ts:2",{"_index":1264,"title":{},"body":{"classes/ServedCity.html":{}}}],["src/app/servedcity.ts:20",{"_index":1269,"title":{},"body":{"classes/ServerResponse.html":{}}}],["src/app/servedcity.ts:3",{"_index":1262,"title":{},"body":{"classes/ServedCity.html":{}}}],["src/app/servedcity.ts:4",{"_index":1261,"title":{},"body":{"classes/ServedCity.html":{}}}],["src/app/servedcity.ts:5",{"_index":1263,"title":{},"body":{"classes/ServedCity.html":{}}}],["src/app/servedcity.ts:6",{"_index":1260,"title":{},"body":{"classes/ServedCity.html":{}}}],["src/app/settings/settings.component.t",{"_index":1270,"title":{},"body":{"components/SettingsComponent.html":{},"coverage.html":{}}}],["src/app/settings/settings.component.ts:111",{"_index":1299,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:117",{"_index":1295,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:122",{"_index":1301,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:17",{"_index":1304,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:18",{"_index":1308,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:19",{"_index":1309,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:20",{"_index":1307,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:21",{"_index":1306,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:22",{"_index":1312,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:23",{"_index":1310,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:24",{"_index":1305,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:25",{"_index":1290,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:35",{"_index":1298,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:45",{"_index":1297,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:49",{"_index":1300,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:58",{"_index":1292,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:68",{"_index":1291,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:75",{"_index":1296,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:85",{"_index":1294,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:88",{"_index":1303,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:97",{"_index":1302,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/userserver.t",{"_index":216,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{},"coverage.html":{}}}],["src/app/userserver.ts:13",{"_index":1366,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:17",{"_index":1367,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:27",{"_index":218,"title":{},"body":{"classes/CitiesResponse.html":{}}}],["src/app/userserver.ts:31",{"_index":238,"title":{},"body":{"classes/CitiesResponseUnit.html":{}}}],["src/app/userserver.ts:4",{"_index":1365,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:5",{"_index":1364,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:6",{"_index":1363,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:7",{"_index":1362,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:8",{"_index":1361,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/weather.service.t",{"_index":1486,"title":{},"body":{"injectables/WeatherService.html":{},"coverage.html":{}}}],["src/app/weather.service.ts:11",{"_index":1491,"title":{},"body":{"injectables/WeatherService.html":{}}}],["src/app/weather.service.ts:17",{"_index":1495,"title":{},"body":{"injectables/WeatherService.html":{}}}],["src/app/weather.service.ts:22",{"_index":1497,"title":{},"body":{"injectables/WeatherService.html":{}}}],["src/app/weather.service.ts:28",{"_index":1493,"title":{},"body":{"injectables/WeatherService.html":{}}}],["src/app/weather.t",{"_index":1368,"title":{},"body":{"classes/Weather.html":{},"coverage.html":{}}}],["src/app/weather.ts:3",{"_index":1371,"title":{},"body":{"classes/Weather.html":{}}}],["src/app/weather.ts:4",{"_index":1372,"title":{},"body":{"classes/Weather.html":{}}}],["src/app/weather.ts:5",{"_index":1370,"title":{},"body":{"classes/Weather.html":{}}}],["src/app/weather.ts:6",{"_index":1369,"title":{},"body":{"classes/Weather.html":{}}}],["src/app/weathernow.t",{"_index":1373,"title":{},"body":{"classes/WeatherNow.html":{},"coverage.html":{}}}],["src/app/weathernow.ts:102",{"_index":1399,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:14",{"_index":1380,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:15",{"_index":1386,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:16",{"_index":1393,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:17",{"_index":1381,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:174",{"_index":1397,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:18",{"_index":1388,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:19",{"_index":1390,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:20",{"_index":1384,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:21",{"_index":1391,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:22",{"_index":1385,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:23",{"_index":1387,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:24",{"_index":1382,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:28",{"_index":1389,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:29",{"_index":1379,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:35",{"_index":1401,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:6",{"_index":1383,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:7",{"_index":1392,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/environments/environment.prod.t",{"_index":1525,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.t",{"_index":1527,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test.t",{"_index":1528,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":1557,"title":{"index.html":{}},"body":{}}],["statement",{"_index":1511,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1173,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["storag",{"_index":448,"title":{},"body":{"components/CityComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["store",{"_index":346,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/InitialComponent.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/WeatherNow.html":{},"index.html":{}}}],["string",{"_index":118,"title":{},"body":{"components/AppComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["styles.css",{"_index":41,"title":{},"body":{"components/AboutComponent.html":{}}}],["styleurl",{"_index":14,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["subject",{"_index":597,"title":{},"body":{"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["submit",{"_index":967,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["submitdelet",{"_index":1287,"title":{},"body":{"components/SettingsComponent.html":{}}}],["submitpassword",{"_index":1288,"title":{},"body":{"components/SettingsComponent.html":{}}}],["subscrib",{"_index":305,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{}}}],["subscribe(r",{"_index":890,"title":{},"body":{"injectables/LogService.html":{}}}],["subscribe(respons",{"_index":895,"title":{},"body":{"injectables/LogService.html":{}}}],["subscribe(rx",{"_index":947,"title":{},"body":{"injectables/LogService.html":{}}}],["subscript",{"_index":66,"title":{},"body":{"components/AboutComponent.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["successfulli",{"_index":935,"title":{},"body":{"injectables/LogService.html":{}}}],["suggest",{"_index":57,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{}}}],["sunris",{"_index":1403,"title":{},"body":{"classes/WeatherNow.html":{}}}],["sunset",{"_index":1404,"title":{},"body":{"classes/WeatherNow.html":{}}}],["support",{"_index":1590,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":1149,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["surnam",{"_index":931,"title":{},"body":{"injectables/LogService.html":{}}}],["surpridingli",{"_index":1225,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["svg",{"_index":1591,"title":{},"body":{"modules.html":{}}}],["sy",{"_index":1242,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["tabl",{"_index":406,"title":{},"body":{"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":1530,"title":{},"body":{"coverage.html":{}}}],["tbe",{"_index":38,"title":{},"body":{"components/AboutComponent.html":{}}}],["tell",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["temp",{"_index":518,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["temp_kf",{"_index":519,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["temp_max",{"_index":520,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["temp_min",{"_index":521,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["temperatur",{"_index":616,"title":{},"body":{"components/GraphsComponent.html":{},"injectables/TemperatureService.html":{},"classes/WeatherNow.html":{}}}],["temperature/temperature.servic",{"_index":642,"title":{},"body":{"components/GraphsComponent.html":{}}}],["temperaturechart",{"_index":614,"title":{},"body":{"components/GraphsComponent.html":{}}}],["temperaturecolor",{"_index":615,"title":{},"body":{"components/GraphsComponent.html":{}}}],["temperatureservic",{"_index":622,"title":{"injectables/TemperatureService.html":{}},"body":{"components/GraphsComponent.html":{},"injectables/TemperatureService.html":{},"coverage.html":{}}}],["temperaturesmax",{"_index":617,"title":{},"body":{"components/GraphsComponent.html":{},"injectables/TemperatureService.html":{}}}],["temperaturesmin",{"_index":618,"title":{},"body":{"components/GraphsComponent.html":{},"injectables/TemperatureService.html":{}}}],["templat",{"_index":4,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["templateurl",{"_index":16,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["test",{"_index":1579,"title":{},"body":{"index.html":{}}}],["text",{"_index":1398,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.admin",{"_index":767,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.author",{"_index":300,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.aux",{"_index":1482,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.bas",{"_index":1411,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.builddeleteform",{"_index":1316,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.buildpsswdform",{"_index":1315,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.changepassword(this.formpassword.value.password",{"_index":1326,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.chart",{"_index":480,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["this.checkandsave('bas",{"_index":1446,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('cloud",{"_index":1465,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('cod",{"_index":1481,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('descript",{"_index":1444,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('dt",{"_index":1473,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('humid",{"_index":1451,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('icon",{"_index":1445,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('id",{"_index":1442,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('latitud",{"_index":1440,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('longitud",{"_index":1439,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('main",{"_index":1443,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('maximum",{"_index":1455,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('minimum",{"_index":1453,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('nam",{"_index":1480,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('pressur",{"_index":1449,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('rain",{"_index":1467,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('si",{"_index":1474,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('snow",{"_index":1472,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('temperatur",{"_index":1447,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('wind",{"_index":1462,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkerror",{"_index":994,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.citi",{"_index":603,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["this.cities.find(c",{"_index":1228,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["this.cities.push(citytosav",{"_index":1231,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["this.cities.push(this.c",{"_index":1221,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["this.citiesid",{"_index":232,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["this.citieslist",{"_index":717,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citieslist.filter(el",{"_index":755,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citieslist.push(new",{"_index":721,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citiesserver.log",{"_index":762,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citiesserver.searchbyname(this.c",{"_index":758,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citiesserver.upload(>this.citieslist",{"_index":764,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citiesserverservice.loadfavourites(citieslist.split",{"_index":899,"title":{},"body":{"injectables/LogService.html":{}}}],["this.citiesserverservice.upload(this.currentuser.citieslist",{"_index":870,"title":{},"body":{"injectables/LogService.html":{}}}],["this.citiessubscription.unsubscrib",{"_index":1105,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.city.length",{"_index":737,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citymatch",{"_index":744,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.cityshown",{"_index":410,"title":{},"body":{"components/CityComponent.html":{}}}],["this.cityshown.coord",{"_index":436,"title":{},"body":{"components/CityComponent.html":{}}}],["this.cityshown.countri",{"_index":434,"title":{},"body":{"components/CityComponent.html":{}}}],["this.closesess",{"_index":943,"title":{},"body":{"injectables/LogService.html":{}}}],["this.cloud",{"_index":473,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.cloudcolor",{"_index":660,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.clouds.al",{"_index":1466,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.cloudsandwind",{"_index":654,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.cloudsandwindchart",{"_index":653,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.cloudsandwindservice.getcloudsandwindchart(this.forecastvalu",{"_index":667,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.cod",{"_index":1436,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.complexsearch(nam",{"_index":315,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.complexsearchid(c",{"_index":345,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.complexsearchid(parseint(c",{"_index":350,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.contenttyp",{"_index":299,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.coord",{"_index":1255,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["this.coord.lat",{"_index":1257,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["this.coord.lon",{"_index":1258,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["this.countri",{"_index":1265,"title":{},"body":{"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["this.currentus",{"_index":864,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["this.currentuser.citiesid",{"_index":904,"title":{},"body":{"injectables/LogService.html":{}}}],["this.currentuser.citieslist",{"_index":868,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["this.currentuser.favouritec",{"_index":873,"title":{},"body":{"injectables/LogService.html":{}}}],["this.currentuser.password",{"_index":903,"title":{},"body":{"injectables/LogService.html":{}}}],["this.currentuser.setfromlist(this.savedcitiesservice.getsavedc",{"_index":866,"title":{},"body":{"injectables/LogService.html":{}}}],["this.currentuser.usernam",{"_index":902,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["this.dat",{"_index":478,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["this.datasourc",{"_index":422,"title":{},"body":{"components/CityComponent.html":{}}}],["this.deleteaccount",{"_index":1332,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.deleteaccount1",{"_index":1333,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.deletebody(user.usernam",{"_index":942,"title":{},"body":{"injectables/LogService.html":{}}}],["this.deletec",{"_index":1126,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.dialog.open(loggindialogcompon",{"_index":1129,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.dialogref",{"_index":1128,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.dialogref.afterclosed().subscribe(data",{"_index":1130,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.dialogref.clos",{"_index":1008,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.dialogref.close(this.form.valu",{"_index":996,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.dt",{"_index":529,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.dt_txt",{"_index":531,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["this.emptylist",{"_index":1119,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.favouritec",{"_index":234,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["this.forecast",{"_index":425,"title":{},"body":{"components/CityComponent.html":{}}}],["this.forecast.push(new",{"_index":427,"title":{},"body":{"components/CityComponent.html":{}}}],["this.forecastvalu",{"_index":601,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{}}}],["this.forecastvalues.push(new",{"_index":656,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.forecastvaluesservice.getvalu",{"_index":662,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.forecastvaluesservice.setcity(this.cityshown",{"_index":430,"title":{},"body":{"components/CityComponent.html":{}}}],["this.forecastvaluesservice.setvalues(this.forecast",{"_index":429,"title":{},"body":{"components/CityComponent.html":{}}}],["this.forecastvaluesservice.setvalues(this.forecastvalu",{"_index":657,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.form",{"_index":988,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["this.form.valid",{"_index":995,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["this.form.value.password",{"_index":1169,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["this.formbuilder.group",{"_index":1164,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["this.formdelet",{"_index":1321,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.formdelete.valid",{"_index":1327,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.formdelete.value.password",{"_index":1329,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.formpassword",{"_index":1319,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.formpassword.valid",{"_index":1325,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.found",{"_index":748,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.foundc",{"_index":754,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.getc",{"_index":757,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["this.getcityweath",{"_index":401,"title":{},"body":{"components/CityComponent.html":{}}}],["this.getlog",{"_index":1100,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.getsavedc",{"_index":1237,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["this.goodcommonurl}/users/us",{"_index":946,"title":{},"body":{"injectables/LogService.html":{}}}],["this.http.get(this.weatherurl",{"_index":1503,"title":{},"body":{"injectables/WeatherService.html":{}}}],["this.http.get>(this.citieslisturl).subscribe(rx",{"_index":718,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.http.post(`${this.goodcommonurl}/fav/queri",{"_index":894,"title":{},"body":{"injectables/LogService.html":{}}}],["this.http.post(`${this.goodcommonurl}/users/updatepassword",{"_index":953,"title":{},"body":{"injectables/LogService.html":{}}}],["this.http.post(`${this.goodcommonurl}/users/us",{"_index":929,"title":{},"body":{"injectables/LogService.html":{}}}],["this.http.post(this.commonurl",{"_index":302,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.http.post(this.goodcommonurl",{"_index":877,"title":{},"body":{"injectables/LogService.html":{}}}],["this.http.request(new",{"_index":944,"title":{},"body":{"injectables/LogService.html":{}}}],["this.id",{"_index":1253,"title":{},"body":{"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{}}}],["this.islog",{"_index":1314,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.keyadmin",{"_index":773,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.keyadmin.substr",{"_index":775,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.lat",{"_index":1267,"title":{},"body":{"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["this.launchform",{"_index":1163,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["this.load",{"_index":739,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.log",{"_index":1112,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.log.currentus",{"_index":1317,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.log.deleteuser(this.currentus",{"_index":1330,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.log.getupdates().subscribe(log",{"_index":1323,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.log.login(usernam",{"_index":1328,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.log.updatepassword(passwd",{"_index":1324,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.login(username,password",{"_index":937,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logservice.closesess",{"_index":1125,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logservice.createuser(this.form.value.usernam",{"_index":1168,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["this.logservice.currentuser.username.replace(/['\"]+/g",{"_index":1114,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logservice.getupdates().subscribe(log",{"_index":1111,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logservice.login(data.usernam",{"_index":1134,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logservice.logrefresh",{"_index":1109,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logsubscript",{"_index":1110,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["this.logsubscription.unsubscrib",{"_index":1106,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["this.lon",{"_index":1266,"title":{},"body":{"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["this.main",{"_index":533,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.main.grnd_level",{"_index":1461,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.humid",{"_index":1452,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.pressur",{"_index":1450,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.sea_level",{"_index":1459,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.temp",{"_index":1448,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.temp_max",{"_index":1456,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.temp_min",{"_index":1454,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.maxlengtherror",{"_index":998,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.minlengtherror",{"_index":997,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.nam",{"_index":1252,"title":{},"body":{"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{}}}],["this.notempti",{"_index":1118,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.open",{"_index":1122,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.password",{"_index":229,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["this.passwordrequirederror",{"_index":999,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.profil",{"_index":1107,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.profile.replace(/['\"]+/g",{"_index":1108,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.pwd",{"_index":1331,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.rain",{"_index":557,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.rainandsnow",{"_index":652,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.rainandsnowchart",{"_index":651,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.rainandsnowservice.getrainandsnowchart(this.forecastvalu",{"_index":666,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.raincolor",{"_index":661,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.relog",{"_index":1099,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.result",{"_index":1438,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.result.push(this.aux",{"_index":1483,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.route.params.subscribe((valu",{"_index":399,"title":{},"body":{"components/CityComponent.html":{}}}],["this.route.snapshot.parammap.get('id",{"_index":408,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["this.route.snapshot.parammap.get('nam",{"_index":409,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["this.router.navigate(['/initi",{"_index":949,"title":{},"body":{"injectables/LogService.html":{}}}],["this.router.navigate(['initi",{"_index":1318,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.router.navigate(['us",{"_index":1009,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.routesubscription.unsubscrib",{"_index":1104,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.rx",{"_index":413,"title":{},"body":{"components/CityComponent.html":{}}}],["this.rxciti",{"_index":743,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.rxcity.id",{"_index":746,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.rxcity.sys.countri",{"_index":747,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.savedc",{"_index":1116,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.savedcities.length",{"_index":1115,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.savedcitiesservice.deletec",{"_index":874,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["this.savedcitiesservice.getsavedc",{"_index":869,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["this.savedcitiesservice.save(new",{"_index":352,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.savedcitiesservice.save(this.cityshown",{"_index":438,"title":{},"body":{"components/CityComponent.html":{}}}],["this.setcurrentus",{"_index":1313,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.si",{"_index":1254,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["this.snackbar.open",{"_index":913,"title":{},"body":{"injectables/LogService.html":{}}}],["this.snackbar.open(\"favourit",{"_index":1123,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.snackbar.open(\"log",{"_index":908,"title":{},"body":{"injectables/LogService.html":{}}}],["this.snackbar.open(`${this.cityshown.nam",{"_index":439,"title":{},"body":{"components/CityComponent.html":{}}}],["this.snow",{"_index":561,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.sys.countri",{"_index":1256,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["this.sys.id",{"_index":1476,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.sys.messag",{"_index":1477,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.sys.sunris",{"_index":1478,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.sys.sunset",{"_index":1479,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.sys.typ",{"_index":1475,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.temperatur",{"_index":650,"title":{},"body":{"components/GraphsComponent.html":{},"injectables/TemperatureService.html":{}}}],["this.temperaturechart",{"_index":649,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.temperaturecolor",{"_index":658,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.temperatureservice.gettemperaturechart(this.forecastvalu",{"_index":663,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.temperaturesmax",{"_index":1353,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["this.temperaturesmin",{"_index":1355,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["this.toggleadmin",{"_index":777,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.updated.asobserv",{"_index":600,"title":{},"body":{"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["this.updated.next(fals",{"_index":865,"title":{},"body":{"injectables/LogService.html":{}}}],["this.updated.next(this.c",{"_index":1217,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["this.updated.next(this.forecastvalu",{"_index":602,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["this.updated.next(tru",{"_index":906,"title":{},"body":{"injectables/LogService.html":{}}}],["this.updatesettings(\"c",{"_index":872,"title":{},"body":{"injectables/LogService.html":{}}}],["this.updateuserc",{"_index":871,"title":{},"body":{"injectables/LogService.html":{}}}],["this.usernam",{"_index":227,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["this.usernamerequirederror",{"_index":1000,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.valuesdisplay",{"_index":418,"title":{},"body":{"components/CityComponent.html":{}}}],["this.wasfound",{"_index":741,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.weath",{"_index":527,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.weather.foreach(w",{"_index":1441,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.weather.push(w",{"_index":552,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["this.weather.push(wthr",{"_index":1410,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.weathernow",{"_index":416,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weathernow.coord",{"_index":437,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weathernow.displayvalu",{"_index":419,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weathernow.set(rx",{"_index":417,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weathernow.sys.countri",{"_index":435,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weatherservice.getforecast(id).subscribe((rx",{"_index":655,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.weatherservice.getforecast(this.cityshown.id).subscribe((rx",{"_index":424,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weatherservice.getweather(this.cityshown.id).subscribe(rx",{"_index":412,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weatherservice.getweatherbycityname(this.city).subscribe(rx",{"_index":742,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.weatherurl",{"_index":1501,"title":{},"body":{"injectables/WeatherService.html":{}}}],["this.wind",{"_index":476,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.wind.deg",{"_index":1464,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.wind.spe",{"_index":1463,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.yousurebutton",{"_index":1121,"title":{},"body":{"components/NavigationComponent.html":{}}}],["through",{"_index":444,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{}}}],["tick",{"_index":498,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["titl",{"_index":117,"title":{},"body":{"components/AppComponent.html":{}}}],["toggleadmin",{"_index":682,"title":{},"body":{"components/InitialComponent.html":{}}}],["togglefavourit",{"_index":1066,"title":{},"body":{"components/NavigationComponent.html":{}}}],["togglesess",{"_index":1067,"title":{},"body":{"components/NavigationComponent.html":{}}}],["token",{"_index":891,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["train",{"_index":77,"title":{},"body":{"components/AboutComponent.html":{}}}],["transfer",{"_index":509,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["tri",{"_index":882,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["trigger",{"_index":769,"title":{},"body":{"components/InitialComponent.html":{}}}],["true",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"miscellaneous/variables.html":{}}}],["two",{"_index":781,"title":{},"body":{"components/InitialComponent.html":{}}}],["type",{"_index":119,"title":{},"body":{"components/AppComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["undefin",{"_index":293,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{}}}],["uniqu",{"_index":1499,"title":{},"body":{"injectables/WeatherService.html":{}}}],["unit",{"_index":1578,"title":{},"body":{"index.html":{}}}],["unsubscrib",{"_index":1101,"title":{},"body":{"components/NavigationComponent.html":{}}}],["up",{"_index":1011,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["updat",{"_index":407,"title":{},"body":{"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["updatepassword",{"_index":832,"title":{},"body":{"injectables/LogService.html":{}}}],["updatepassword(password",{"_index":849,"title":{},"body":{"injectables/LogService.html":{}}}],["updateuserc",{"_index":833,"title":{},"body":{"injectables/LogService.html":{}}}],["upload",{"_index":252,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{}}}],["upload(citieslist",{"_index":274,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["uploadal",{"_index":683,"title":{},"body":{"components/InitialComponent.html":{}}}],["uppercas",{"_index":784,"title":{},"body":{"components/InitialComponent.html":{}}}],["url",{"_index":214,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{}}}],["us",{"_index":48,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"injectables/WeatherService.html":{},"index.html":{}}}],["useclass",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":204,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/CitiesServerService.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["user'",{"_index":883,"title":{},"body":{"injectables/LogService.html":{}}}],["user'},{'nam",{"_index":107,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["user.compon",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/SettingsComponent.html":{}}}],["user.component.css",{"_index":1153,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["user.component.html",{"_index":1154,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["user.component.t",{"_index":1152,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"coverage.html":{}}}],["user.component.ts:15",{"_index":1161,"title":{},"body":{"components/NewUserComponent.html":{}}}],["user.component.ts:16",{"_index":1157,"title":{},"body":{"components/NewUserComponent.html":{}}}],["user.component.ts:24",{"_index":1159,"title":{},"body":{"components/NewUserComponent.html":{}}}],["user.component.ts:29",{"_index":1158,"title":{},"body":{"components/NewUserComponent.html":{}}}],["user.component.ts:39",{"_index":1160,"title":{},"body":{"components/NewUserComponent.html":{}}}],["user.component.ts:52",{"_index":1187,"title":{},"body":{"classes/PasswordValidation.html":{}}}],["user/new",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"coverage.html":{}}}],["user_",{"_index":930,"title":{},"body":{"injectables/LogService.html":{}}}],["usernam",{"_index":221,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"classes/UserServer.html":{}}}],["usernamerequirederror",{"_index":964,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["users/login",{"_index":889,"title":{},"body":{"injectables/LogService.html":{}}}],["userserv",{"_index":220,"title":{"classes/UserServer.html":{}},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/LogService.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"classes/UserServer.html":{},"coverage.html":{}}}],["ussernam",{"_index":1018,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["util",{"_index":779,"title":{},"body":{"components/InitialComponent.html":{},"injectables/LogService.html":{}}}],["vaku",{"_index":504,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["valid",{"_index":985,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["validatepassword(this.form",{"_index":1186,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["validators.compose([validators.minlength(5",{"_index":1165,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["validators.maxlength(20",{"_index":991,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["validators.maxlength(25",{"_index":1166,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["validators.minlength(4",{"_index":990,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["validators.requir",{"_index":992,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["valu",{"_index":121,"title":{},"body":{"components/AppComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"miscellaneous/variables.html":{}}}],["values.servic",{"_index":393,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["values.service.t",{"_index":579,"title":{},"body":{"injectables/ForecastValuesService.html":{},"coverage.html":{}}}],["values.service.ts:11",{"_index":596,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:12",{"_index":598,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:13",{"_index":595,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:15",{"_index":588,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:19",{"_index":594,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:24",{"_index":590,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:28",{"_index":592,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:32",{"_index":587,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:34",{"_index":586,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["valuesdisplay",{"_index":369,"title":{},"body":{"components/CityComponent.html":{}}}],["valuetim",{"_index":1278,"title":{},"body":{"components/SettingsComponent.html":{}}}],["var",{"_index":86,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["variabl",{"_index":1395,"title":{"miscellaneous/variables.html":{}},"body":{"classes/WeatherNow.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":1560,"title":{},"body":{"index.html":{}}}],["via",{"_index":1581,"title":{},"body":{"index.html":{}}}],["view",{"_index":36,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["void",{"_index":27,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{}}}],["volum",{"_index":1468,"title":{},"body":{"classes/WeatherNow.html":{}}}],["válido",{"_index":334,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["w",{"_index":543,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["w.descript",{"_index":550,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["w.icon",{"_index":548,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["w.id",{"_index":546,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["w.main",{"_index":544,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["want",{"_index":1335,"title":{},"body":{"components/SettingsComponent.html":{}}}],["wasfound",{"_index":680,"title":{},"body":{"components/InitialComponent.html":{}}}],["weather",{"_index":60,"title":{"classes/Weather.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"coverage.html":{}}}],["weather.descript",{"_index":551,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["weather.icon",{"_index":549,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["weather.id",{"_index":547,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["weather.main",{"_index":545,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["weather.servic",{"_index":391,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{}}}],["weatherangular",{"_index":1558,"title":{},"body":{"index.html":{}}}],["weathernow",{"_index":370,"title":{"classes/WeatherNow.html":{}},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"classes/WeatherNow.html":{},"coverage.html":{}}}],["weatherservic",{"_index":375,"title":{"injectables/WeatherService.html":{}},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"injectables/WeatherService.html":{},"coverage.html":{}}}],["weatherurl",{"_index":1487,"title":{},"body":{"injectables/WeatherService.html":{}}}],["web",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["went",{"_index":941,"title":{},"body":{"injectables/LogService.html":{}}}],["wind",{"_index":462,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["wind.servic",{"_index":646,"title":{},"body":{"components/GraphsComponent.html":{}}}],["wind.service.t",{"_index":458,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"coverage.html":{}}}],["wind.service.ts:10",{"_index":467,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["wind.service.ts:11",{"_index":470,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["wind.service.ts:12",{"_index":468,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["wind.service.ts:13",{"_index":469,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["wind.service.ts:15",{"_index":466,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["wind.service.ts:86",{"_index":464,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["window:keyup",{"_index":686,"title":{},"body":{"components/InitialComponent.html":{}}}],["window:keyup(ev",{"_index":692,"title":{},"body":{"components/InitialComponent.html":{}}}],["without",{"_index":318,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["work",{"_index":820,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["worker",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["worker.j",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["written",{"_index":770,"title":{},"body":{"components/InitialComponent.html":{}}}],["wrong",{"_index":914,"title":{},"body":{"injectables/LogService.html":{}}}],["wthr",{"_index":1409,"title":{},"body":{"classes/WeatherNow.html":{}}}],["xax",{"_index":496,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["yax",{"_index":497,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["yaxisid",{"_index":491,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["ye",{"_index":1150,"title":{},"body":{"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{}}}],["yor",{"_index":1148,"title":{},"body":{"components/NavigationComponent.html":{}}}],["yousur",{"_index":1068,"title":{},"body":{"components/NavigationComponent.html":{}}}],["yousurebutton",{"_index":1060,"title":{},"body":{"components/NavigationComponent.html":{}}}],["zone.j",{"_index":1555,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AboutComponent.html":{"url":"components/AboutComponent.html","title":"component - AboutComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AboutComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/about/about.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-about\n            \n\n            \n                styleUrls\n                about.component.css\n            \n\n\n\n            \n                templateUrl\n                ./about.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/about/about.component.ts:9\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/about/about.component.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css']\n})\n\nexport class AboutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n    const body = document.getElementsByTagName(\"body\");\n    body[0].classList.add(\"initial-view\"); //Sets tbe background image in the styles.css\n  }\n\n}\n\n/**This component shows somw general information about the app */\n    \n\n    \n        \n  \n    This application has been developed using\n    Angular as the framework to create the client and\n    Ontimize EE to provide session and suggested cities service.\n  \n  \n  \n    The weather data is obtained from the API of\n    OpenWeatherMap in a free subscription limited to 60 queries per minute.\n  \n  \n  \n    Every images and icons have been obtained from free sources and this project generates no economical proffits. The purpose\n    of this app was training me as a developer during a internship in\n    Imatia Innovation.\n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      This application has been developed using    Angular as the framework to create the client and    Ontimize EE to provide session and suggested cities service.          The weather data is obtained from the API of    OpenWeatherMap in a free subscription limited to 60 queries per minute.          Every images and icons have been obtained from free sources and this project generates no economical proffits. The purpose    of this app was training me as a developer during a internship in    Imatia Innovation.  '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AboutComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                app.component.css\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        title:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Weather-Angular'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Weather-Angular';\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n  Modules\n  AppModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAboutComponent\n\nAboutComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAboutComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nCityComponent\n\nCityComponent\n\nAppModule -->\n\nCityComponent->AppModule\n\n\n\n\n\nGraphsComponent\n\nGraphsComponent\n\nAppModule -->\n\nGraphsComponent->AppModule\n\n\n\n\n\nInitialComponent\n\nInitialComponent\n\nAppModule -->\n\nInitialComponent->AppModule\n\n\n\n\n\nInterceptorComponent\n\nInterceptorComponent\n\nAppModule -->\n\nInterceptorComponent->AppModule\n\n\n\n\n\nLogginDialogComponent\n\nLogginDialogComponent\n\nAppModule -->\n\nLogginDialogComponent->AppModule\n\n\n\n\n\nNavigationComponent\n\nNavigationComponent\n\nAppModule -->\n\nNavigationComponent->AppModule\n\n\n\n\n\nNewUserComponent\n\nNewUserComponent\n\nAppModule -->\n\nNewUserComponent->AppModule\n\n\n\n\n\nSettingsComponent\n\nSettingsComponent\n\nAppModule -->\n\nSettingsComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                AboutComponent\n                            \n                            \n                                AppComponent\n                            \n                            \n                                CityComponent\n                            \n                            \n                                GraphsComponent\n                            \n                            \n                                InitialComponent\n                            \n                            \n                                InterceptorComponent\n                            \n                            \n                                LogginDialogComponent\n                            \n                            \n                                NavigationComponent\n                            \n                            \n                                NewUserComponent\n                            \n                            \n                                SettingsComponent\n                            \n                    \n                \n                \n                    EntryComponents\n                    \n                            \n                                LogginDialogComponent\n                            \n                    \n                \n                \n                    Imports\n                    \n                            \n                                    AppRoutingModule\n                            \n                            \n                                    MaterialModule\n                            \n                    \n                \n                \n                    Bootstrap\n                    \n                            \n                                AppComponent\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { InitialComponent } from './initial/initial.component';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './/app-routing.module';\nimport { CityComponent } from './city/city.component';\nimport { NavigationComponent } from './navigation/navigation.component';\n\nimport { MaterialModule } from './material/material.module';\nimport { GraphsComponent } from './graphs/graphs.component';\n\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\nimport { LogginDialogComponent } from './loggin-dialog/loggin-dialog.component';\nimport { MatDialogModule, MatSnackBarModule } from '@angular/material';\nimport { ReactiveFormsModule} from '@angular/forms';\nimport { NewUserComponent } from './new-user/new-user.component';\nimport { SettingsComponent } from './settings/settings.component';\nimport { AboutComponent } from './about/about.component';\nimport { InterceptorComponent } from './interceptor/interceptor.component';\nimport {HTTP_INTERCEPTORS} from '@angular/common/http';\n\n\n\n@NgModule({ //Tells how to compile and launch the application\n  declarations: [\n    AppComponent,\n    InitialComponent,\n    CityComponent,\n    NavigationComponent,\n    GraphsComponent,\n    LogginDialogComponent,\n    NewUserComponent,\n    SettingsComponent,\n    AboutComponent,\n    InterceptorComponent,\n  ],\n  imports: [\n    BrowserModule,\n    MaterialModule,\n    FormsModule,\n    HttpClientModule,\n    AppRoutingModule,\n    ServiceWorkerModule.register('/ngsw-worker.js', { enabled: environment.production }),\n    MatDialogModule,\n    ReactiveFormsModule,\n    MatSnackBarModule\n  ],\n  providers: [{\n    provide: HTTP_INTERCEPTORS,\n    useClass: InterceptorComponent,\n    multi: true,\n  }],\n  bootstrap: [AppComponent], //root component that Angular inserts into the index.html host web page\n  entryComponents: [LogginDialogComponent]\n})\nexport class AppModule { }\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n  Modules\n  AppRoutingModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n        \n\n        \n            \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { InitialComponent } from './initial/initial.component';\nimport { CityComponent } from './city/city.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatButtonModule, MatCheckboxModule } from '@angular/material';\nimport { GraphsComponent } from './graphs/graphs.component';\nimport { NewUserComponent } from './new-user/new-user.component';\nimport { SettingsComponent } from './settings/settings.component';\nimport { AboutComponent } from './about/about.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/initial', pathMatch: 'full' },\n  { path: 'initial', component: InitialComponent },\n  { path: 'city/:id/:name', component: CityComponent },\n  { path: 'graph', component: GraphsComponent },\n  { path: 'user', component: NewUserComponent },\n  { path: 'settings', component: SettingsComponent },\n  { path: 'about', component: AboutComponent },\n  { path: 'graphs/:id/:name', component: GraphsComponent }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes),\n    BrowserAnimationsModule,\n    MatButtonModule,\n    MatCheckboxModule\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n/*\nThis is the routing module. It is responsible for the navigation across the different components, redirecting the application to the right one for each URL.\n*/\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CitiesResponse.html":{"url":"classes/CitiesResponse.html","title":"class - CitiesResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  CitiesResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/userServer.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        data:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SavedCity } from \"./savedCity\";\n\nexport class UserServer {\n    username : string;\n    password : string;\n    favouriteCities : string;\n    citiesId : Array;\n    citiesList : Array;\n\n    constructor(){}\n    \n\n    display(): string{\n        return \"Username: \" + this.username + \"\\nPassword: \" + this.password + \"\\nCities ids: \" + this.citiesId;\n    }\n\n    setFromList(list : Array){\n        this.favouriteCities = list.map(item => item.id).join(',');\n    }\n}\n\n\n\n\n//New\nexport class CitiesResponse {\n    data : Array;\n}\n\nexport class CitiesResponseUnit {\n    CITIES : string;\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CitiesResponseUnit.html":{"url":"classes/CitiesResponseUnit.html","title":"class - CitiesResponseUnit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  CitiesResponseUnit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/userServer.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                CITIES\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CITIES\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        CITIES:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:31\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SavedCity } from \"./savedCity\";\n\nexport class UserServer {\n    username : string;\n    password : string;\n    favouriteCities : string;\n    citiesId : Array;\n    citiesList : Array;\n\n    constructor(){}\n    \n\n    display(): string{\n        return \"Username: \" + this.username + \"\\nPassword: \" + this.password + \"\\nCities ids: \" + this.citiesId;\n    }\n\n    setFromList(list : Array){\n        this.favouriteCities = list.map(item => item.id).join(',');\n    }\n}\n\n\n\n\n//New\nexport class CitiesResponse {\n    data : Array;\n}\n\nexport class CitiesResponseUnit {\n    CITIES : string;\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CitiesServerService.html":{"url":"injectables/CitiesServerService.html","title":"injectable - CitiesServerService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  CitiesServerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/cities-server.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization\n                            \n                            \n                                citiesList\n                            \n                            \n                                commonUrl\n                            \n                            \n                                contentType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                complexSearch\n                            \n                            \n                                complexSearchId\n                            \n                            \n                                loadFavourites\n                            \n                            \n                                log\n                            \n                            \n                                searchById\n                            \n                            \n                                searchByName\n                            \n                            \n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, savedCitiesService: SavedCitiesService)\n                    \n                \n                        \n                            \n                                Defined in src/app/cities-server.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        savedCitiesService\n                                                  \n                                                        \n                                                                    SavedCitiesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            complexSearch\n                            \n                            \n                        \n                    \n                \n                \n                    \ncomplexSearch(value: string, param: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:89\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        param\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            complexSearchId\n                            \n                            \n                        \n                    \n                \n                \n                    \ncomplexSearchId(value: number, param: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:107\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        param\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadFavourites\n                            \n                            \n                        \n                    \n                \n                \n                    \nloadFavourites(cities: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:146\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cities\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            log\n                            \n                            \n                        \n                    \n                \n                \n                    \nlog()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:84\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            searchById\n                            \n                            \n                        \n                    \n                \n                \n                    \nsearchById(city: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:125\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        city\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     SavedCity\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            searchByName\n                            \n                            \n                        \n                    \n                \n                \n                    \nsearchByName(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:53\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            upload\n                            \n                            \n                        \n                    \n                \n                \n                    \nupload(citiesList: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:26\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        citiesList\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            authorization\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        authorization:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGlvbi10aW1lIjoxNTI4OTU2OTY0MTE2LCJ1c2VybmFtZSI6ImRlbW8ifQ.xKAhjdQ9yEy2AuS8Dp3qtoBmEFL0wAclsK4LRmKZ9nE'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesList:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            commonUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        commonUrl:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"http://localhost:8080/citiesservice-server/services/rest/cities/city\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contentType\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contentType:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'application/json'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:18\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { SavedCity } from './savedCity';\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { ServerResponse, ServedCity } from './servedCity'\nimport { SavedCitiesService } from './saved-cities.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CitiesServerService {\n\n  citiesList: Array;\n\n  commonUrl = \"http://localhost:8080/citiesservice-server/services/rest/cities/city\";\n  contentType = 'application/json';\n  authorization = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGlvbi10aW1lIjoxNTI4OTU2OTY0MTE2LCJ1c2VybmFtZSI6ImRlbW8ifQ.xKAhjdQ9yEy2AuS8Dp3qtoBmEFL0wAclsK4LRmKZ9nE';\n\n  constructor(\n    private http: HttpClient,\n    private savedCitiesService: SavedCitiesService\n  ) { }\n\n  upload(citiesList: Array): Boolean {\n    //Used to fill in the database\n    if (citiesList === undefined) {\n      return false;\n    }\n\n    let ok = true;\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': this.contentType,\n        'Authorization': this.authorization\n      })\n    };\n    citiesList.forEach(city => {\n      this.http.post(this.commonUrl, city.insertBody(), httpOptions).subscribe(rx => {\n        //We subscribe for the insert results\n        console.log(\"Upload request results\");\n        console.log(rx);\n      },\n        error => {\n          console.log(\"Tried to upload an existing city: \" + city.name);\n          ok = false;\n        });\n    });\n    return ok;\n  }\n\n  searchByName(name: string): Array {\n    const ans = new Array();\n\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': this.contentType,\n        'Authorization': this.authorization\n      })\n    };\n\n\n    this.http.post(this.commonUrl + \"/search\", this.complexSearch(name, \"NAME\"), httpOptions).subscribe(rx => {\n      //We subscribe for the search results\n      if (rx.data.length === undefined) {\n        console.log(\"Query without results\");\n        return ans;\n      }\n      rx.data.forEach(item => {\n        ans.push(\n          new SavedCity(item.NAME, item.ID.toString(), item.COUNTRY, item.LON, item.LAT)\n        );\n      }, error => {\n        console.log(\"Query to city dataBase failed\");\n      });\n    },\n    );\n\n\n    return ans;\n  }\n\n  log(): Boolean {\n    console.log(\"LOG\");\n    return true;\n  }\n\n  complexSearch(value: string, param: string): string {\n    //primero comprobamos que el parámetro es válido\n    if (param !== \"NAME\" && param !== \"ID\" && param !== \"COUNTRY\" && param !== \"LAT\" && param !== \"LON\") {\n      param = \"NAME\";\n    }\n\n    return `{\n      \"filter\": {\n        \"@basic_expression\":{\n          \"lop\" : \"` + param + `\",\n          \"op\" : \"LIKE\",\n          \"rop\" : \"%` + value + `%\"\n        }\n      },\n      \"columns\":[ \"ID\",\"COUNTRY\",\"LAT\",\"LON\",\"NAME\"]\n     }`;\n  }\n\n  complexSearchId(value: number, param: string): string {\n    //primero comprobamos que el parámetro es válido\n    if (param !== \"NAME\" && param !== \"ID\" && param !== \"COUNTRY\" && param !== \"LAT\" && param !== \"LON\") {\n      param = \"NAME\";\n    }\n\n    return `{\n      \"filter\": {\n        \"@basic_expression\":{\n          \"lop\" : \"` + param + `\",\n          \"op\" : \"=\",\n          \"rop\" : ` + value + `\n        }\n      },\n      \"columns\":[ \"ID\",\"COUNTRY\",\"LAT\",\"LON\",\"NAME\"]\n     }`;\n  }\n\n  searchById(city: number): SavedCity {\n    let ans: SavedCity;\n\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': this.contentType,\n        'Authorization': this.authorization\n      })\n    };\n\n    this.http.post(this.commonUrl + \"/search\", this.complexSearchId(city, \"ID\"), httpOptions).subscribe(rx => {\n      //We subscribe for the search results\n      console.log(rx);\n      rx.data.forEach(item => {\n        ans = new SavedCity(item.NAME, item.ID.toString(), item.COUNTRY, item.LON, item.LAT);\n      });\n    });\n\n    return ans;\n  }\n\n  loadFavourites(cities: Array) {\n    //Queries every city by id in the user and stores it in localStorage as favourites\n\n    /*let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': this.contentType,\n        'Authorization': this.authorization\n      })\n    };*/\n    cities.forEach(city => {\n      this.http.post(this.commonUrl + \"/search\", this.complexSearchId(parseInt(city), \"ID\")).subscribe(rx =>\n        this.savedCitiesService.save(new SavedCity(rx.data[0].NAME, rx.data[0].ID.toString(), rx.data[0].COUNTRY, rx.data[0].LON, rx.data[0].LAT))\n      );\n    });\n  }\n\n}\n/* This service interacts with the server Ontimize, with the service of cities */\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CityComponent.html":{"url":"components/CityComponent.html","title":"component - CityComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CityComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/city/city.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-city\n            \n\n            \n                styleUrls\n                city.component.css\n            \n\n\n\n            \n                templateUrl\n                ./city.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cityShown\n                            \n                            \n                                dataSource\n                            \n                            \n                                displayedColumns\n                            \n                            \n                                forecast\n                            \n                            \n                                rx\n                            \n                            \n                                showForecast\n                            \n                            \n                                valuesDisplayed\n                            \n                            \n                                weatherNow\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCityWeather\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                saveCity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(route: ActivatedRoute, weatherService: WeatherService, savedCitiesService: SavedCitiesService, forecastValuesService: ForecastValuesService, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/city/city.component.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        weatherService\n                                                  \n                                                        \n                                                                    WeatherService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        savedCitiesService\n                                                  \n                                                        \n                                                                    SavedCitiesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        forecastValuesService\n                                                  \n                                                        \n                                                                    ForecastValuesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCityWeather\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCityWeather()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/city/city.component.ts:50\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/city/city.component.ts:47\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saveCity\n                            \n                            \n                        \n                    \n                \n                \n                    \nsaveCity()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/city/city.component.ts:85\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cityShown\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cityShown:     SavedCity\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dataSource\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dataSource:     \n\n                    \n                \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            displayedColumns\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        displayedColumns:     []\n\n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['parameter', 'value']\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            forecast\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        forecast:     \n\n                    \n                \n                    \n                        \n                            Default value : new Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rx\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rx:     Object\n\n                    \n                \n                    \n                        \n                            Type :     Object\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            showForecast\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        showForecast:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valuesDisplayed\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        valuesDisplayed:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            weatherNow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        weatherNow:     WeatherNow\n\n                    \n                \n                    \n                        \n                            Type :     WeatherNow\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { SavedCity } from '../savedCity';\nimport { WeatherService } from '../weather.service';\nimport { WeatherNow } from '../weatherNow';\nimport { ActivatedRoute } from '@angular/router';\nimport { Location } from '@angular/common';\n\nimport { SavedCitiesService } from '../saved-cities.service';\nimport { ForecastValuesService } from '../forecast-values.service';\n\nimport { MatTableDataSource } from '@angular/material';\n\nimport { Data, Forecast, RespuestaForecast } from './data';\n\nimport { MatSnackBar } from '@angular/material'\n\n\n@Component({\n  selector: 'app-city',\n  templateUrl: './city.component.html',\n  styleUrls: ['./city.component.css']\n})\nexport class CityComponent implements OnInit {\n\n  cityShown: SavedCity;\n  weatherNow: WeatherNow;\n  rx: Object;\n  valuesDisplayed: Array;\n  dataSource;\n  displayedColumns = ['parameter', 'value'];\n  forecast = new Array();\n  showForecast = false;\n\n  constructor(\n    private route: ActivatedRoute,\n    private weatherService: WeatherService,\n    private savedCitiesService: SavedCitiesService,\n    private forecastValuesService: ForecastValuesService,\n    private snackBar : MatSnackBar\n  ) {\n    //listen to a change in the path to refresh info\n    this.route.params.subscribe((value: PopStateEvent) => {\n      this.getCityWeather();\n    });\n  }\n\n  ngOnInit() {}\n \n\n  getCityWeather() {\n    /**Gets id from URL and asks weather service for the current weather and forecast storing it in Objects and preparing table data. Updates forecast service Data */\n\n    //Get the parameters from the URL\n    const id = this.route.snapshot.paramMap.get('id');\n    const name = this.route.snapshot.paramMap.get('name');\n\n    this.cityShown = new SavedCity(name, id);\n\n    this.weatherService.getWeather(this.cityShown.id).subscribe(rx => {\n      this.rx = rx\n      //Put the values received in the object weatherNow\n      this.weatherNow = new WeatherNow();\n      this.weatherNow.set(rx);\n    \n      //Display the values\n      this.valuesDisplayed = this.weatherNow.displayValues();\n      //dataSource is used to represent the data in the mat table\n      this.dataSource = new MatTableDataSource(this.valuesDisplayed);\n    });\n\n    this.weatherService.getForecast(this.cityShown.id).subscribe((rx: RespuestaForecast) => {\n\n      this.forecast = [];\n\n      Array.from(rx.list).forEach(element => {\n        this.forecast.push(new Forecast(element));\n      });\n      //Updates the service with the current city forecasted values\n      this.forecastValuesService.setValues(this.forecast);\n      this.forecastValuesService.setCity(this.cityShown);\n\n    });\n  }\n\n  saveCity() {\n    /**Completes the cityShown info before storing it to localhost (Favourites) */\n    this.cityShown.country = this.weatherNow.sys.country;\n    this.cityShown.coord = this.weatherNow.coord;\n    this.savedCitiesService.save(this.cityShown);\n\n    this.snackBar.open(`${this.cityShown.name} saved to favourites`, `Ok`, { duration: 3000 });\n  }\n\n\n}\n/* \nThis component shows the information adquired from the microservice through the weather service. It gets the city code from the URL.\n\nFrom this component it is possible to save a new city to the local storage.\n\nAsks for a WeatherNow object with the city weather info to\n\nIncludes in its template a button that routes to the GraphsComponent, which shows several forecast graphs.\n*/\n    \n\n    \n        \n\n\n  This is the current weather data in {{cityShown.name}}:\n\n\n  Show forecast\n\n\n\n\n\n  favorite\n\n\n\n\n\n\n  \n    \n       Parameter \n       {{element.parameter}} \n    \n\n    \n       Value \n       {{element.value}} \n    \n\n    \n    \n  \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  This is the current weather data in {{cityShown.name}}:  Show forecast  favorite             Parameter        {{element.parameter}}                Value        {{element.value}}               '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CityComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudsAndWindService.html":{"url":"injectables/CloudsAndWindService.html","title":"injectable - CloudsAndWindService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  CloudsAndWindService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                chart\n                            \n                            \n                                clouds\n                            \n                            \n                                dates\n                            \n                            \n                                wind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCloudsAndWindChart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:86\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCloudsAndWindChart\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCloudsAndWindChart(forecast: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        forecast\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Chart\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        chart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clouds\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        clouds:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dates\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dates:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        wind:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:11\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Forecast } from '../../city/data';\nimport { Chart } from 'chart.js';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CloudsAndWindService {\n\n  chart: Chart;\n  wind: number[];\n  clouds: number[];\n  dates: string[];\n\n  getCloudsAndWindChart(forecast: Array): Chart {\n\n    this.clouds = forecast.map(item => {\n      return item.clouds.all;\n    });\n\n    this.wind = forecast.map(item => {\n      return item.wind.speed;\n    });\n\n    this.dates = forecast.map(item => {\n      return item.dt_txt;\n    });\n\n    this.chart = new Chart('cloudsAndWind', {\n      type: 'bar',\n      data: {\n        labels: this.dates,\n        datasets: [\n\n          {\n            label: 'Wind speed',\n            data: this.wind,\n            borderColor: \"#BADA55\",\n            fill: false,\n            backgroundColor: \"#aaaaaa\",\n            type: 'line',\n            yAxisID: 'Wind'\n          }, {\n            label: 'Clouds percentage',\n            data: this.clouds,\n            borderColor: \"#cccccc\",\n            fill: false,\n            showLine: true,\n            backgroundColor: \"#cccccc\",\n            yAxisID: 'Clouds'\n          }\n        ]\n      },\n      options: {\n\n        legend: {\n          display: true,\n          labels: {\n\n          }\n        },\n        scales: {\n          xAxes: [{\n            display: true\n          }],\n          yAxes: [{\n            id: 'Wind',\n            display: true,\n            ticks: {\n              min: 0,\n              max: Math.max(...this.wind)\n            }\n          }, {\n            id: 'Clouds',\n            display: true,\n            ticks: {\n              min: 0,\n              max: 100\n            }\n          }],\n        }\n      }\n    });\n\n    return this.chart;\n  }\n\n  constructor() { }\n}\n/* This service gets the forecast vakues formated and returns a chart*/\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Data.html":{"url":"classes/Data.html","title":"class - Data","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Data\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/city/data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                parameter\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/city/data.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            parameter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        parameter:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        value:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Weather } from '../weather'\n\n\nexport class Data {\n    parameter: string;\n    value: string;\n\n    constructor() { }\n}\n/* Data is used to transfer information as an array of Data to the MatTable in city */\n\nexport class Forecast {\n\n    clouds: { all: number };\n    dt: number;\n    dt_txt: string;\n\n    main: {\n        grnd_level: number,\n        humidity: number,\n        pressure: number,\n        sea_level: number,\n        temp: number,\n        temp_kf: number,\n        temp_max: number,\n        temp_min: number\n    };\n\n    weather: Array;\n    /*\n        id\n        main\n        description\n        icon\n    */\n\n    wind: {\n        speed: number,\n        deg: number\n    }\n\n    rain: number;\n    snow: number;\n    constructor(element: Forecast) {\n        this.weather = new Array();\n\n        this.clouds = element.clouds;\n        this.dt = element.dt;\n        this.dt_txt = element.dt_txt;\n\n        this.main = {\n            grnd_level: element.main.grnd_level,\n            humidity: element.main.humidity,\n            pressure: element.main.pressure,\n            sea_level: element.main.sea_level,\n            temp: element.main.temp,\n            temp_kf: element.main.temp_kf,\n            temp_max: element.main.temp_max,\n            temp_min: element.main.temp_min\n        };\n\n\n        element.weather.forEach((weather: Weather) => {\n            const w = new Weather();\n            w.main = weather.main;\n            w.id = weather.id;\n            w.icon = weather.icon;\n            w.description = weather.description;\n\n            this.weather.push(w);\n        });\n\n        this.wind = {\n            speed: element.wind.speed,\n            deg: element.wind.deg\n        };\n\n        if (element.rain == undefined) {\n            //console.log(\"rain undefined\");\n        } else {\n            this.rain = element.rain[\"3h\"];\n        }\n\n        if (element.snow == undefined) {\n            //console.log(\"snow undefined\");\n        } else {\n            this.snow = element.snow[\"3h\"];\n        }\n\n    }\n}\n/* The object Forecast stores all the information about the weather provided by the service for a certain hour */\n\nexport class RespuestaForecast {\n\n    list: Array;\n\n    constructor() { }\n}\n\n/* \nData types used for sending data to the mat-table, Graph services and managing a server response containing the forecast for several hours.\n*/\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Forecast.html":{"url":"classes/Forecast.html","title":"class - Forecast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Forecast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/city/data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                clouds\n                            \n                            \n                                dt\n                            \n                            \n                                dt_txt\n                            \n                            \n                                main\n                            \n                            \n                                rain\n                            \n                            \n                                snow\n                            \n                            \n                                weather\n                            \n                            \n                                wind\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(element: Forecast)\n                    \n                \n                        \n                            \n                                Defined in src/app/city/data.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                    Forecast\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clouds\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        clouds:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dt:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dt_txt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dt_txt:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            main\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        main:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rain\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rain:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        snow:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            weather\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        weather:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        wind:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:37\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Weather } from '../weather'\n\n\nexport class Data {\n    parameter: string;\n    value: string;\n\n    constructor() { }\n}\n/* Data is used to transfer information as an array of Data to the MatTable in city */\n\nexport class Forecast {\n\n    clouds: { all: number };\n    dt: number;\n    dt_txt: string;\n\n    main: {\n        grnd_level: number,\n        humidity: number,\n        pressure: number,\n        sea_level: number,\n        temp: number,\n        temp_kf: number,\n        temp_max: number,\n        temp_min: number\n    };\n\n    weather: Array;\n    /*\n        id\n        main\n        description\n        icon\n    */\n\n    wind: {\n        speed: number,\n        deg: number\n    }\n\n    rain: number;\n    snow: number;\n    constructor(element: Forecast) {\n        this.weather = new Array();\n\n        this.clouds = element.clouds;\n        this.dt = element.dt;\n        this.dt_txt = element.dt_txt;\n\n        this.main = {\n            grnd_level: element.main.grnd_level,\n            humidity: element.main.humidity,\n            pressure: element.main.pressure,\n            sea_level: element.main.sea_level,\n            temp: element.main.temp,\n            temp_kf: element.main.temp_kf,\n            temp_max: element.main.temp_max,\n            temp_min: element.main.temp_min\n        };\n\n\n        element.weather.forEach((weather: Weather) => {\n            const w = new Weather();\n            w.main = weather.main;\n            w.id = weather.id;\n            w.icon = weather.icon;\n            w.description = weather.description;\n\n            this.weather.push(w);\n        });\n\n        this.wind = {\n            speed: element.wind.speed,\n            deg: element.wind.deg\n        };\n\n        if (element.rain == undefined) {\n            //console.log(\"rain undefined\");\n        } else {\n            this.rain = element.rain[\"3h\"];\n        }\n\n        if (element.snow == undefined) {\n            //console.log(\"snow undefined\");\n        } else {\n            this.snow = element.snow[\"3h\"];\n        }\n\n    }\n}\n/* The object Forecast stores all the information about the weather provided by the service for a certain hour */\n\nexport class RespuestaForecast {\n\n    list: Array;\n\n    constructor() { }\n}\n\n/* \nData types used for sending data to the mat-table, Graph services and managing a server response containing the forecast for several hours.\n*/\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ForecastValuesService.html":{"url":"injectables/ForecastValuesService.html","title":"injectable - ForecastValuesService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  ForecastValuesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/forecast-values.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                            \n                                forecastValues\n                            \n                            \n                                updated\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCity\n                            \n                            \n                                getUpdates\n                            \n                            \n                                getValues\n                            \n                            \n                                setCity\n                            \n                            \n                                setValues\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/forecast-values.service.ts:34\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCity\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCity()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:32\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     SavedCity\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getUpdates\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetUpdates()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable>\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getValues\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetValues()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:24\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Array\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setCity\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetCity(city: SavedCity)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:28\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        city\n                                                        \n                                                                    SavedCity\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setValues\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetValues(values: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            city\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        city:     SavedCity\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            forecastValues\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        forecastValues:     \n\n                    \n                \n                    \n                        \n                            Default value : Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        updated:     \n\n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:12\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Forecast } from './city/data';\nimport { Observable, Subject } from 'rxjs';\nimport { SavedCity } from './savedCity';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ForecastValuesService {\n\n  forecastValues = Array();\n  updated = new Subject();\n  city: SavedCity;\n\n  getUpdates(): Observable>{\n    return >> this.updated.asObservable();\n  }\n\n  setValues(values: Array) {\n    this.forecastValues = values;\n    this.updated.next(this.forecastValues);\n  }\n\n  getValues(): Array {\n    return this.forecastValues;\n  }\n\n  setCity(city: SavedCity){\n    this.city = city;\n  }\n\n  getCity(): SavedCity{\n    return this.city;\n  }\n  \n  constructor() { }\n}\n\n//Simply stores and shares updates of the forecast values used in the current moment in the application\n \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GraphsComponent.html":{"url":"components/GraphsComponent.html","title":"component - GraphsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GraphsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/graphs/graphs.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-graphs\n            \n\n            \n                styleUrls\n                graphs.component.css\n            \n\n\n\n            \n                templateUrl\n                ./graphs.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                            \n                                cloudColor\n                            \n                            \n                                cloudsAndWindChart\n                            \n                            \n                                dates\n                            \n                            \n                                forecastValues\n                            \n                            \n                                rain\n                            \n                            \n                                rainAndSnowChart\n                            \n                            \n                                rainColor\n                            \n                            \n                                snow\n                            \n                            \n                                temperatureChart\n                            \n                            \n                                temperatureColor\n                            \n                            \n                                temperatures\n                            \n                            \n                                temperaturesMax\n                            \n                            \n                                temperaturesMin\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cloudsAndWind\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                rainAndSnow\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(forecastValuesService: ForecastValuesService, temperatureService: TemperatureService, rainAndSnowService: RainAndSnowService, cloudsAndWindService: CloudsAndWindService, weatherService: WeatherService, route: ActivatedRoute)\n                    \n                \n                        \n                            \n                                Defined in src/app/graphs/graphs.component.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        forecastValuesService\n                                                  \n                                                        \n                                                                    ForecastValuesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        temperatureService\n                                                  \n                                                        \n                                                                    TemperatureService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        rainAndSnowService\n                                                  \n                                                        \n                                                                    RainAndSnowService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        cloudsAndWindService\n                                                  \n                                                        \n                                                                    CloudsAndWindService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        weatherService\n                                                  \n                                                        \n                                                                    WeatherService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cloudsAndWind\n                            \n                            \n                        \n                    \n                \n                \n                    \ncloudsAndWind()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:120\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:63\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rainAndSnow\n                            \n                            \n                        \n                    \n                \n                \n                    \nrainAndSnow()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:103\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperature\n                            \n                            \n                        \n                    \n                \n                \n                    \ntemperature()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:83\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            city\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        city:     \n\n                    \n                \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cloudColor\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cloudColor:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cloudsAndWindChart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cloudsAndWindChart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dates\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dates:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            forecastValues\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        forecastValues:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rain\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rain:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rainAndSnowChart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rainAndSnowChart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rainColor\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rainColor:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        snow:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperatureChart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperatureChart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperatureColor\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperatureColor:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperatures\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperatures:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperaturesMax\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperaturesMax:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperaturesMin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperaturesMin:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:21\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { ForecastValuesService } from '../forecast-values.service';\nimport { Forecast, RespuestaForecast } from '../city/data';\nimport { Chart } from 'chart.js';\nimport { TemperatureService } from './temperature/temperature.service';\nimport { RainAndSnowService } from './rainAndSnow/rain-and-snow.service';\nimport { CloudsAndWindService } from './cloudsAndWind/clouds-and-wind.service';\nimport { WeatherService } from '../weather.service';\nimport { ActivatedRoute, Route } from '@angular/router';\n\n@Component({\n  selector: 'app-graphs',\n  templateUrl: './graphs.component.html',\n  styleUrls: ['./graphs.component.css']\n})\nexport class GraphsComponent implements OnInit {\n\n  forecastValues: Array;\n  temperatures: number[];\n  temperaturesMax: number[];\n  temperaturesMin: number[];\n  rain: number[];\n  snow: number[];\n  dates: string[];\n  temperatureChart: Chart;\n  rainAndSnowChart: Chart;\n  cloudsAndWindChart: Chart;\n  city;\n  temperatureColor = \"\";\n  rainColor = \"\";\n  cloudColor = \"\";\n\n  constructor(\n    private forecastValuesService: ForecastValuesService,\n    private temperatureService: TemperatureService,\n    private rainAndSnowService: RainAndSnowService,\n    private cloudsAndWindService: CloudsAndWindService,\n    private weatherService: WeatherService,\n    private route: ActivatedRoute\n  ) {\n\n    this.forecastValues = forecastValuesService.getValues();\n\n    forecastValuesService.getUpdates().subscribe(values => {\n      this.forecastValues = values;\n      //If the city changes, charts do so\n\n      if (this.temperatureChart) {\n        this.temperatureChart = undefined;\n        //this.temperature();\n      }\n      if (this.rainAndSnowChart) {\n        this.rainAndSnowChart = undefined;\n        //this.rainAndSnow();\n      }\n      if (this.cloudsAndWindChart) {\n        this.cloudsAndWindChart = undefined;\n        //this.cloudsAndWind();\n      }\n    });\n  }\n\n  ngOnInit() {\n\n    this.city = this.route.snapshot.paramMap.get('name');\n\n\n    const id = this.route.snapshot.paramMap.get('id');\n    this.weatherService.getForecast(id).subscribe((rx: RespuestaForecast) => {\n\n      this.forecastValues = [];\n\n      Array.from(rx.list).forEach(element => {\n        this.forecastValues.push(new Forecast(element));\n      });\n      //Updates the service with the current city forecasted values\n      this.forecastValuesService.setValues(this.forecastValues);\n\n      this.temperature();\n    });\n  }\n\n  temperature() {\n    \n    if (this.temperatureChart === undefined) {\n      this.temperatureColor = \"primary\";\n      this.cloudColor = \"\";\n      this.rainColor = \"\";\n      this.cloudsAndWindChart = undefined;\n      this.rainAndSnowChart = undefined;\n\n      this.forecastValues = this.forecastValuesService.getValues();\n\n      this.temperatureChart = this.temperatureService.getTemperatureChart(this.forecastValues);\n    } else {\n      //Makes the chart dissapear\n      this.temperatureChart = undefined;\n      this.temperatureColor = \"\";\n    }\n\n  }\n\n  rainAndSnow() {\n    if (this.rainAndSnowChart === undefined) {\n      this.rainColor = \"primary\";\n      this.temperatureColor = \"\";\n      this.cloudColor = \"\";\n      this.temperatureChart = undefined;\n      this.cloudsAndWindChart = undefined;\n\n      this.forecastValues = this.forecastValuesService.getValues();\n\n      this.rainAndSnowChart = this.rainAndSnowService.getRainAndSnowChart(this.forecastValues);\n    } else {\n      this.rainAndSnowChart = undefined;\n      this.rainColor = \"\";\n    }\n  }\n\n  cloudsAndWind() {\n    if (this.cloudsAndWindChart === undefined) {\n      this.cloudColor = \"primary\";\n      this.temperatureColor = \"\";\n      this.rainColor = \"\";\n      this.temperatureChart = undefined;\n      this.rainAndSnowChart = undefined;\n\n      this.forecastValues = this.forecastValuesService.getValues();\n\n      this.cloudsAndWindChart = this.cloudsAndWindService.getCloudsAndWindChart(this.forecastValues);\n    } else {\n      this.cloudsAndWindChart = undefined;\n      this.cloudColor = \"\";\n    }\n  }\n\n}\n/* This component shows and deletes the charts and obtains them from the services */\n    \n\n    \n        {{city}}\n\n\n\n  \n    \n      Temperature\n    \n    \n    \n      Rain and Snow\n    \n    \n    \n      Clouds and Wind\n    \n  \n\n  \n    \n      {{ temperatureChart }}\n    \n    \n      {{ rainAndSnowChart }}\n    \n    \n      {{ cloudsAndWindChart }}\n    \n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{city}}            Temperature                  Rain and Snow                  Clouds and Wind                  {{ temperatureChart }}              {{ rainAndSnowChart }}              {{ cloudsAndWindChart }}      '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GraphsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/InitialComponent.html":{"url":"components/InitialComponent.html","title":"component - InitialComponent","body":"\n                   \n\n\n\n\n\n  Components\n  InitialComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/initial/initial.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-initial\n            \n\n            \n                styleUrls\n                initial.component.css\n            \n\n\n\n            \n                templateUrl\n                ./initial.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admin\n                            \n                            \n                                citiesList\n                            \n                            \n                                citiesListURL\n                            \n                            \n                                cityMatch\n                            \n                            \n                                found\n                            \n                            \n                                foundCities\n                            \n                            \n                                keyAdmin\n                            \n                            \n                                loading\n                            \n                            \n                                rxCity\n                            \n                            \n                                wasFound\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCitiesList\n                            \n                            \n                                getCity\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                search\n                            \n                            \n                                toggleAdmin\n                            \n                            \n                                uploadAll\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:keyup\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(weatherService: WeatherService, http: HttpClient, citiesServer: CitiesServerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/initial/initial.component.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        weatherService\n                                                  \n                                                        \n                                                                    WeatherService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        citiesServer\n                                                  \n                                                        \n                                                                    CitiesServerService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        city\n                    \n                    \n                            \n                            Type:    string\n\n                            \n                        \n                            Default value: ''\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:34\n                            \n                        \n            \n        \n\n\n\n    \n    HostListeners        \n            \n                \n                    \n                        \n                        \n                            \n                            window:keyup\n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Arguments : '$event' \n                        \n                    \n                \n                    \nwindow:keyup(event: KeyboardEvent)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:126\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCitiesList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCitiesList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:49\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCity\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCity()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:64\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            search\n                            \n                            \n                        \n                    \n                \n                \n                    \nsearch()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:91\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleAdmin\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoggleAdmin()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:119\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            uploadAll\n                            \n                            \n                        \n                    \n                \n                \n                    \nuploadAll()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:109\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            admin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        admin:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesList:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesListURL\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesListURL:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '../../assets/city.list.json'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cityMatch\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cityMatch:     SavedCity\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            found\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        found:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            foundCities\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        foundCities:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            keyAdmin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        keyAdmin:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loading\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        loading:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'none'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rxCity\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rxCity:     SavedCity\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wasFound\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        wasFound:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'none'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, Input, HostListener } from '@angular/core';\n\nimport { WeatherService } from '../weather.service';\n\nimport { WeatherNow } from '../weatherNow';\nimport { SavedCity } from '../savedCity';\n\nimport { SavedCitiesService } from '../saved-cities.service';\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { CitiesServerService } from '../cities-server.service';\n\n\n\n@Component({\n  selector: 'app-initial',\n  templateUrl: './initial.component.html',\n  styleUrls: ['./initial.component.css']\n})\nexport class InitialComponent implements OnInit {\n\n  rxCity: SavedCity;\n  cityMatch: SavedCity;\n  found = false;\n  loading = 'none';\n  wasFound = 'none';\n  citiesListURL = '../../assets/city.list.json';\n  citiesList: Array;\n  foundCities: Array;\n  admin = false;\n  keyAdmin = \"\";\n\n  @Input() city: string = '';\n\n  constructor(\n    private weatherService: WeatherService,\n    private http: HttpClient,\n    private citiesServer: CitiesServerService\n  ) {\n    \n  }\n\n  ngOnInit() {\n    const body = document.getElementsByTagName(\"body\");\n    body[0].classList.add(\"initial-view\");\n  }\n\n  getCitiesList() {\n    //Requests to the assets folder the JSON with all the cities\n    this.citiesList = new Array();\n    this.http.get>(this.citiesListURL).subscribe(rx => {\n      //Stores every city in the cities List were searches will be accomplished\n      Array.from(rx).forEach(element => {\n        this.citiesList.push(new SavedCity(element.name, element.id, element.country, element.coord.lon, element.coord.lat));\n      });\n    }\n\n    );\n    //This method isn't compatible with a optimum performance of the application as it consumes too much memory and bandwidth\n  }\n\n\n  getCity() {\n    //This function looks for a service response searching with a city name\n\n    if (this.city.length == 0) {\n      //If the city field has no value the search is not launched\n      return;\n    }\n\n    this.loading = 'block';\n    this.wasFound = 'none';\n\n    this.weatherService.getWeatherByCityName(this.city).subscribe(rx => {\n      //We subscribe for the search results\n      this.rxCity = rx;\n      this.cityMatch = new SavedCity(this.rxCity.name, this.rxCity.id, this.rxCity.sys.country);\n      this.found = true;\n      this.loading = 'none';\n    },\n      error => {\n        this.found = false;\n        this.loading = 'none';\n        this.wasFound = 'block';\n      });\n\n  }\n\n\n  search(): void {\n    //Search in the cities.JSON is disabled. It produces a performance leakage\n    /*if((this.city.length>0)&&(this.citiesList !== undefined)){\n      this.foundCities = this.citiesList.filter(element => {\n        \n        return (element.name.includes(this.city));\n      });\n    }*/\n    this.getCity(); //Asks the API\n    if (this.city.length == 0) {\n      //If the city field has no value the search is not launched\n      return;\n    }\n    //Search in the dataBase through the server Ontimize EE\n    this.foundCities = this.citiesServer.searchByName(this.city);\n\n  }\n\n  uploadAll() {\n    //This function should not be called because it makes the app crash. However, it has been able to make all the inserts correctly in the dataBase.\n    this.citiesServer.log();\n    console.log(\n      this.citiesServer.upload(>this.citiesList)\n    );\n\n    console.log(\"complete upload of citiesList to the dataBase\");\n  }\n\n  toggleAdmin() {\n    //Show/Hide admin options\n    this.admin = !this.admin;\n  }\n\n  //Listens to the keyboard and triggers a function to show admin options when \"admin\" is written\n  @HostListener('window:keyup', ['$event'])\n  keyEvent(event: KeyboardEvent) {\n\n    this.keyAdmin = this.keyAdmin + event.key;\n    if (this.keyAdmin.substr(-5) === \"admin\") {\n      this.toggleAdmin();\n      this.keyAdmin = \"\";\n    }\n\n  }\n\n}\n/*\nThis component is meant to show an initial view of the application.\n\nIt has got a search utility with which new cities can be accessed\n\nDisplays two answers from two different sources:\n\n  An answer obtained searching by city name in the API\n\n  An answer obtained searching in the Ontimize EE database through the server OR searching in a local list of cities downloaded from assets\n*/\n    \n\n    \n        \n  \n\n    Look for a city: {{ city | uppercase }}\n\n    \n\n      \n        \n      \n      Searching...\n\n    \n  \n\n\n  Search with Weather-Angular!\n\n  \n    {{cityMatch.name}} ({{cityMatch.sys.country}})\n  \n\n  \n    \n    Enable suggestions (may require a 4.2 MB download)\n    Fill in the local dataBase\n  \n  The city searched was not found\n\n  Suggested results: \n  \n     {{found.name}} ({{found.sys.country}}) \n  \n\n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Look for a city: {{ city | uppercase }}                              Searching...        Search with Weather-Angular!      {{cityMatch.name}} ({{cityMatch.sys.country}})            Enable suggestions (may require a 4.2 MB download)    Fill in the local dataBase    The city searched was not found  Suggested results:        {{found.name}} ({{found.sys.country}})     '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'InitialComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/InterceptorComponent.html":{"url":"components/InterceptorComponent.html","title":"component - InterceptorComponent","body":"\n                   \n\n\n\n\n\n  Components\n  InterceptorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/interceptor/interceptor.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                HttpInterceptor\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-interceptor\n            \n\n            \n                styleUrls\n                interceptor.component.css\n            \n\n\n\n            \n                templateUrl\n                ./interceptor.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: LogService)\n                    \n                \n                        \n                            \n                                Defined in src/app/interceptor/interceptor.component.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                    LogService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intercept\n                            \n                            \n                        \n                    \n                \n                \n                    \nintercept(request: HttpRequest, next: HttpHandler)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/interceptor/interceptor.component.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                        \n                                                                    HttpRequest\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        next\n                                                        \n                                                                    HttpHandler\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { LogService } from '../log.service'\n\n@Component({\n  selector: 'app-interceptor',\n  templateUrl: './interceptor.component.html',\n  styleUrls: ['./interceptor.component.css']\n})\nexport class InterceptorComponent implements HttpInterceptor {\n\n  constructor(private auth: LogService) { }\n\n  intercept(request: HttpRequest, next: HttpHandler): Observable> {\n    if(request.method === \"DELETE\"){\n      console.log(\"Filtered the DELETE\");\n      return next.handle(request);\n    }\n    if(request.url.includes(`http://localhost:8080/citiesservice-server/services/rest/users/login`)){\n      return next.handle(request);\n    }\n\n    if(request.url.includes(`http://localhost:8080/citiesservice-server/services/rest`)){\n    request = request.clone({\n      setHeaders: {\n        'Authorization' : `${localStorage.getItem(\"Token\")}`,\n        'Content-Type' : `application/json`\n      }\n    });\n    //console.log(\"Interceptor working\");\n    //console.log(request);\n    }\n\n    \n    return next.handle(request);\n  }\n\n}\n\n    \n\n    \n        \n  interceptor works!\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  interceptor works!'\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'InterceptorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogService.html":{"url":"injectables/LogService.html","title":"injectable - LogService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  LogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/log.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization\n                            \n                            \n                                cities\n                            \n                            \n                                commonUrl\n                            \n                            \n                                contentType\n                            \n                            \n                                currentUser\n                            \n                            \n                                exists\n                            \n                            \n                                goodCommonUrl\n                            \n                            \n                                updated\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeSession\n                            \n                            \n                                createUser\n                            \n                            \n                                deleteBody\n                            \n                            \n                                deleteUser\n                            \n                            \n                                getToken\n                            \n                            \n                                getUpdates\n                            \n                            \n                                logIn\n                            \n                            \n                                logRefresh\n                            \n                            \n                                updatePassword\n                            \n                            \n                                updateUserCities\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(savedCitiesService: SavedCitiesService, http: HttpClient, citiesServerService: CitiesServerService, router: Router, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/log.service.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        savedCitiesService\n                                                  \n                                                        \n                                                                    SavedCitiesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        citiesServerService\n                                                  \n                                                        \n                                                                    CitiesServerService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            closeSession\n                            \n                            \n                        \n                    \n                \n                \n                    \ncloseSession()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:45\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createUser\n                            \n                            \n                        \n                    \n                \n                \n                    \ncreateUser(username: string, password: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:171\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        username\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        password\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteBody\n                            \n                            \n                        \n                    \n                \n                \n                    \ndeleteBody(username: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:228\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        username\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteUser\n                            \n                            \n                        \n                    \n                \n                \n                    \ndeleteUser(user: UserServer)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:208\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        user\n                                                        \n                                                                    UserServer\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getToken\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetToken()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:37\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getUpdates\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetUpdates()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:40\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logIn\n                            \n                            \n                        \n                    \n                \n                \n                    \nlogIn(username: string, password: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:81\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        username\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        password\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logRefresh\n                            \n                            \n                        \n                    \n                \n                \n                    \nlogRefresh()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:140\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatePassword\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdatePassword(password: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:237\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        password\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updateUserCities\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdateUserCities()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:69\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            authorization\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        authorization:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGlvbi10aW1lIjoxNTI4OTU2OTY0MTE2LCJ1c2VybmFtZSI6ImRlbW8ifQ.xKAhjdQ9yEy2AuS8Dp3qtoBmEFL0wAclsK4LRmKZ9nE'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cities\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cities:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            commonUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        commonUrl:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"http://localhost:8080/citiesservice-server/services/rest/log/log\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contentType\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contentType:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'application/json'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUser\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        currentUser:     UserServer\n\n                    \n                \n                    \n                        \n                            Type :     UserServer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exists\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        exists:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            goodCommonUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        goodCommonUrl:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"http://localhost:8080/citiesservice-server/services/rest\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        updated:     \n\n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:21\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { SavedCitiesService } from './saved-cities.service';\nimport { SavedCity } from './savedCity';\nimport { Observable, Subject } from 'rxjs';\nimport { HttpClient, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { ServerResponse, ServedCity } from './servedCity';\nimport { UserServer, CitiesResponse, CitiesResponseUnit } from './userServer';\nimport { WeatherService } from './weather.service';\nimport { CitiesServerService } from './cities-server.service';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material';\nimport { isNumber } from 'util';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LogService {\n\n\n  cities: Array;\n  updated = new Subject();\n  exists: Subject;\n  currentUser: UserServer; //Holds the info of the current logged user\n\n  commonUrl = \"http://localhost:8080/citiesservice-server/services/rest/log/log\";\n  goodCommonUrl = \"http://localhost:8080/citiesservice-server/services/rest\";\n  contentType = 'application/json';\n  authorization = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGlvbi10aW1lIjoxNTI4OTU2OTY0MTE2LCJ1c2VybmFtZSI6ImRlbW8ifQ.xKAhjdQ9yEy2AuS8Dp3qtoBmEFL0wAclsK4LRmKZ9nE';\n\n  constructor(\n    private savedCitiesService: SavedCitiesService,\n    private http: HttpClient,\n    private citiesServerService: CitiesServerService,\n    private router: Router,\n    private snackBar: MatSnackBar\n  ) { }\n  getToken(): string {\n    return `${localStorage.getItem(\"Token\")}`;\n  }\n  getUpdates(): Observable {\n    //Observable indicating if someone is logged in\n    return >this.updated.asObservable();\n  }\n\n  closeSession() {\n    if (this.currentUser === undefined) {\n      this.updated.next(false);\n      return;\n    }\n\n    //save to string favourite cities\n    this.currentUser.setFromList(this.savedCitiesService.getSavedCities());\n    //save the cities that don`t exist yet in the server\n    this.currentUser.citiesList = this.savedCitiesService.getSavedCities();\n    this.citiesServerService.upload(this.currentUser.citiesList);\n\n\n    this.updateUserCities() //New\n    //this.updateSettings(\"CITIES\", this.currentUser.favouriteCities); //To delete\n\n\n    this.savedCitiesService.deleteCities();\n    localStorage.removeItem(\"session\");\n    localStorage.removeItem(\"Token\");\n    this.updated.next(false);\n    this.currentUser = undefined;\n  }\n\n  updateUserCities() {\n    //New\n    const body = `{\n      \"CITIES\" : \"` + this.currentUser.favouriteCities + `\"\n    }`;\n\n    this.http.post(this.goodCommonUrl + \"/fav/update\", body).subscribe(res => { }, err => {\n      console.log(\"There's been an error trying to update user's list of cities in the db\");\n      console.log(body);\n    });\n  }\n\n  logIn(username: string, password: string) {\n    let citiesList = \"\";\n    //base64 coded\n    let auth = \"Basic \" + btoa(`${username}:${password}`);\n\n\n    this.http.post(this.goodCommonUrl + \"/users/login\", \"\", {\n      headers: new HttpHeaders({\n        'Authorization': auth\n      }),\n      observe: 'response'\n    }).subscribe(res => {\n      //Set the token\n      localStorage.setItem(\"Token\", \"Bearer \" + res.headers.get('X-Auth-Token'));\n\n      //Get the favourite cities\n      this.http.post(`${this.goodCommonUrl}/fav/query`, \"\").subscribe(response => {\n        //console.log(response.data[0].CITIES);\n        //console.log(response);\n        citiesList = response.data[0].CITIES;\n        //Fill in the cities server service\n        if (citiesList !== \"\") {\n          this.citiesServerService.loadFavourites(citiesList.split(','));\n        }\n\n        localStorage.setItem(\"session\", JSON.stringify(username));\n        this.currentUser = new UserServer();\n\n        this.currentUser.username = username;\n        this.currentUser.password = `Bearer ${res.headers.get('X-Auth-Token')}`;\n        this.currentUser.favouriteCities = citiesList;\n        this.currentUser.citiesId = citiesList.split(',');\n        this.currentUser.citiesList = this.savedCitiesService.getSavedCities();\n\n        this.updated.next(true);\n        //console.log(this.currentUser.display())\n        this.snackBar.open(\"Logged as \" + this.currentUser.username, \"Ok\", {\n          duration: 1500\n        });\n      }, error => {\n        console.log(\"Failure trying to obtain saved cities from the server\");\n      });\n\n\n\n    }, err => {\n      if(err.status === 401){\n        this.snackBar.open( \"Wrong password or username\" , \"Ok\", {\n          duration: 1500\n        });\n        console.log(\"Access denied\");\n      }else{\n      console.log(`There's been a problem with your log in process.`);\n      console.log(err);\n      }\n    });\n  }\n\n\n  logRefresh(){\n    let citiesList = \"\";\n    this.http.post(`${this.goodCommonUrl}/fav/query`, \"\").subscribe(response => {\n      //console.log(response.data[0].CITIES);\n      //console.log(response);\n      citiesList = response.data[0].CITIES;\n      //Fill in the cities server service\n      if (citiesList !== \"\") {\n        this.citiesServerService.loadFavourites(citiesList.split(','));\n      }\n\n      let username = localStorage.getItem(\"session\");\n      this.currentUser = new UserServer();\n\n      this.currentUser.username = username;\n      this.currentUser.password = localStorage.getItem(\"Token\");;\n      this.currentUser.favouriteCities = citiesList;\n      this.currentUser.citiesId = citiesList.split(',');\n      this.currentUser.citiesList = this.savedCitiesService.getSavedCities();\n\n      this.updated.next(true);\n      //console.log(this.currentUser.display())\n      this.snackBar.open(\"Logged as \" + this.currentUser.username, \"Ok\", {\n        duration: 1500\n      });\n    });\n  }\n\n  \n\n\n  createUser(username: string, password: string){\n    //Default Token for demo demouser. Don`t delete the demouser in the db because it would be complicated to create any other user afterwards\n    localStorage.setItem(\"Token\",\"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGlvbi10aW1lIjoxNTI4Nzk5MTY4MzgxLCJ1c2VybmFtZSI6ImRlbW8ifQ.vwEZijOag2iCSN0UPRTS8jqre1NGzHCrg6fVkDH2-mw\")\n    this.http.post(`${this.goodCommonUrl}/users/user`,`\n    {\n      \"data\": {\n        \"USER_\": \"${username}\",\n        \"PASSWORD\": \"${password}\",\n        \"NAME\": \"\",\n        \"SURNAME\": \"\",\n        \"EMAIL\": \"\",\n        \"NIF\" : \"\"\n      }\n      \n     }\n    `).subscribe(res => {\n      //console.log(res)\n      this.snackBar.open( `User ${username} successfully created`, \"Ok\", {\n        duration: 2500\n      });\n      this.logIn(username,password);\n    }, err =>{\n      if(err.status === 500){\n        this.snackBar.open( \"This username is already in use\", \"Ok\", {\n          duration: 2500\n        });\n      }else{\n        console.log(\"Something went wrong when creating the user\");\n      }\n    });\n  }\n \n  \n  \n\n  \n\n  deleteUser(user: UserServer) {\n    let deleteBody = this.deleteBody(user.username);\n    let bearer = localStorage.getItem(\"Token\");\n    this.closeSession();\n\n    this.http.request(new HttpRequest(\"DELETE\", `${this.goodCommonUrl}/users/user`, deleteBody, {\n      headers: new HttpHeaders({\n        'Content-Type': \"application/json\",\n        'Authorization': bearer\n      })\n    })).subscribe(rx => {\n      console.log(\"Deleted\");\n      this.snackBar.open( `The user has been deleted`, \"Ok\", {\n        duration: 2500\n      });\n      this.router.navigate(['/initial']);\n    });\n\n\n  }\n  deleteBody(username: string): string {\n  //The service is always going to delete the current logged in user, no matter what the body contains\n    return `{\n       \"filter\": {\n         \"USER_\": \"` + username + `\"\n       }\n      }`;\n  }\n\n  updatePassword(password: string){\n    this.http.post(`${this.goodCommonUrl}/users/updatePassword`,`{ \"PASSWORD\" : \"${password}\"}`).subscribe(res => {\n      this.snackBar.open( `Password changed`, \"Ok\", {\n        duration: 2500\n      });\n    }, err => {\n      console.log(\"Something went wrong when changing the password\");\n    });\n  }\n}\n/* This service interacts with the Ontimize Server, with the service of users*/\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LogginDialogComponent.html":{"url":"components/LogginDialogComponent.html","title":"component - LogginDialogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LogginDialogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/loggin-dialog/loggin-dialog.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-loggin-dialog\n            \n\n            \n                styleUrls\n                loggin-dialog.component.css\n            \n\n\n\n            \n                templateUrl\n                ./loggin-dialog.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                form\n                            \n                            \n                                maxLengthError\n                            \n                            \n                                minLengthError\n                            \n                            \n                                password\n                            \n                            \n                                passwordRequiredError\n                            \n                            \n                                username\n                            \n                            \n                                usernameRequiredError\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkErrors\n                            \n                            \n                                newUser\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                submit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(formBuilder: FormBuilder, dialogRef: MatDialogRef, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/loggin-dialog/loggin-dialog.component.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                    MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            checkErrors\n                            \n                            \n                        \n                    \n                \n                \n                    \ncheckErrors()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:42\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            newUser\n                            \n                            \n                        \n                    \n                \n                \n                    \nnewUser()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:63\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:28\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submit\n                            \n                            \n                        \n                    \n                \n                \n                    \nsubmit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:36\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        description:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            form\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        form:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxLengthError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        maxLengthError:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            minLengthError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        minLengthError:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        password:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            passwordRequiredError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        passwordRequiredError:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        username:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            usernameRequiredError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        usernameRequiredError:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material\";\nimport { Router } from \"@angular/router\";\n\n@Component({\n  selector: 'app-loggin-dialog',\n  templateUrl: './loggin-dialog.component.html',\n  styleUrls: ['./loggin-dialog.component.css']\n})\nexport class LogginDialogComponent implements OnInit {\n\n  form: FormGroup;\n  description: string;\n  username: string;\n  password: string;\n  minLengthError = false;\n  maxLengthError = false;\n  passwordRequiredError = false;\n  usernameRequiredError = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private dialogRef: MatDialogRef,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      username: new FormControl(this.username, [Validators.minLength(4), Validators.maxLength(20), Validators.required]),\n      password: new FormControl(this.password, [Validators.required])\n    });\n    \n  }\n  \n  submit() {\n    this.checkErrors();\n    if (!this.form.valid) { return; }\n    this.dialogRef.close(this.form.value);\n  }\n\n  checkErrors(){\n    this.minLengthError = this.maxLengthError = this.passwordRequiredError = this.usernameRequiredError = false;\n    if(this.form.get('username').errors !== null){\n      if(this.form.get('username').errors.minlength !== undefined){\n        this.minLengthError = true;\n      }\n      if(this.form.get('username').errors.maxLength !== undefined){\n        this.maxLengthError = true;\n      }\n      if(this.form.get('username').errors.required !== undefined){\n        this.usernameRequiredError = true;\n      }\n    }\n\n    if(this.form.get('password').errors !== null){\n      if(this.form.get('password').errors.required !== undefined){\n        this.passwordRequiredError = true;\n      }\n    }\n  }\n\n  newUser() {\n    this.dialogRef.close();\n    this.router.navigate(['user']);\n  }\n}\n\n/* This log in dialog pops up when the sign in button in the navigation bar is clicked.\n\nIt just launches a form, validates it and returns the data when closed.\n\nAlso, contains a button that routes to the user creation functionality*/\n\n    \n\n    \n        \n\n    Log In\n\n    \n        \n            \n                \n                    \n                \n                Username is too short\n                Username is too long\n                Ussername is required\n            \n            \n                \n                    \n                \n                Password is required\n            \n\n        \n    \n\n    \n        Cancel\n        \n        Log in\n        \n        Sign up\n    \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Log In                                                                                            Username is too short                Username is too long                Ussername is required                                                                                            Password is required                                    Cancel                Log in                Sign up    '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LogginDialogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MaterialModule.html":{"url":"modules/MaterialModule.html","title":"module - MaterialModule","body":"\n                   \n\n\n\n\n  Modules\n  MaterialModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/material/material.module.ts\n        \n\n\n        \n\n        \n            \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  MatButtonModule,\n  MatMenuModule,\n  MatToolbarModule,\n  MatIconModule,\n  MatCardModule,\n  MatGridListModule,\n  MatSidenavModule,\n  MatSortModule,\n  MatTableModule,\n  MatInputModule,\n  MatSelectModule,\n  MatSliderModule,\n  MatRadioModule,\n  MatListModule,\n  MatProgressSpinnerModule,\n  MatChipsModule,\n  MatTooltipModule,\n  MatExpansionModule,\n  MatDialogModule,\n  MatAutocompleteModule,\n  MatTabsModule,\n  MatSlideToggleModule\n} from '@angular/material';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatMenuModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatCardModule,\n    MatGridListModule,\n    MatSidenavModule,\n    MatSortModule,\n    MatTableModule,\n    MatInputModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatRadioModule,\n    MatListModule,\n    MatProgressSpinnerModule,\n    MatChipsModule,\n    MatTooltipModule,\n    MatExpansionModule,\n    MatDialogModule,\n    MatAutocompleteModule,\n    MatTabsModule,\n    MatSlideToggleModule\n  ],\n  exports: [\n    MatButtonModule,\n    MatMenuModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatCardModule,\n    MatGridListModule,\n    MatSidenavModule,\n    MatSortModule,\n    MatTableModule,\n    MatInputModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatRadioModule,\n    MatListModule,\n    MatProgressSpinnerModule,\n    MatChipsModule,\n    MatTooltipModule,\n    MatExpansionModule,\n    MatDialogModule,\n    MatAutocompleteModule,\n    MatTabsModule,\n    MatSlideToggleModule\n  ],\n  declarations: []\n})\nexport class MaterialModule { }\n\n/* Here components from material are imported and exported in order to not engrose the app.module (just imports MaterialModule )too much and get only the necessary elements */\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavigationComponent.html":{"url":"components/NavigationComponent.html","title":"component - NavigationComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NavigationComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/navigation/navigation.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-navigation\n            \n\n            \n                styleUrls\n                navigation.component.css\n            \n\n\n\n            \n                templateUrl\n                ./navigation.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                citiesSubscription\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                dialogRef\n                            \n                            \n                                emptyList\n                            \n                            \n                                intervalCheck\n                            \n                            \n                                logged\n                            \n                            \n                                logSubscription\n                            \n                            \n                                logSubscription2\n                            \n                            \n                                notEmpty\n                            \n                            \n                                profile\n                            \n                            \n                                routeSubscription\n                            \n                            \n                                savedCities\n                            \n                            \n                                youSureButton\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteCities\n                            \n                            \n                                getCities\n                            \n                            \n                                getLog\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                notSure\n                            \n                            \n                                relog\n                            \n                            \n                                toggleFavourites\n                            \n                            \n                                toggleSession\n                            \n                            \n                                youSure\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                opened\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, savedCitiesService: SavedCitiesService, logService: LogService, dialog: MatDialog, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/navigation/navigation.component.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        savedCitiesService\n                                                  \n                                                        \n                                                                    SavedCitiesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        logService\n                                                  \n                                                        \n                                                                    LogService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        opened\n                    \n                    \n                            \n                            Type:    boolean\n\n                            \n                        \n                            Default value: false\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:23\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteCities\n                            \n                            \n                        \n                    \n                \n                \n                    \ndeleteCities()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:118\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCities\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCities()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:90\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getLog\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetLog()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:76\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:56\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:49\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notSure\n                            \n                            \n                        \n                    \n                \n                \n                    \nnotSure()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:130\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            relog\n                            \n                            \n                        \n                    \n                \n                \n                    \nrelog()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:63\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleFavourites\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoggleFavourites()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:105\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleSession\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoggleSession()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:134\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            youSure\n                            \n                            \n                        \n                    \n                \n                \n                    \nyouSure()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:127\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dialog\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dialog:     MatDialog\n\n                    \n                \n                    \n                        \n                            Type :     MatDialog\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dialogRef\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dialogRef:     MatDialogRef\n\n                    \n                \n                    \n                        \n                            Type :     MatDialogRef\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            emptyList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        emptyList:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'none'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intervalCheck\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        intervalCheck:     \n\n                    \n                \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logged\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        logged:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        logSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logSubscription2\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        logSubscription2:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notEmpty\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        notEmpty:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        profile:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            routeSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        routeSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            savedCities\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        savedCities:     SavedCity[]\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            youSureButton\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        youSureButton:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { SavedCitiesService } from '../saved-cities.service';\nimport { SavedCity } from '../savedCity';\nimport { Subscription } from 'rxjs';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { LogginDialogComponent } from '../loggin-dialog/loggin-dialog.component';\nimport { LogService } from '../log.service';\nimport { MatSnackBar } from '@angular/material';\n\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-navigation',\n  templateUrl: './navigation.component.html',\n  styleUrls: ['./navigation.component.css']\n})\nexport class NavigationComponent implements OnInit, OnDestroy {\n\n  savedCities: SavedCity[];\n  routeSubscription: Subscription;\n  citiesSubscription: Subscription;\n  logSubscription: Subscription;\n  logSubscription2: Subscription;\n  @Input() opened: boolean = false;\n  notEmpty = false;\n  emptyList = 'none';\n  dialogRef: MatDialogRef;\n  logged = false;\n  profile: string = \"\";\n  intervalCheck;\n  youSureButton = false;\n\n  constructor(\n    private router: Router,\n    private savedCitiesService: SavedCitiesService,\n    private logService: LogService,\n    public dialog: MatDialog,\n    private snackBar : MatSnackBar\n  ) {\n    //Trying to listen to a change in the path to refresh info\n    router.events.subscribe(value => {\n      if(!(this.router.url.includes(`/initial`))){\n        const body = document.getElementsByTagName(\"body\");\n        body[0].classList.remove(\"initial-view\");\n      }\n    });\n  }\n\n  \n  ngOnInit() {\n    this.relog();\n    this.getCities();\n    this.getLog();\n  }\n\n\n  ngOnDestroy() {\n    //Unsubscribe from Observables to avoid inefficiency\n    this.routeSubscription.unsubscribe();\n    this.citiesSubscription.unsubscribe();\n    this.logSubscription.unsubscribe();\n  }\n\n  relog() {\n    let token = localStorage.getItem(\"Token\");\n    this.profile = localStorage.getItem(\"session\");\n    if ((token !== null) && (this.profile != null)) {\n      this.profile = this.profile.replace(/['\"]+/g,'');\n      localStorage.setItem(\"session\", this.profile);\n      this.logService.logRefresh();\n    }\n  }\n\n\n\n\n  getLog() {\n    this.logSubscription = this.logService.getUpdates().subscribe(logged => {\n      this.logged = logged;\n      if(this.logService.currentUser === undefined){\n        this.profile = \"USER\";\n      }else{\n      this.profile = this.logService.currentUser.username.replace(/['\"]+/g,''); //For showing settings\n      }\n      if ((this.savedCities.length  {\n\n      this.savedCities = cities;\n      if (cities.length > 0) {\n        this.notEmpty = true;\n        this.emptyList = 'none';\n      } else {\n        this.notEmpty = false;\n      }\n    });\n  }\n\n  toggleFavourites() {\n    if(this.youSureButton){\n      this.youSureButton = false;\n    }\n    if (this.notEmpty) {\n      this.opened = !this.opened;\n      this.emptyList = 'none';\n    } else {\n      this.opened = false;\n      this.emptyList = 'block';\n    }\n  }\n\n  deleteCities() {\n    this.youSureButton = false;\n    this.savedCitiesService.deleteCities();\n    this.getCities();\n    this.opened = false;\n    this.notEmpty = false;\n    this.snackBar.open(\"Favourite cities have been deleted\", \"Ok\", { duration: 3000 }); \n  }\n\n  youSure(){\n    this.youSureButton = true; //Activates the button to deleteCities()\n  }\n  notSure(){\n    this.youSureButton = false;\n  }\n\n  toggleSession() {\n\n    if (this.logged) {\n      this.logService.closeSession();\n      this.deleteCities();\n      return;\n    }\n    //Opens a dialog ref with a form to log in\n    this.dialogRef = this.dialog.open(LogginDialogComponent);\n\n    this.dialogRef.afterClosed().subscribe(data => {\n      //when dialog is closed we try the session with the service's method\n      if (data !== undefined) {\n        if (data.username !== undefined || data.password !== undefined) {\n          this.logService.logIn(data.username, data.password); //Call the log service\n        }\n      }\n    });\n\n  }\n\n\n}\n\n\n/*\nThis component picks the saved cities from the SavedCitiesService and displays the links to city/cod in a sidenav that can be hidden\n\nAlso, presents a link to the inicial view and a menu with the options to log in, settings and about.\n\nLogged in indicator (Check icon).\n*/\n    \n\n    \n        \n\n  \n  \n    \n      Weather Angular\n      Home\n      Favourites\n\n      \n\n      \n        {{profile}}\n      \n\n      \n        Log in\n      \n\n      \n\n      check_circle\n\n\n      \n        more_vert\n      \n      \n\n        \n          Log in\n        \n\n        \n          Settings\n        \n\n        \n          Log out\n        \n\n        \n          About\n        \n\n\n      \n    \n  \n\n\n  There are no cities saved to favourites-->\n\n  \n    \n      \n        \n           {{savedCity.name}} \n        \n        Delete all\n\n      \n\n      \n        \n        \n        \n      \n    \n    \n      \n        This is going to delete all yor favourite cities when you log out. Are you sure? \n        \n          Yes\n          No\n        \n      \n    \n  \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '              Weather Angular      Home      Favourites                    {{profile}}                    Log in                  check_circle              more_vert                              Log in                          Settings                          Log out                          About                      There are no cities saved to favourites-->                               {{savedCity.name}}                 Delete all                                                                This is going to delete all yor favourite cities when you log out. Are you sure?                   Yes          No                    '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NavigationComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NewUserComponent.html":{"url":"components/NewUserComponent.html","title":"component - NewUserComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NewUserComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/new-user/new-user.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-new-user\n            \n\n            \n                styleUrls\n                new-user.component.css\n            \n\n\n\n            \n                templateUrl\n                ./new-user.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                form\n                            \n                            \n                                password2\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                launchForm\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                submit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(formBuilder: FormBuilder, logService: LogService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/new-user/new-user.component.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        logService\n                                                  \n                                                        \n                                                                    LogService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            launchForm\n                            \n                            \n                        \n                    \n                \n                \n                    \nlaunchForm()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:29\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:24\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submit\n                            \n                            \n                        \n                    \n                \n                \n                    \nsubmit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:39\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            form\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        form:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password2\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        password2:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:15\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { UserServer } from '../userServer';\nimport { Router } from \"@angular/router\";\nimport { FormGroup, FormBuilder, Validators, AbstractControl } from '@angular/forms';\nimport { LogService } from '../log.service';\n\n@Component({\n  selector: 'app-new-user',\n  templateUrl: './new-user.component.html',\n  styleUrls: ['./new-user.component.css']\n})\nexport class NewUserComponent implements OnInit {\n\n\n  password2: string;\n  form: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private logService: LogService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.launchForm();\n\n  }\n\n  launchForm() {\n    this.form = this.formBuilder.group({\n      username: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(20), Validators.required])],\n      password: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])],\n      password2: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])]\n    }, {\n        validator: PasswordValidation.MatchPassword\n      });\n  }\n\n  submit() {\n    if (this.form.valid) {\n\n      this.logService.createUser(this.form.value.username, this.form.value.password);\n\n    } else {\n      console.log(\"Not valid\");\n    }\n  }\n}\n\nexport class PasswordValidation {\n  //Validates that the password has been repeated correctly\n  static MatchPassword(AC: AbstractControl) {\n    let p1 = AC.get('password');\n    let p2 = AC.get('password2');\n    if (p1.value != p2.value) {\n      AC.get('password2').setErrors({ MatchPassword: true })\n    } else {\n      return null\n    }\n\n  }\n}\n\n/* This component simply launches a form to ask the log service to create a new user with the info adquired in the form */\n\n/* launchForm() {\n    validator : PasswordValidation;\n    this.form = new FormGroup({\n      username: new FormControl(this.username,[Validators.minLength(5), Validators.maxLength(20), Validators.required]),\n      password: new FormControl(this.password,[Validators.minLength(5), Validators.maxLength(25), Validators.required]),\n      password2: new FormControl(this.password2,[Validators.minLength(5), Validators.maxLength(25), Validators.required, validatePassword(this.form)])\n    }\n  }\n\n  submit() {\n    if (this.form.valid) {\n\n      this.logService.createUser(this.form.value.username, this.form.value.password);\n\n    } else {\n      console.log(\"Not valid\");\n    }\n  }\n}\n\nexport class PasswordValidation {\n  //Validates that the password has been repeated correctly\n  static MatchPassword(AC: AbstractControl) {\n    let p1 = AC.get('password');\n    let p2 = AC.get('password2');\n    if (p1.value != p2.value) {\n      AC.get('password2').setErrors({ MatchPassword: true })\n    } else {\n      return null\n    }\n\n  }\n}*/\n    \n\n    \n        \n  \n    \n      \n        \n          \n        \n      \n      \n        \n          \n        \n      \n      \n        \n          \n        \n      \n      \n        Go!\n      \n    \n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                      Go!            '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NewUserComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordValidation.html":{"url":"classes/PasswordValidation.html","title":"class - PasswordValidation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordValidation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/new-user/new-user.component.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                MatchPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            MatchPassword\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        MatchPassword(AC: AbstractControl)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:52\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        AC\n                                                        \n                                                                    AbstractControl\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { UserServer } from '../userServer';\nimport { Router } from \"@angular/router\";\nimport { FormGroup, FormBuilder, Validators, AbstractControl } from '@angular/forms';\nimport { LogService } from '../log.service';\n\n@Component({\n  selector: 'app-new-user',\n  templateUrl: './new-user.component.html',\n  styleUrls: ['./new-user.component.css']\n})\nexport class NewUserComponent implements OnInit {\n\n\n  password2: string;\n  form: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private logService: LogService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.launchForm();\n\n  }\n\n  launchForm() {\n    this.form = this.formBuilder.group({\n      username: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(20), Validators.required])],\n      password: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])],\n      password2: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])]\n    }, {\n        validator: PasswordValidation.MatchPassword\n      });\n  }\n\n  submit() {\n    if (this.form.valid) {\n\n      this.logService.createUser(this.form.value.username, this.form.value.password);\n\n    } else {\n      console.log(\"Not valid\");\n    }\n  }\n}\n\nexport class PasswordValidation {\n  //Validates that the password has been repeated correctly\n  static MatchPassword(AC: AbstractControl) {\n    let p1 = AC.get('password');\n    let p2 = AC.get('password2');\n    if (p1.value != p2.value) {\n      AC.get('password2').setErrors({ MatchPassword: true })\n    } else {\n      return null\n    }\n\n  }\n}\n\n/* This component simply launches a form to ask the log service to create a new user with the info adquired in the form */\n\n/* launchForm() {\n    validator : PasswordValidation;\n    this.form = new FormGroup({\n      username: new FormControl(this.username,[Validators.minLength(5), Validators.maxLength(20), Validators.required]),\n      password: new FormControl(this.password,[Validators.minLength(5), Validators.maxLength(25), Validators.required]),\n      password2: new FormControl(this.password2,[Validators.minLength(5), Validators.maxLength(25), Validators.required, validatePassword(this.form)])\n    }\n  }\n\n  submit() {\n    if (this.form.valid) {\n\n      this.logService.createUser(this.form.value.username, this.form.value.password);\n\n    } else {\n      console.log(\"Not valid\");\n    }\n  }\n}\n\nexport class PasswordValidation {\n  //Validates that the password has been repeated correctly\n  static MatchPassword(AC: AbstractControl) {\n    let p1 = AC.get('password');\n    let p2 = AC.get('password2');\n    if (p1.value != p2.value) {\n      AC.get('password2').setErrors({ MatchPassword: true })\n    } else {\n      return null\n    }\n\n  }\n}*/\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RainAndSnowService.html":{"url":"injectables/RainAndSnowService.html","title":"injectable - RainAndSnowService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  RainAndSnowService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/graphs/rainAndSnow/rain-and-snow.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                chart\n                            \n                            \n                                dates\n                            \n                            \n                                rain\n                            \n                            \n                                snow\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRainAndSnowChart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getRainAndSnowChart\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetRainAndSnowChart(forecast: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        forecast\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Chart\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        chart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dates\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dates:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rain\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rain:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        snow:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:12\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Forecast } from '../../city/data';\nimport { Chart } from 'chart.js';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RainAndSnowService {\n\n  chart: Chart;\n  rain: number[];\n  snow: number[];\n  dates: string[];\n\n  constructor() { }\n\n  getRainAndSnowChart(forecast: Array): Chart {\n\n    this.rain = forecast.map(item => {\n      return item.rain;\n    });\n\n    this.snow = forecast.map(item => {\n      return item.snow;\n    });\n\n    this.dates = forecast.map(item => {\n      return item.dt_txt;\n    });\n\n    this.chart = new Chart('rainAndSnow', {\n      type: 'bar',\n      data: {\n        labels: this.dates,\n        datasets: [\n          {\n            label: 'Rain',\n            data: this.rain,\n            borderColor: \"#0000ff\",\n            fill: false,\n            showLine: true,\n            backgroundColor: \"#0000ff\"\n          },\n          {\n            label: 'Snow',\n            data: this.snow,\n            borderColor: \"#ffffff\",\n            fill: false,\n            backgroundColor: \"#aaaaaa\"\n          }\n        ]\n      },\n      options: {\n\n        legend: {\n          display: true,\n          labels: {\n\n          }\n        },\n        scales: {\n          xAxes: [{\n            display: true\n          }],\n          yAxes: [{\n            display: true\n          }],\n        }\n      }\n    });\n\n    return this.chart;\n  }\n}\n\n/* This service gets the forecast vakues formated and returns a chart*/\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RespuestaForecast.html":{"url":"classes/RespuestaForecast.html","title":"class - RespuestaForecast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RespuestaForecast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/city/data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                list\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/city/data.ts:96\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            list\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        list:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:96\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Weather } from '../weather'\n\n\nexport class Data {\n    parameter: string;\n    value: string;\n\n    constructor() { }\n}\n/* Data is used to transfer information as an array of Data to the MatTable in city */\n\nexport class Forecast {\n\n    clouds: { all: number };\n    dt: number;\n    dt_txt: string;\n\n    main: {\n        grnd_level: number,\n        humidity: number,\n        pressure: number,\n        sea_level: number,\n        temp: number,\n        temp_kf: number,\n        temp_max: number,\n        temp_min: number\n    };\n\n    weather: Array;\n    /*\n        id\n        main\n        description\n        icon\n    */\n\n    wind: {\n        speed: number,\n        deg: number\n    }\n\n    rain: number;\n    snow: number;\n    constructor(element: Forecast) {\n        this.weather = new Array();\n\n        this.clouds = element.clouds;\n        this.dt = element.dt;\n        this.dt_txt = element.dt_txt;\n\n        this.main = {\n            grnd_level: element.main.grnd_level,\n            humidity: element.main.humidity,\n            pressure: element.main.pressure,\n            sea_level: element.main.sea_level,\n            temp: element.main.temp,\n            temp_kf: element.main.temp_kf,\n            temp_max: element.main.temp_max,\n            temp_min: element.main.temp_min\n        };\n\n\n        element.weather.forEach((weather: Weather) => {\n            const w = new Weather();\n            w.main = weather.main;\n            w.id = weather.id;\n            w.icon = weather.icon;\n            w.description = weather.description;\n\n            this.weather.push(w);\n        });\n\n        this.wind = {\n            speed: element.wind.speed,\n            deg: element.wind.deg\n        };\n\n        if (element.rain == undefined) {\n            //console.log(\"rain undefined\");\n        } else {\n            this.rain = element.rain[\"3h\"];\n        }\n\n        if (element.snow == undefined) {\n            //console.log(\"snow undefined\");\n        } else {\n            this.snow = element.snow[\"3h\"];\n        }\n\n    }\n}\n/* The object Forecast stores all the information about the weather provided by the service for a certain hour */\n\nexport class RespuestaForecast {\n\n    list: Array;\n\n    constructor() { }\n}\n\n/* \nData types used for sending data to the mat-table, Graph services and managing a server response containing the forecast for several hours.\n*/\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SavedCitiesService.html":{"url":"injectables/SavedCitiesService.html","title":"injectable - SavedCitiesService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  SavedCitiesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/saved-cities.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cities\n                            \n                            \n                                city\n                            \n                            \n                                updated\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteCities\n                            \n                            \n                                getSavedCities\n                            \n                            \n                                getUpdates\n                            \n                            \n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/saved-cities.service.ts:14\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteCities\n                            \n                            \n                        \n                    \n                \n                \n                    \ndeleteCities()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:52\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getSavedCities\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetSavedCities()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:23\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     SavedCity[]\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getUpdates\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetUpdates()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            save\n                            \n                            \n                        \n                    \n                \n                \n                    \nsave(cityToSave: SavedCity)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:39\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cityToSave\n                                                        \n                                                                    SavedCity\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cities\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cities:     SavedCity[]\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            city\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        city:     SavedCity\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        updated:     \n\n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:14\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { SavedCity } from './savedCity';\nimport { Observable, Subject } from 'rxjs'\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SavedCitiesService {\n\n  cities : SavedCity[];\n  city : SavedCity;\n  updated = new Subject();\n\n\n  constructor() { }\n\n  getUpdates(): Observable{\n    return > this.updated.asObservable();\n  }\n\n  getSavedCities(): SavedCity[] {\n    this.cities = [];\n    if(JSON.parse(localStorage.getItem(\"favouriteCities\")) === null){ //if there are no cities in the local storage\n      this.updated.next(this.cities); //return cities = [] from the Observable\n      return [];\n    }\n    JSON.parse(localStorage.getItem(\"favouriteCities\")).forEach(element => { //Get back from LS\n      this.city = new SavedCity(element.name, element.id, element.country, element.coord.lon, element.coord.lat);\n      this.cities.push(this.city);\n      this.updated.next(this.cities); //Return Array from the Observable\n      return this.cities;\n    });\n    \n   return this.cities; //Never reaches this instruction? Yes, surpridingly it does, and everything crashed when I commented it\n  }\n\n  save(cityToSave : SavedCity){\n    if(\n      this.cities.find(city => city.id === cityToSave.id) == undefined\n    ){\n    this.cities.push(cityToSave);\n    localStorage.setItem(\"favouriteCities\",JSON.stringify(this.cities));\n    this.updated.next(this.cities); //Metemos cities en el Subject\n  }else{\n    //console.log('This city has already been saved');\n  }\n\n  }\n\n  deleteCities(){\n    localStorage.removeItem(\"favouriteCities\");\n    this.getSavedCities(); //Send an updated observable with the cities available\n  }\n \n}\n /* \n This service manages the list of cities saved in the local storage.\n Returns an Observable with changes in the cities list an can modify or delete the list\n  */\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SavedCity.html":{"url":"classes/SavedCity.html","title":"class - SavedCity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  SavedCity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/savedCity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                coord\n                            \n                            \n                                country\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                sys\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                insertBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, id: string, country: string, lon: number, lat: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/savedCity.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        country\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        lon\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        lat\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            coord\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        coord:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/savedCity.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            country\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        country:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/savedCity.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/savedCity.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/savedCity.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sys\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sys:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/savedCity.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            insertBody\n                            \n                            \n                        \n                    \n                \n                \n                    \ninsertBody()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/savedCity.ts:24\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class SavedCity{\n    name: string;\n    id: string;\n    sys : {country : string};\n    country: string;\n    coord : {\n        lon : number,\n        lat: number\n    };\n\n    constructor(name: string, id: string, country: string = '', lon: number = 0, lat: number = 0) {\n        this.name = name;\n        this.id = id;\n        this.sys = {\n            country : country\n        };\n\n        this.coord = {\n            lon: lon,\n            lat: lat\n        };\n    }\n\n    insertBody(): string{\n        //Prepares a string to make an insert to the server\n        return `{\n            \"data\": {\n              \"ID\": ` + this.id + `,\n              \"COUNTRY\": \"` + this.sys.country + `\",\n              \"LAT\": ` + this.coord.lat + `,\n              \"LON\": ` + this.coord.lon + `,\n              \"NAME\": \"` + this.name + `\"\t\n            }\n            \n           }`;\n    }\n}\n//This object is for displaying and linking to the searched cities. It is used too for storing favourite cities. \n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServedCity.html":{"url":"classes/ServedCity.html","title":"class - ServedCity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServedCity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/servedCity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                COUNTRY\n                            \n                            \n                                ID\n                            \n                            \n                                LAT\n                            \n                            \n                                LON\n                            \n                            \n                                NAME\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, id: number, country: string, lon: number, lat: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/servedCity.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        country\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        lon\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        lat\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            COUNTRY\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        COUNTRY:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ID\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ID:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LAT\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        LAT:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LON\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        LON:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NAME\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        NAME:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ServedCity{\n    NAME: string;\n    ID: number;\n    COUNTRY: string;\n    LON : number;\n    LAT: number;\n    \n\n    constructor(name: string, id: number, country: string = '', lon: number = 0, lat: number = 0) {\n        this.NAME = name;\n        this.ID = id;\n        this.COUNTRY =  country;\n        this.LON = lon;\n        this.LAT = lat;\n        \n    }\n}\n\nexport class ServerResponse{\n    data: Array;\n}\n\n\n/* These are classes to give a type to the server DB results and avoid errors */\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServerResponse.html":{"url":"classes/ServerResponse.html","title":"class - ServerResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServerResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/servedCity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        data:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ServedCity{\n    NAME: string;\n    ID: number;\n    COUNTRY: string;\n    LON : number;\n    LAT: number;\n    \n\n    constructor(name: string, id: number, country: string = '', lon: number = 0, lat: number = 0) {\n        this.NAME = name;\n        this.ID = id;\n        this.COUNTRY =  country;\n        this.LON = lon;\n        this.LAT = lat;\n        \n    }\n}\n\nexport class ServerResponse{\n    data: Array;\n}\n\n\n/* These are classes to give a type to the server DB results and avoid errors */\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SettingsComponent.html":{"url":"components/SettingsComponent.html","title":"component - SettingsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SettingsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/settings/settings.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-settings\n            \n\n            \n                styleUrls\n                settings.component.css\n            \n\n\n\n            \n                templateUrl\n                ./settings.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentUser\n                            \n                            \n                                deleteAccount\n                            \n                            \n                                deleteAccount1\n                            \n                            \n                                formDelete\n                            \n                            \n                                formPassword\n                            \n                            \n                                logSubscription\n                            \n                            \n                                opened\n                            \n                            \n                                pwd\n                            \n                            \n                                valueTime\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildDeleteForm\n                            \n                            \n                                buildPsswdForm\n                            \n                            \n                                changePassword\n                            \n                            \n                                delAccnt\n                            \n                            \n                                isLogged\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                passwd\n                            \n                            \n                                setCurrentUser\n                            \n                            \n                                showDelete\n                            \n                            \n                                submitDelete\n                            \n                            \n                                submitPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(log: LogService, savedCitiesService: SavedCitiesService, router: Router, formBuilder: FormBuilder)\n                    \n                \n                        \n                            \n                                Defined in src/app/settings/settings.component.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        log\n                                                  \n                                                        \n                                                                    LogService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        savedCitiesService\n                                                  \n                                                        \n                                                                    SavedCitiesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            buildDeleteForm\n                            \n                            \n                        \n                    \n                \n                \n                    \nbuildDeleteForm()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:68\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            buildPsswdForm\n                            \n                            \n                        \n                    \n                \n                \n                    \nbuildPsswdForm()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:58\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changePassword\n                            \n                            \n                        \n                    \n                \n                \n                    \nchangePassword(passwd: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:85\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        passwd\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            delAccnt\n                            \n                            \n                        \n                    \n                \n                \n                    \ndelAccnt()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:117\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isLogged\n                            \n                            \n                        \n                    \n                \n                \n                    \nisLogged()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:75\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:45\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:35\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            passwd\n                            \n                            \n                        \n                    \n                \n                \n                    \npasswd()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:111\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setCurrentUser\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetCurrentUser()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:49\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            showDelete\n                            \n                            \n                        \n                    \n                \n                \n                    \nshowDelete()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:122\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitDelete\n                            \n                            \n                        \n                    \n                \n                \n                    \nsubmitDelete()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:97\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitPassword\n                            \n                            \n                        \n                    \n                \n                \n                    \nsubmitPassword()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:88\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUser\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        currentUser:     UserServer\n\n                    \n                \n                    \n                        \n                            Type :     UserServer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteAccount\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        deleteAccount:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteAccount1\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        deleteAccount1:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formDelete\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        formDelete:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formPassword\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        formPassword:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        logSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            opened\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        opened:     \n\n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pwd\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        pwd:     \n\n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valueTime\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        valueTime:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { LogService } from '../log.service';\nimport { UserServer } from '../userServer';\nimport { SavedCitiesService } from '../saved-cities.service';\nimport { Router } from \"@angular/router\";\nimport { Subscription } from 'rxjs';\nimport { FormGroup, FormBuilder, Validators, AbstractControl } from '@angular/forms';\nimport { PasswordValidation } from '../new-user/new-user.component';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.css']\n})\nexport class SettingsComponent implements OnInit {\n\n  currentUser: UserServer;\n  logSubscription: Subscription;\n  opened = true;\n  formPassword: FormGroup;\n  formDelete: FormGroup;\n  valueTime = 1;\n  pwd = true;\n  deleteAccount = false;\n  deleteAccount1 = false;\n\n\n  constructor(\n    private log: LogService,\n    private savedCitiesService: SavedCitiesService,\n    private router: Router,\n    private formBuilder: FormBuilder\n  ) { }\n\n  ngOnInit() {\n\n    this.setCurrentUser();\n\n    this.isLogged();\n\n    this.buildPsswdForm();\n\n    this.buildDeleteForm();\n  }\n  ngOnDestroy() {\n    this.logSubscription.unsubscribe();\n  }\n\n  setCurrentUser() {\n    if (this.log.currentUser === undefined) {\n      this.router.navigate(['initial']);\n    } else {\n      this.currentUser = this.log.currentUser;\n      this.currentUser.citiesList = this.savedCitiesService.getSavedCities();\n    }\n\n  }\n  buildPsswdForm() {\n    //Form to change password\n    this.formPassword = this.formBuilder.group({\n      password: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])],\n      password2: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])]\n    }, {\n        validator: PasswordValidation.MatchPassword\n      })\n  }\n\n  buildDeleteForm() {\n    //Form to delete account\n    this.formDelete = this.formBuilder.group({\n      password: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])]\n    });\n  }\n\n  isLogged() {\n    //If session expires or is closed redirect to home\n    this.logSubscription = this.log.getUpdates().subscribe(logged => {\n      if (!logged) {\n        this.router.navigate(['initial']);\n      }\n    });\n  }\n\n\n  changePassword(passwd: string) {\n    this.log.updatePassword(passwd);\n  }\n  submitPassword() {\n    if (this.formPassword.valid) {\n      this.changePassword(this.formPassword.value.password);\n      //Resets the form\n      this.buildPsswdForm();\n    }\n  }\n\n\n  submitDelete() {\n    if (this.formDelete.valid) {\n      let username = this.currentUser.username;\n      this.log.logIn(username, this.formDelete.value.password);\n      this.log.deleteUser(this.currentUser);\n      \n      console.log(\"Deleting user\");\n\n    }\n  }\n\n\n\n  //Methods to show different contents\n  passwd() {\n    this.pwd = true;\n    this.deleteAccount = false;\n    this.deleteAccount1 = false;\n  }\n  \n  delAccnt() {\n    this.pwd = false;\n    this.deleteAccount = false;\n    this.deleteAccount1 = true;\n  }\n  showDelete() {\n    this.pwd = false;\n    this.deleteAccount = true;\n    this.deleteAccount1 = false;\n  }\n}\n\n    \n\n    \n        \n  {{currentUser.username}} settings:\n\n\n\n\n\n  \n    \n      \n        Change password\n      \n    \n    \n      \n        Delete account\n      \n    \n  \n\n  \n\n\n    \n    \n      \n        \n          \n          \n            \n              \n            \n          \n          \n            \n              \n            \n          \n          \n            Go!\n          \n          \n        \n      \n    \n\n\n    \n    \n      \n      \n      \n        ¿Are you sure you want to permanently delete your account?\n      \n      \n      \n        \n          Yes, let's delete my account\n        \n        \n          No, I shouldn't do this\n        \n      \n      \n      \n    \n    \n      \n        \n          \n          \n            \n              \n            \n          \n          \n          \n          \n            Delete\n          \n          \n          \n        \n      \n    \n\n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  {{currentUser.username}} settings:                    Change password                            Delete account                                                                                                                                                                                        Go!                                                                        ¿Are you sure you want to permanently delete your account?                                    Yes, let\\'s delete my account                          No, I shouldn\\'t do this                                                                                                                                                              Delete                                                  '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SettingsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TemperatureService.html":{"url":"injectables/TemperatureService.html","title":"injectable - TemperatureService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  TemperatureService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/graphs/temperature/temperature.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                chart\n                            \n                            \n                                dates\n                            \n                            \n                                temperatures\n                            \n                            \n                                temperaturesMax\n                            \n                            \n                                temperaturesMin\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTemperatureChart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/graphs/temperature/temperature.service.ts:14\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getTemperatureChart\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetTemperatureChart(forecast: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        forecast\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Chart\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        chart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dates\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dates:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperatures\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperatures:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperaturesMax\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperaturesMax:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperaturesMin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperaturesMin:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:13\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Forecast } from '../../city/data';\nimport { Chart } from 'chart.js';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TemperatureService {\n\n  chart: Chart;\n  temperatures: number[];\n  temperaturesMax: number[];\n  temperaturesMin: number[];\n  dates: string[];\n\n  constructor() { }\n\n  getTemperatureChart(forecast: Array): Chart {\n    \n    this.temperatures = forecast.map(item => {\n      //console.log(item.main.temp);\n      return item.main.temp - 273.15;\n    });\n\n\n    this.temperaturesMax = forecast.map(item => {\n      //console.log(item.main.temp);\n      return item.main.temp_max - 273.15;\n    });\n\n    this.temperaturesMin = forecast.map(item => {\n      //console.log(item.main.temp);\n      return item.main.temp_min - 273.15;\n    });\n\n    this.dates = forecast.map(item => {\n      return item.dt_txt;\n    });\n\n    this.chart = new Chart('temperature', {\n      type: 'line',\n      data: {\n        labels: this.dates,\n        datasets: [\n          {\n            label: 'temperature',\n            data: this.temperatures,\n            borderColor: \"#3cba9f\",\n            fill: false,\n            showLine: true\n          },\n          {\n            label: 'Max temperature',\n            data: this.temperaturesMax,\n            borderColor: \"#ff0000\",\n            fill: false\n          },\n          {\n            label: 'Min temperature',\n            data: this.temperaturesMin,\n            borderColor: \"#0000FF\",\n            fill: false\n          }\n        ]\n      },\n      options: {\n\n        legend: {\n          display: true,\n          labels: {\n\n          }\n        },\n        scales: {\n          xAxes: [{\n            display: true\n          }],\n          yAxes: [{\n            display: true\n          }],\n        }\n      }\n    });\n\n    return this.chart;\n  }\n\n}\n\n/* This service gets the forecast vakues formated and returns a chart*/\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserServer.html":{"url":"classes/UserServer.html","title":"class - UserServer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserServer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/userServer.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                citiesId\n                            \n                            \n                                citiesList\n                            \n                            \n                                favouriteCities\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                display\n                            \n                            \n                                setFromList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/userServer.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesId\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesId:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesList:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            favouriteCities\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        favouriteCities:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        password:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        username:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            display\n                            \n                            \n                        \n                    \n                \n                \n                    \ndisplay()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/userServer.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setFromList\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetFromList(list: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/userServer.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        list\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { SavedCity } from \"./savedCity\";\n\nexport class UserServer {\n    username : string;\n    password : string;\n    favouriteCities : string;\n    citiesId : Array;\n    citiesList : Array;\n\n    constructor(){}\n    \n\n    display(): string{\n        return \"Username: \" + this.username + \"\\nPassword: \" + this.password + \"\\nCities ids: \" + this.citiesId;\n    }\n\n    setFromList(list : Array){\n        this.favouriteCities = list.map(item => item.id).join(',');\n    }\n}\n\n\n\n\n//New\nexport class CitiesResponse {\n    data : Array;\n}\n\nexport class CitiesResponseUnit {\n    CITIES : string;\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Weather.html":{"url":"classes/Weather.html","title":"class - Weather","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Weather\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/weather.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                icon\n                            \n                            \n                                id\n                            \n                            \n                                main\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/weather.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        description:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weather.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            icon\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        icon:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weather.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weather.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            main\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        main:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weather.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Weather {\n\n    id: number;\n    main: string;\n    description: string;\n    icon: string;\n\n    constructor(){}\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WeatherNow.html":{"url":"classes/WeatherNow.html","title":"class - WeatherNow","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  WeatherNow\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/weatherNow.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aux\n                            \n                            \n                                base\n                            \n                            \n                                clouds\n                            \n                            \n                                cod\n                            \n                            \n                                coord\n                            \n                            \n                                dt\n                            \n                            \n                                id\n                            \n                            \n                                main\n                            \n                            \n                                name\n                            \n                            \n                                rain\n                            \n                            \n                                result\n                            \n                            \n                                snow\n                            \n                            \n                                sys\n                            \n                            \n                                weather\n                            \n                            \n                                wind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAndSave\n                            \n                            \n                                displayValues\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/weatherNow.ts:29\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            aux\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        aux:     Data\n\n                    \n                \n                    \n                        \n                            Type :     Data\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            base\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        base:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clouds\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        clouds:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cod:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            coord\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        coord:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dt:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            main\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        main:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rain\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rain:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            result\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        result:     \n\n                    \n                \n                    \n                        \n                            Default value : new Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        snow:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sys\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sys:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            weather\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        weather:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        wind:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:16\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            checkAndSave\n                            \n                            \n                        \n                    \n                \n                \n                    \ncheckAndSave(text: string, variable: any, additional: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weatherNow.ts:174\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        text\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        variable\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        additional\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                ''\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            displayValues\n                            \n                            \n                        \n                    \n                \n                \n                    \ndisplayValues()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weatherNow.ts:102\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Array\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            set\n                            \n                            \n                        \n                    \n                \n                \n                    \nset(rx?: WeatherNow)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weatherNow.ts:35\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rx\n                                                        \n                                                                    WeatherNow\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Weather } from './weather';\nimport { Data } from './city/data'\n\nexport class WeatherNow {\n\n    coord: {lon: number, lat: number};\n    weather: Array;\n\n    /* id: number;\n    main: string;\n    description: string;\n    icon: string;*/\n\n    base: string;\n    main: {temp: number, pressure: number, humidity: number, temp_min: number, temp_max: number, sea_level: number, grnd_level: number};\n    wind: {speed: number, deg: number};\n    clouds: {all: number};\n    rain: number;\n    snow: number;\n    dt: number;\n    sys: {type: number, id: number, message: number, country: string, sunrise: number, sunset: number };\n    id: number;\n    name: string;\n    cod: number;\n\n    //Variables para el displayValues() : \n\n    result = new Array();\n    aux : Data; \n\n    constructor() {\n        this.weather = new Array();\n     }\n\n    set(rx? : WeatherNow){\n        \n        this.coord = {\n            lon: rx.coord.lon,\n            lat: rx.coord.lat\n        };\n        \n        rx.weather.forEach((w: Weather) => {\n            \n            let wthr = new Weather();\n            wthr = {\n                id: w.id,\n                main: w.main,\n                description: w.description,\n                icon: w.icon\n            };\n\n            this.weather.push(wthr);\n        });\n        \n        this.base = rx.base;\n        \n        this.main = {\n            temp: rx.main.temp,\n            pressure: rx.main.pressure,\n            humidity: rx.main.humidity,\n            temp_min: rx.main.temp_min,\n            temp_max: rx.main.temp_max,\n            sea_level: rx.main.sea_level,\n            grnd_level: rx.main.grnd_level\n        };\n        \n        this.wind = {\n            speed: rx.wind.speed,\n            deg: rx.wind.deg\n        };\n        \n\n        this.clouds = {\n            all: rx.clouds.all\n        };\n        if(rx.rain == undefined){\n        }else{\n        this.rain = rx.rain[\"3h\"];\n        }\n        if(rx.snow == undefined){\n        }else{\n        this.snow = rx.snow[\"3h\"];\n        }\n        this.dt = rx.dt;\n        \n        this.sys = {\n            type: rx.sys.type,\n            id: rx.sys.id,\n            message: rx.sys.message,\n            country: rx.sys.country,\n            sunrise: rx.sys.sunrise,\n            sunset: rx.sys.sunset\n        };\n        \n        this.id = rx.id;\n\n        this.name = rx.name;\n\n        this.cod = rx.cod;\n    }\n\n    displayValues(): Array {\n\n        this.result = [];\n\n        //coord\n        this.checkAndSave('longitude', this.coord.lon,'');\n        this.checkAndSave('latitude', this.coord.lat,'');\n\n      \n        //weather\n        let i = 0;\n        this.weather.forEach(w =>{\n            i++;\n            this.checkAndSave('id', w.id,'(' + i + ')');\n            this.checkAndSave('main', w.main,'(' + i + ')');\n            this.checkAndSave('description', w.description,'(' + i + ')');\n            this.checkAndSave('icon', w.icon,'(' + i + ')');\n            \n        });\n\n        //base\n        this.checkAndSave('base', this.base,'');\n        \n        //main\n        this.checkAndSave('temperature', this.main.temp - 273.15,' ℃');\n        this.checkAndSave('pressure', this.main.pressure,'');\n        this.checkAndSave('humidity', this.main.humidity,'');\n        this.checkAndSave('minimum temperature', this.main.temp_min - 273.15,' ℃');\n        this.checkAndSave('maximum temperature', this.main.temp_max - 273.15,' ℃');\n        this.checkAndSave('pressure at sea level', this.main.sea_level,'');\n        this.checkAndSave('pressure at ground level', this.main.grnd_level,'');\n        \n\n        //wind\n        this.checkAndSave('Wind speed', this.wind.speed,'');\n        this.checkAndSave('Wind direction', this.wind.deg,'');\n        \n        //clouds\n        this.checkAndSave('Clouds percentage', this.clouds.all,'%');\n        \n        //rain\n        this.checkAndSave('Rain volume in the last 3 hours', this.rain,' litres');\n        \n        //snow\n        this.checkAndSave('Snow volume in the last 3 hours', this.snow,' litres');\n       \n        //dt\n        this.checkAndSave('dt', this.dt,'');\n\n        //sys\n        this.checkAndSave('sys type', this.sys.type,'');\n        this.checkAndSave('sys id', this.sys.id,'');\n        this.checkAndSave('sys message', this.sys.message,'');\n        this.checkAndSave('sys country', this.sys.country,'');\n        this.checkAndSave('sys sunrise', this.sys.sunrise,'');\n        this.checkAndSave('sys sunset', this.sys.sunset,'');\n        \n        //id\n        this.checkAndSave('id', this.id,'');\n\n        //name\n        this.checkAndSave('name', this.name,'');\n\n        //cod\n        this.checkAndSave('cod', this.cod,'');\n        \n        \n        return this.result;\n        //result is an Array\n        //Data is an object with a parameter and a value\n    }\n\n    checkAndSave(text: string, variable: any, additional: string = ''){\n        \n        if(!( variable === undefined || variable === null)){\n            \n            this.aux = { //aux is a Data object\n                parameter: text,\n                value: variable + additional\n            };\n\n            this.result.push(this.aux);\n        }\n\n    }\n}\n\n/* This Object stores the information about a city's current weather received from the API and prepares it to being displayed in a mat table\n\n*/\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WeatherService.html":{"url":"injectables/WeatherService.html","title":"injectable - WeatherService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  WeatherService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/weather.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                weatherURL\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getForecast\n                            \n                            \n                                getWeather\n                            \n                            \n                                getWeatherByCityName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/weather.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getForecast\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetForecast(id: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weather.service.ts:28\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getWeather\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetWeather(id: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weather.service.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getWeatherByCityName\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetWeatherByCityName(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weather.service.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            weatherURL\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        weatherURL:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'https://api.openweathermap.org/data/2.5/weather?q=Vigo&APPID=888b7bb3ed5f95fb9894b5c33589e6a6'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weather.service.ts:11\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs'\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n\n  private weatherURL = 'https://api.openweathermap.org/data/2.5/weather?q=Vigo&APPID=888b7bb3ed5f95fb9894b5c33589e6a6';\n\n\n\n  constructor(private http: HttpClient) { }\n\n  getWeather(id: string): Observable {\n    /**Unique identifier search */\n    this.weatherURL = `https://api.openweathermap.org/data/2.5/weather?id=${id}&APPID=888b7bb3ed5f95fb9894b5c33589e6a6`;\n    return this.http.get(this.weatherURL);\n  }\n  getWeatherByCityName(name: string): Observable {\n    /**Search by name, used to get city objects, may lead to missunderstanding with city location */\n    this.weatherURL = `https://api.openweathermap.org/data/2.5/weather?q=${name}&APPID=888b7bb3ed5f95fb9894b5c33589e6a6`;\n    return this.http.get(this.weatherURL);\n  }\n\n  getForecast(id: string): Observable {\n    /**Gets the free forecast by unique ID from OpenWeatherMap API */\n    this.weatherURL = `https://api.openweathermap.org/data/2.5/forecast?id=${id}&APPID=888b7bb3ed5f95fb9894b5c33589e6a6`;\n    return this.http.get(this.weatherURL);\n  }\n}\n/** Service that makes requests to the API \"OpenWeather\" and return its responses*/\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                    src/app/about/about.component.ts\n            \n            \n                component\n            \n            \n                AboutComponent\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                    src/app/app.component.ts\n            \n            \n                component\n            \n            \n                AppComponent\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                    src/app/cities-server.service.ts\n            \n            \n                injectable\n            \n            \n                CitiesServerService\n            \n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                    src/app/city/city.component.ts\n            \n            \n                component\n            \n            \n                CityComponent\n            \n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                    src/app/city/data.ts\n            \n            \n                class\n            \n            \n                Data\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                    src/app/city/data.ts\n            \n            \n                class\n            \n            \n                Forecast\n            \n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                    src/app/city/data.ts\n            \n            \n                class\n            \n            \n                RespuestaForecast\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                    src/app/forecast-values.service.ts\n            \n            \n                injectable\n            \n            \n                ForecastValuesService\n            \n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                    src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts\n            \n            \n                injectable\n            \n            \n                CloudsAndWindService\n            \n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                    src/app/graphs/graphs.component.ts\n            \n            \n                component\n            \n            \n                GraphsComponent\n            \n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                    src/app/graphs/rainAndSnow/rain-and-snow.service.ts\n            \n            \n                injectable\n            \n            \n                RainAndSnowService\n            \n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                    src/app/graphs/temperature/temperature.service.ts\n            \n            \n                injectable\n            \n            \n                TemperatureService\n            \n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                    src/app/initial/initial.component.ts\n            \n            \n                component\n            \n            \n                InitialComponent\n            \n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                    src/app/interceptor/interceptor.component.ts\n            \n            \n                component\n            \n            \n                InterceptorComponent\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                    src/app/log.service.ts\n            \n            \n                injectable\n            \n            \n                LogService\n            \n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                    src/app/loggin-dialog/loggin-dialog.component.ts\n            \n            \n                component\n            \n            \n                LogginDialogComponent\n            \n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                    src/app/navigation/navigation.component.ts\n            \n            \n                component\n            \n            \n                NavigationComponent\n            \n            \n                0 %\n                (0/26)\n            \n        \n        \n            \n                \n                    src/app/new-user/new-user.component.ts\n            \n            \n                component\n            \n            \n                NewUserComponent\n            \n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                    src/app/new-user/new-user.component.ts\n            \n            \n                class\n            \n            \n                PasswordValidation\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                    src/app/saved-cities.service.ts\n            \n            \n                injectable\n            \n            \n                SavedCitiesService\n            \n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                    src/app/savedCity.ts\n            \n            \n                class\n            \n            \n                SavedCity\n            \n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                    src/app/servedCity.ts\n            \n            \n                class\n            \n            \n                ServedCity\n            \n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                    src/app/servedCity.ts\n            \n            \n                class\n            \n            \n                ServerResponse\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                    src/app/settings/settings.component.ts\n            \n            \n                component\n            \n            \n                SettingsComponent\n            \n            \n                0 %\n                (0/23)\n            \n        \n        \n            \n                \n                    src/app/userServer.ts\n            \n            \n                class\n            \n            \n                CitiesResponse\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                    src/app/userServer.ts\n            \n            \n                class\n            \n            \n                CitiesResponseUnit\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                    src/app/userServer.ts\n            \n            \n                class\n            \n            \n                UserServer\n            \n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                    src/app/weather.service.ts\n            \n            \n                injectable\n            \n            \n                WeatherService\n            \n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                    src/app/weather.ts\n            \n            \n                class\n            \n            \n                Weather\n            \n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                    src/app/weatherNow.ts\n            \n            \n                class\n            \n            \n                WeatherNow\n            \n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                    src/environments/environment.prod.ts\n            \n            \n                variable\n            \n            \n                environment\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                    src/environments/environment.ts\n            \n            \n                variable\n            \n            \n                environment\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                    src/test.ts\n            \n            \n                variable\n            \n            \n                context\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                    src/test.ts\n            \n            \n                variable\n            \n            \n                require\n            \n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^6.0.4\n        \n            @angular/cdk : ^6.2.1\n        \n            @angular/common : ^6.0.4\n        \n            @angular/compiler : ^6.0.4\n        \n            @angular/core : ^6.0.4\n        \n            @angular/forms : ^6.0.4\n        \n            @angular/http : ^6.0.4\n        \n            @angular/material : ^6.2.1\n        \n            @angular/platform-browser : ^6.0.4\n        \n            @angular/platform-browser-dynamic : ^6.0.4\n        \n            @angular/pwa : ^0.6.8\n        \n            @angular/router : ^6.0.4\n        \n            @angular/service-worker : ^6.0.3\n        \n            @compodoc/compodoc : ^1.1.3\n        \n            @material/fab : ^0.36.1\n        \n            chart.js : ^2.7.2\n        \n            core-js : ^2.5.4\n        \n            hammerjs : ^2.0.8\n        \n            nvm : 0.0.4\n        \n            rxjs : ^6.0.0\n        \n            zone.js : ^0.8.26\n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nWeatherAngular\nThis project was generated with Angular CLI version 6.0.5.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MaterialModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n            \n                \n                    \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAboutComponent\n\nAboutComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAboutComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nCityComponent\n\nCityComponent\n\nAppModule -->\n\nCityComponent->AppModule\n\n\n\n\n\nGraphsComponent\n\nGraphsComponent\n\nAppModule -->\n\nGraphsComponent->AppModule\n\n\n\n\n\nInitialComponent\n\nInitialComponent\n\nAppModule -->\n\nInitialComponent->AppModule\n\n\n\n\n\nInterceptorComponent\n\nInterceptorComponent\n\nAppModule -->\n\nInterceptorComponent->AppModule\n\n\n\n\n\nLogginDialogComponent\n\nLogginDialogComponent\n\nAppModule -->\n\nLogginDialogComponent->AppModule\n\n\n\n\n\nNavigationComponent\n\nNavigationComponent\n\nAppModule -->\n\nNavigationComponent->AppModule\n\n\n\n\n\nNewUserComponent\n\nNewUserComponent\n\nAppModule -->\n\nNewUserComponent->AppModule\n\n\n\n\n\nSettingsComponent\n\nSettingsComponent\n\nAppModule -->\n\nSettingsComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n                \n                \n                \n                    Zoom in\n                    Reset\n                    Zoom out\n                \n            \n\n    \n            \n                \n                    \n                        \n                        \n                            3 modules\n                        \n                    \n                \n            \n            \n                \n                    \n                        \n                        10 components\n                    \n                \n            \n            \n                \n                    \n                        \n                        8 injectables\n                    \n                \n            \n            \n                \n                    \n                        \n                        12 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        \n                            8 routes\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            context   (src/.../test.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            require   (src/.../test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        context:     \n\n                    \n                \n                    \n                        \n                            Default value : require.context('./', true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        require:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        environment:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        environment:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n\n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
