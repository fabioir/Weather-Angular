var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/components/AboutComponent.html",[0,0.405,1,0.987]],["body/components/AboutComponent.html",[0,0.748,1,1.697,2,0.217,3,0.282,4,1.466,5,1.466,6,1.466,7,0.155,8,3.01,9,1.968,10,2.386,11,1.466,12,2.573,13,2.138,14,1.837,15,4.78,16,1.837,17,4.78,18,0.25,19,0.933,20,2.551,21,0.593,22,0.428,23,3.559,24,3.559,25,0.599,26,0.026,27,1.118,28,0.354,29,0.599,30,1.828,31,3.559,32,4.564,33,1.828,34,0.186,35,0.138,36,1.368,37,2.377,38,2.648,39,3.01,40,2.648,41,1.605,42,3.559,43,3.01,44,4.564,45,3.01,46,2.903,47,4.879,48,1.717,49,2.661,50,4.78,51,2.903,52,4.78,53,3.193,54,4.042,55,2.661,56,3.193,57,4.042,58,1.23,59,1.15,60,1.605,61,0.933,62,3.854,63,3.193,64,4.042,65,4.879,66,3.556,67,4.78,68,4.78,69,4.042,70,4.78,71,4.78,72,2.455,73,4.042,74,4.78,75,4.78,76,4.78,77,4.78,78,4.78,79,4.78,80,4.78,81,4.78,82,1.047,83,1.968,84,1.717,85,1.837,86,2.376,87,1.466,88,0.631,89,1.466,90,1.118,91,1.466,92,1.047,93,1.466,94,1.047,95,1.466,96,1.047,97,1.466,98,1.118,99,1.466,100,1.118,101,1.368,102,1.466,103,1.118,104,1.466,105,0.979,106,0.354,107,1.466,108,1.047,109,1.466,110,0.018,111,0.018]],["title/components/AppComponent.html",[0,0.405,90,1.055]],["body/components/AppComponent.html",[0,0.77,1,1.255,2,0.261,3,0.223,4,1.757,5,1.757,6,1.757,7,0.186,11,1.757,12,2.641,13,2.16,14,2.067,16,2.067,18,0.3,22,0.382,26,0.026,28,0.425,29,0.718,34,0.223,35,0.165,41,1.433,49,2.995,60,1.807,82,1.255,83,2.215,84,1.932,85,2.067,86,2.548,87,1.757,88,0.71,89,1.757,90,1.944,91,1.757,92,1.255,93,1.757,94,1.255,95,1.757,96,1.255,97,1.757,98,1.341,99,1.757,100,1.341,101,1.64,102,1.757,103,1.341,104,1.757,105,1.174,106,0.425,107,1.757,108,1.255,109,1.757,110,0.02,111,0.02,112,3.609,113,2.215,114,5.38,115,5.38,116,0.65,117,6.187,118,0.772,119,0.34,120,1.341,121,0.774,122,4.267]],["title/modules/AppModule.html",[123,1.484,124,2.243]],["body/modules/AppModule.html",[0,0.393,1,1.775,2,0.199,3,0.17,7,0.142,13,1.024,26,0.026,28,0.687,29,0.548,34,0.235,35,0.126,46,1.979,49,1.814,55,2.871,82,0.958,90,2.074,92,1.775,94,1.775,96,1.775,98,1.944,100,1.981,101,1.252,103,1.897,105,1.661,106,0.324,108,1.775,110,0.017,111,0.017,113,1.342,123,1.99,124,4.663,125,2.176,126,3.836,127,4.361,128,2.755,129,2.755,130,2.755,131,2.755,132,3.666,133,3.666,134,3.807,135,2.424,136,2.176,137,3.259,138,4.502,139,4.502,140,2.424,141,2.424,142,3.349,143,3.259,144,2.755,145,4.502,146,2.506,147,4.502,148,2.506,149,3.259,150,2.755,151,3.259,152,3.259,153,2.755,154,3.259,155,2.755,156,2.755,157,2.424,158,3.259,159,2.176,160,2.755,161,3.807,162,4.502,163,1.55,164,4.502,165,1.814,166,2.424,167,2.755,168,2.755,169,3.259,170,4.502,171,3.259,172,3.259,173,1.814,174,3.259,175,3.259,176,2.755,177,3.259,178,3.259,179,3.259,180,1.17,181,2.176,182,3.259,183,3.259,184,3.259,185,3.259]],["title/modules/AppRoutingModule.html",[123,1.484,132,2.039]],["body/modules/AppRoutingModule.html",[0,0.799,1,1.53,2,0.247,3,0.211,7,0.176,26,0.027,28,0.679,29,0.682,34,0.272,35,0.157,36,1.557,41,1.36,46,2.46,92,1.53,94,1.691,96,1.53,105,1.432,106,0.403,108,1.53,110,0.019,111,0.019,123,2.301,132,3.161,140,3.013,142,3.872,144,3.425,150,3.425,153,3.425,163,1.927,165,2.255,166,3.013,167,3.425,168,3.425,186,4.051,187,4.051,188,3.425,189,2.706,190,5.205,191,3.116,192,1.668,193,5.205,194,4.051,195,4.401,196,5.205,197,5.597,198,4.051,199,3.872,200,4.051,201,4.051,202,4.051,203,2.08,204,1.927,205,4.051,206,4.051,207,2.08,208,2.46,209,3.013,210,3.425,211,4.051,212,4.051,213,4.051,214,3.013]],["title/classes/CitiesResponse.html",[35,0.13,215,1.869]],["body/classes/CitiesResponse.html",[2,0.278,3,0.238,7,0.198,18,0.32,21,0.5,22,0.407,25,0.766,26,0.026,28,0.453,34,0.317,35,0.245,58,1.172,61,1.235,106,0.453,110,0.021,111,0.021,116,0.676,118,0.933,119,0.363,215,3.119,216,3.041,217,1.487,218,4.553,219,1.881,220,2.338,221,2.664,222,2.166,223,3.387,224,3.387,225,2.535,226,1.635,227,3.387,228,3.387,229,3.387,230,3.387,231,1.253,232,3.387,233,3.387,234,3.387,235,3.387,236,3.387,237,2.765]],["title/classes/CitiesResponseUnit.html",[35,0.13,237,2.039]],["body/classes/CitiesResponseUnit.html",[2,0.278,3,0.238,7,0.198,18,0.32,21,0.5,22,0.407,25,0.766,26,0.026,28,0.453,34,0.317,35,0.245,58,1.629,61,0.888,106,0.453,110,0.021,111,0.021,116,0.676,118,0.962,119,0.363,215,2.535,216,3.041,217,1.422,219,1.881,220,2.338,221,2.664,222,2.166,223,3.387,224,3.387,225,2.535,226,1.635,227,3.387,228,3.387,229,3.387,230,3.387,231,1.253,232,3.387,233,3.387,234,3.387,235,3.387,236,3.387,237,3.401,238,4.553]],["title/injectables/CitiesServerService.html",[239,0.808,240,2.039]],["body/injectables/CitiesServerService.html",[2,0.135,3,0.116,7,0.096,18,0.156,19,0.663,21,0.373,22,0.547,25,1.063,26,0.027,27,0.696,28,0.497,29,0.373,34,0.116,35,0.086,36,0.851,48,0.795,53,1.479,58,1.356,59,0.817,69,1.873,88,0.817,106,0.546,110,0.02,111,0.013,113,0.912,116,0.41,118,0.946,119,0.503,120,1.298,121,0.995,146,1.233,180,1.219,181,1.479,204,1.053,217,1.373,219,1.677,225,2.934,231,1.274,239,0.994,240,2.062,241,5.234,242,1.873,243,4.211,244,3.916,245,3.916,246,3.396,247,3.396,248,3.396,249,2.378,250,3.396,251,3.396,252,3.492,253,1.873,254,3.093,255,2.609,256,3.396,257,0.854,258,0.995,259,2.062,260,3.396,261,6.531,262,2.215,263,3.396,264,1.656,265,2.215,266,3.396,267,2.215,268,2.215,269,3.916,270,3.396,271,2.215,272,3.396,273,2.215,274,3.396,275,2.215,276,2.872,277,3.396,278,2.215,279,2.872,280,3.396,281,2.215,282,2.526,283,2.215,284,3.715,285,1.345,286,2.062,287,1.233,288,1.345,289,1.053,290,1.305,291,1.233,292,2.872,293,1.219,294,1.398,295,2.508,296,4.631,297,3.916,298,3.093,299,4.631,300,4.631,301,2.215,302,4.631,303,2.215,304,4.13,305,2.759,306,2.215,307,1.345,308,3.396,309,2.062,310,2.215,311,1.479,312,2.215,313,5.27,314,3.336,315,2.215,316,2.215,317,3.396,318,1.873,319,3.396,320,2.215,321,3.396,322,3.396,323,3.396,324,3.396,325,3.396,326,2.215,327,2.215,328,3.396,329,3.396,330,3.396,331,2.526,332,3.396,333,3.396,334,3.396,335,2.062,336,2.062,337,2.062,338,2.526,339,3.396,340,3.396,341,3.396,342,3.396,343,3.396,344,3.396,345,2.215,346,0.851,347,1.647,348,1.345,349,2.215,350,2.215,351,2.215,352,2.215,353,2.215,354,2.215,355,2.215,356,2.215,357,2.215,358,1.873,359,0.912]],["title/components/CityComponent.html",[0,0.405,92,0.987]],["body/components/CityComponent.html",[0,0.687,1,0.724,2,0.298,3,0.128,4,1.515,5,1.014,6,1.014,7,0.107,9,1.515,10,1.947,11,1.014,12,2.405,13,1.966,14,1.414,16,1.414,18,0.173,19,0.718,20,2.16,21,0.404,22,0.56,25,0.741,26,0.026,27,1.384,28,0.615,29,0.414,30,2.51,33,1.264,34,0.128,35,0.095,36,1.414,41,0.827,48,0.884,58,1.412,59,1.176,60,1.843,61,1.11,82,0.724,83,1.515,84,1.321,85,1.414,86,2.013,87,1.014,88,0.645,89,1.014,90,0.774,91,1.014,92,1.437,93,1.014,94,1.082,95,1.014,96,0.724,97,1.014,98,0.774,99,1.014,100,0.774,101,0.946,102,1.014,103,0.774,104,1.014,105,0.677,106,0.566,107,1.014,108,0.724,109,1.014,110,0.014,111,0.014,116,0.444,119,0.437,120,1.384,121,1.104,163,1.75,189,1.644,191,2.262,192,1.014,197,2.082,203,1.264,214,3.277,217,1.175,219,1.757,226,0.884,231,1.212,255,2.706,257,0.854,258,0.447,287,2.453,288,1.495,290,2.01,294,1.515,295,1.495,346,1.414,348,2.234,360,2.082,361,3.679,362,3.679,363,5.231,364,5.231,365,4.888,366,2.247,367,3.891,368,4.888,369,4.888,370,4.18,371,4.888,372,4.888,373,2.082,374,4.133,375,3.167,376,3.454,377,3.277,378,3.636,379,3.679,380,2.462,381,2.462,382,2.462,383,2.462,384,2.462,385,2.462,386,2.462,387,2.611,388,2.462,389,2.462,390,2.462,391,1.831,392,2.082,393,2.082,394,2.462,395,1.889,396,1.831,397,1.171,398,2.462,399,2.462,400,2.462,401,2.462,402,1.626,403,1.889,404,2.325,405,1.831,406,2.048,407,1.889,408,2.082,409,2.082,410,2.462,411,2.462,412,2.462,413,2.462,414,2.462,415,2.082,416,2.462,417,2.462,418,2.462,419,2.462,420,2.462,421,1.495,422,2.462,423,2.462,424,2.462,425,2.462,426,2.082,427,2.462,428,2.082,429,2.462,430,2.462,431,2.462,432,2.462,433,2.462,434,2.462,435,2.462,436,2.462,437,2.462,438,2.462,439,2.462,440,1.831,441,2.082,442,1.831,443,2.462,444,1.831,445,1.644,446,2.462,447,1.831,448,2.082,449,1.831,450,1.644,451,1.644,452,3.679,453,3.679,454,3.679,455,3.679]],["title/injectables/CloudsAndWindService.html",[239,0.808,456,2.243]],["body/injectables/CloudsAndWindService.html",[2,0.204,3,0.175,7,0.146,18,0.235,19,0.895,21,0.575,22,0.544,25,1.049,26,0.027,28,0.521,29,0.563,34,0.175,35,0.13,59,0.805,61,1.098,82,0.985,88,0.442,106,0.333,110,0.017,111,0.017,113,1.379,116,0.554,118,0.808,119,0.497,121,0.607,180,2.116,217,1.367,226,2.02,231,1.262,239,1.258,257,0.521,258,0.832,264,1.994,289,1.593,291,2.553,294,1.889,366,1.878,402,1.48,456,3.063,457,5.27,458,2.831,459,4.428,460,3.626,461,3.937,462,3.661,463,4.586,464,3.348,465,4.586,466,3.348,467,3.348,468,3.348,469,3.348,470,3.348,471,1.864,472,2.236,473,2.785,474,3.891,475,3.891,476,3.177,477,3.878,478,3.348,479,2.785,480,2.785,481,4.586,482,3.348,483,3.412,484,2.491,485,3.412,486,3.348,487,3.412,488,3.891,489,2.491,490,3.412,491,3.348,492,3.878,493,2.831,494,2.831,495,2.831,496,4.586,497,4.586,498,2.491,499,2.491,500,2.491,501,2.491,502,4.586,503,3.878,504,2.182,505,3.878,506,3.348,507,3.348,508,2.491]],["title/classes/Data.html",[35,0.13,61,0.655]],["body/classes/Data.html",[2,0.214,3,0.183,7,0.153,18,0.247,21,0.631,22,0.479,26,0.027,28,0.349,33,2.432,34,0.28,35,0.222,36,1.349,48,1.701,55,1.954,58,0.903,59,1.139,60,2.073,61,1.205,72,1.803,106,0.471,110,0.018,111,0.018,116,0.572,118,0.906,119,0.427,121,1.041,203,1.803,207,1.803,217,1.289,231,0.966,257,0.893,264,2.124,293,2.06,346,1.349,359,1.446,366,2.06,387,1.67,395,1.803,406,1.954,421,2.132,451,2.345,460,1.954,462,1.954,473,2.132,479,2.132,480,2.876,509,2.345,510,4.736,511,3.511,512,2.611,513,2.611,514,2.345,515,2.611,516,2.876,517,3.163,518,3.163,519,3.163,520,3.163,521,3.163,522,3.523,523,3.163,524,3.163,525,1.954,526,3.163,527,1.954,528,1.954,529,2.611,530,2.345,531,2.611,532,2.345,533,2.611,534,2.611,535,2.611,536,2.345,537,2.611,538,2.611,539,2.611,540,2.611,541,2.611,542,2.611,543,2.611,544,2.611,545,2.611,546,2.611,547,2.345,548,2.611,549,2.345,550,2.611,551,2.345,552,2.611,553,2.345,554,2.611,555,2.611,556,2.611,557,2.611,558,2.611,559,2.611,560,2.132,561,2.611,562,2.611,563,2.611,564,2.132,565,2.611,566,2.611,567,3.163,568,1.67,569,2.132,570,2.345,571,2.132]],["title/classes/Forecast.html",[35,0.13,366,1.206]],["body/classes/Forecast.html",[2,0.194,3,0.166,7,0.139,18,0.224,21,0.56,22,0.569,26,0.026,28,0.317,33,2.274,34,0.266,35,0.213,36,1.223,48,1.59,55,1.772,58,0.819,59,1.065,60,2.138,61,1.129,72,1.634,84,1.143,88,0.42,106,0.441,110,0.016,111,0.016,116,0.535,118,0.831,119,0.537,121,0.577,203,1.634,207,1.634,217,1.346,231,0.876,257,0.689,258,0.577,264,2.148,293,1.977,346,1.223,359,1.31,366,2.207,387,1.514,395,1.634,406,1.772,421,1.933,451,2.126,460,3.066,462,3.066,473,1.933,479,1.933,480,2.689,509,2.126,512,2.367,513,2.367,514,3.678,515,4.096,516,3.515,517,2.958,518,2.958,519,2.958,520,2.958,521,2.958,522,3.294,523,2.958,524,2.958,525,1.772,526,2.958,527,3.066,528,3.066,529,3.294,530,2.126,531,2.367,532,2.126,533,2.367,534,2.367,535,2.367,536,2.126,537,2.367,538,2.367,539,2.367,540,2.367,541,2.367,542,2.367,543,2.367,544,2.367,545,2.367,546,2.367,547,2.126,548,2.367,549,2.126,550,2.367,551,2.126,552,2.367,553,2.126,554,2.367,555,2.367,556,2.367,557,2.367,558,2.367,559,2.367,560,1.933,561,2.367,562,2.367,563,2.367,564,1.933,565,2.367,566,2.367,567,2.958,568,1.514,569,1.933,570,2.126,571,1.933,572,4.428,573,4.458,574,3.183,575,3.183,576,3.183,577,3.183,578,3.183,579,3.183,580,3.183]],["title/injectables/ForecastValuesService.html",[239,0.808,376,2.039]],["body/injectables/ForecastValuesService.html",[2,0.231,3,0.198,7,0.165,18,0.266,19,0.972,21,0.612,22,0.59,25,1.098,26,0.026,27,1.565,28,0.589,29,0.637,34,0.198,35,0.147,46,2.299,48,1.359,58,1.623,88,0.657,106,0.496,110,0.018,111,0.018,113,1.559,116,0.601,119,0.444,120,1.565,121,1.115,217,1.445,219,2.238,239,1.339,257,0.775,258,0.903,289,1.801,346,1.455,366,1.789,376,3.025,404,1.801,407,3.155,471,2.108,581,5.634,582,3.201,583,5.001,584,4.399,585,4.399,586,5.914,587,4.981,588,4.981,589,3.786,590,3.786,591,3.786,592,3.099,593,3.786,594,4.981,595,3.786,596,4.981,597,3.786,598,3.786,599,3.786,600,4.141,601,3.786,602,1.801,603,2.816,604,4.212,605,3.786,606,3.705,607,2.816,608,3.786,609,3.786]],["title/components/GraphsComponent.html",[0,0.405,94,0.987]],["body/components/GraphsComponent.html",[0,0.624,1,0.621,2,0.129,3,0.11,4,0.87,5,0.87,6,0.87,7,0.092,9,1.348,10,1.772,11,0.87,12,2.323,13,1.899,14,1.258,16,1.258,18,0.148,19,0.639,20,1.996,21,0.36,22,0.577,25,0.76,26,0.027,27,1.419,28,0.555,29,0.355,30,2.319,34,0.11,35,0.082,36,0.811,41,0.709,58,1.434,59,0.964,62,1.41,82,0.621,83,1.348,84,1.175,85,1.258,86,1.86,87,0.87,88,0.529,89,0.87,90,0.663,91,0.87,92,0.621,93,0.87,94,1.328,95,0.87,96,0.621,97,0.87,98,0.663,99,0.87,100,0.663,101,0.811,102,0.87,103,0.663,104,0.87,105,0.581,106,0.21,107,0.87,108,0.621,109,0.87,110,0.012,111,0.012,116,0.395,118,0.821,119,0.494,120,1.26,121,0.978,191,2.319,192,0.87,203,1.681,217,0.901,226,1.439,231,0.581,257,0.329,258,0.383,264,1.966,290,1.987,293,2.247,366,1.439,374,3.819,375,3.003,376,3.139,391,1.571,393,1.786,395,1.681,397,2.324,404,1.004,407,2.058,408,1.786,409,1.786,426,1.786,428,1.786,450,2.677,456,3.602,459,4.428,460,2.514,461,3.016,462,2.514,471,1.176,527,2.878,528,3.103,583,3.819,604,4.372,606,1.571,610,1.786,611,3.274,612,3.274,613,4.516,614,5.17,615,5.17,616,4.516,617,5.17,618,4.516,619,4.497,620,3.819,621,3.819,622,4.516,623,4.516,624,2.112,625,3.602,626,3.602,627,3.274,628,2.112,629,2.112,630,2.112,631,2.112,632,2.112,633,2.112,634,2.112,635,2.112,636,2.112,637,2.112,638,2.112,639,2.112,640,2.112,641,2.112,642,2.112,643,2.112,644,2.112,645,2.112,646,2.112,647,2.112,648,2.112,649,2.112,650,2.112,651,2.112,652,2.112,653,2.112,654,5.393,655,5.393,656,5.393,657,2.112,658,2.112,659,2.112,660,1.786,661,4.009,662,5.17,663,4.516,664,4.009,665,4.516,666,4.516,667,4.009,668,2.112,669,2.677,670,4.009,671,3.274,672,2.112,673,2.112,674,1.176,675,1.786]],["title/components/InitialComponent.html",[0,0.405,96,0.987]],["body/components/InitialComponent.html",[0,0.613,1,0.593,2,0.123,3,0.165,4,0.831,5,0.831,6,0.831,7,0.088,9,1.301,10,1.721,11,0.831,12,2.298,13,1.928,14,1.214,16,1.214,18,0.142,19,0.76,20,1.948,21,0.347,22,0.572,25,0.949,26,0.026,27,1.666,28,0.476,29,0.339,30,1.622,34,0.105,35,0.122,36,0.775,37,2.11,38,1.501,39,1.706,40,2.35,41,0.678,45,1.706,46,1.919,48,0.725,49,1.759,53,2.11,54,2.672,57,4.045,58,1.647,59,0.485,60,1.061,62,2.11,63,2.943,82,0.593,83,1.301,84,1.135,85,1.214,86,1.814,87,0.831,88,0.631,89,0.831,90,0.634,91,0.831,92,0.593,93,0.831,94,0.593,95,0.831,96,1.296,97,0.831,98,0.634,99,0.831,100,0.634,101,0.775,102,0.831,103,0.634,104,0.831,105,0.555,106,0.438,107,0.831,108,0.593,109,0.831,110,0.019,111,0.012,116,0.381,118,0.829,119,0.46,120,1.666,121,1.024,146,1.123,173,1.759,176,3.293,180,0.725,181,1.348,199,2.897,207,1.036,209,1.501,217,1.191,219,1.843,225,2.663,226,1.398,240,2.676,252,1.706,254,2.943,257,0.314,258,0.706,259,2.365,290,1.496,291,1.759,292,4.29,293,0.725,294,1.97,305,1.348,307,1.225,309,1.225,311,1.348,314,4.346,346,0.775,359,1.301,367,1.501,375,2.825,391,1.501,396,1.501,403,1.622,444,2.897,445,1.348,447,3.278,449,1.501,504,1.852,568,1.852,584,3.559,669,2.11,676,1.706,677,3.16,678,3.16,679,5.489,680,4.406,681,4.406,682,5.074,683,4.406,684,4.406,685,4.406,686,4.406,687,4.406,688,4.406,689,4.406,690,4.406,691,2.943,692,3.894,693,3.16,694,2.018,695,3.894,696,3.16,697,2.018,698,3.16,699,2.018,700,3.16,701,2.018,702,2.018,703,2.018,704,2.018,705,2.018,706,2.018,707,2.018,708,2.018,709,2.018,710,3.16,711,2.018,712,2.018,713,2.018,714,2.018,715,2.018,716,4.484,717,2.018,718,2.018,719,2.018,720,1.706,721,3.16,722,2.018,723,3.16,724,2.018,725,2.018,726,2.018,727,4.406,728,3.16,729,2.018,730,2.018,731,2.018,732,2.018,733,1.706,734,1.706,735,1.706,736,1.706,737,1.706,738,1.706,739,2.018,740,2.018,741,2.897,742,2.018,743,1.706,744,1.706,745,2.018,746,3.293,747,3.894,748,3.894,749,3.16,750,3.894,751,2.672,752,3.16,753,2.018,754,2.018,755,2.018,756,2.018,757,2.018,758,2.018,759,3.16,760,1.225,761,1.706,762,2.018,763,2.018,764,3.16,765,2.018,766,2.018,767,2.018,768,1.706,769,1.706,770,1.501,771,2.018,772,2.018,773,2.018,774,2.018,775,2.018,776,3.16,777,2.018,778,2.018,779,2.018,780,2.018,781,2.018,782,3.894,783,2.018,784,2.018,785,2.018,786,2.018,787,2.018,788,2.018,789,1.706,790,3.16,791,3.894,792,2.018,793,2.018,794,1.706,795,2.018,796,3.16,797,3.16,798,3.16,799,2.11,800,3.16,801,3.16,802,3.16,803,3.16]],["title/components/InterceptorComponent.html",[0,0.405,98,1.055]],["body/components/InterceptorComponent.html",[0,0.752,1,1.066,2,0.221,3,0.189,4,1.493,5,1.493,6,1.493,7,0.158,9,1.993,11,1.493,12,2.58,13,2.11,14,1.86,16,1.86,18,0.255,19,0.945,21,0.399,22,0.433,25,0.978,26,0.026,28,0.603,29,0.61,34,0.189,35,0.141,41,1.218,82,1.066,83,1.993,84,1.738,85,1.86,86,2.394,87,1.493,88,0.767,89,1.493,90,1.139,91,1.493,92,1.066,93,1.493,94,1.066,95,1.493,96,1.066,97,1.493,98,1.827,99,1.493,100,1.139,101,1.393,102,1.493,103,1.139,104,1.493,105,0.998,106,0.361,107,1.493,108,1.066,109,1.493,110,0.018,111,0.018,119,0.434,146,2.019,243,2.697,257,0.753,258,0.878,259,2.202,282,2.697,298,2.422,307,3.309,338,2.697,397,1.725,404,1.725,592,3.034,602,1.725,674,2.019,741,2.697,804,3.066,805,5.449,806,5.814,807,4.84,808,4.84,809,5.449,810,3.626,811,2.765,812,3.626,813,4.093,814,4.84,815,4.916,816,5.449,817,5.814,818,3.626,819,3.626,820,2.202,821,3.066,822,3.626,823,5.449,824,4.84,825,3.626,826,3.066,827,3.626,828,3.626,829,2.697,830,3.626,831,3.626,832,2.697,833,4.84]],["title/injectables/LogService.html",[239,0.808,811,1.597]],["body/injectables/LogService.html",[2,0.223,3,0.095,7,0.079,13,0.573,18,0.128,19,0.569,21,0.321,22,0.554,25,1.032,26,0.027,27,1.602,28,0.544,29,0.307,33,0.937,34,0.095,35,0.071,36,0.701,37,2.782,41,0.612,48,1.047,51,2.766,53,1.218,56,2.434,58,1.562,59,1.096,61,0.569,62,1.218,88,0.673,106,0.507,110,0.011,111,0.011,113,0.751,116,0.352,118,0.958,119,0.464,120,1.309,121,0.661,146,1.015,163,0.868,192,0.751,204,2.771,207,0.937,215,1.015,217,0.819,219,0.98,220,2.619,221,2.814,222,2.969,225,2.949,239,0.877,240,3.097,243,2.17,244,3.522,245,3.522,249,2.138,254,2.782,255,2.31,257,0.756,258,0.881,259,2.213,276,2.466,279,2.466,282,2.711,284,2.711,287,2.536,288,1.108,289,0.868,290,1.75,291,1.624,293,1.047,295,3.097,297,2.466,298,1.218,305,1.218,307,1.771,309,1.771,311,3.042,338,1.357,346,0.701,347,2.17,348,1.771,358,1.542,359,2.249,377,2.711,378,3.098,397,1.387,402,0.806,403,1.498,404,1.734,407,2.619,440,3.793,445,1.218,476,1.108,568,0.868,569,1.771,571,1.108,585,3.098,592,2.536,600,3.613,602,0.868,603,1.357,674,2.319,675,1.542,691,1.218,720,1.542,744,1.542,760,1.108,811,1.387,813,3.522,815,1.542,826,2.466,829,2.17,832,3.793,834,1.542,835,3.851,836,4.165,837,2.917,838,4.165,839,2.917,840,4.165,841,2.917,842,4.165,843,2.917,844,4.165,845,1.824,846,2.839,847,2.917,848,1.824,849,2.917,850,1.824,851,2.917,852,1.824,853,2.917,854,1.824,855,1.824,856,1.824,857,2.917,858,1.824,859,1.824,860,2.917,861,1.824,862,1.824,863,1.824,864,1.824,865,1.824,866,1.824,867,1.824,868,1.824,869,1.824,870,1.948,871,1.824,872,3.522,873,2.917,874,1.824,875,2.917,876,3.082,877,3.082,878,1.824,879,1.824,880,1.357,881,1.542,882,1.824,883,1.824,884,3.645,885,1.824,886,1.824,887,3.645,888,1.824,889,2.466,890,1.824,891,2.17,892,1.824,893,1.824,894,4.165,895,2.917,896,1.824,897,2.917,898,1.824,899,2.917,900,2.917,901,2.917,902,2.917,903,2.917,904,1.542,905,1.824,906,3.522,907,2.917,908,2.917,909,2.917,910,2.917,911,1.824,912,2.917,913,3.645,914,1.824,915,2.917,916,1.824,917,4.554,918,3.082,919,1.824,920,1.824,921,1.824,922,1.824,923,1.824,924,1.824,925,1.542,926,1.824,927,1.542,928,2.917,929,3.645,930,1.824,931,1.824,932,1.824,933,1.824,934,1.824,935,1.824,936,2.917,937,1.824,938,1.824,939,1.824,940,1.824,941,1.824,942,4.165,943,1.824,944,1.824,945,1.542,946,2.917,947,2.917,948,1.824,949,1.824,950,1.824,951,1.824,952,1.824,953,1.824,954,1.108,955,1.824,956,1.824,957,1.824]],["title/components/LogginDialogComponent.html",[0,0.405,100,1.055]],["body/components/LogginDialogComponent.html",[0,0.719,1,0.772,2,0.16,3,0.137,4,1.082,5,1.082,6,1.082,7,0.114,9,1.589,10,2.023,11,1.082,12,2.437,13,1.993,14,1.483,16,1.483,18,0.184,19,0.753,20,2.23,21,0.424,22,0.573,25,0.977,26,0.026,27,1.585,28,0.502,29,0.442,30,1.349,34,0.137,35,0.102,41,0.882,61,0.753,82,0.772,83,1.589,84,1.386,85,1.483,86,2.077,87,1.082,88,0.604,89,1.082,90,0.825,91,1.082,92,0.772,93,1.082,94,0.772,95,1.082,96,0.772,97,1.082,98,0.825,99,1.082,100,1.585,101,2.232,102,1.082,103,0.825,104,1.082,105,0.723,106,0.502,107,1.082,108,0.772,109,1.082,110,0.014,111,0.014,116,0.466,118,0.873,119,0.428,120,1.585,121,0.915,148,1.462,159,4.315,163,1.249,173,1.462,180,1.811,191,1.349,192,1.082,204,1.836,208,2.344,221,2.893,222,2.763,249,2.76,257,0.409,258,0.476,290,1.483,293,1.811,294,2.504,295,1.595,450,2.578,487,1.954,525,2.809,571,1.595,691,1.754,746,2.221,799,3.369,846,3.234,870,3.057,958,5.463,959,2.221,960,4.545,961,3.86,962,3.86,963,3.264,964,5.045,965,5.045,966,5.045,967,5.045,968,5.045,969,5.045,970,3.753,971,2.627,972,4.266,973,3.86,974,3.264,975,2.627,976,2.627,977,2.627,978,2.627,979,2.627,980,3.59,981,2.627,982,2.627,983,2.627,984,2.627,985,2.627,986,2.627,987,3.057,988,2.627,989,1.954,990,2.627,991,2.627,992,1.954,993,2.578,994,2.627,995,2.627,996,1.954,997,2.627,998,2.221,999,2.221,1000,2.221,1001,3.86,1002,3.86,1003,3.86,1004,3.86,1005,2.627,1006,2.149,1007,2.627,1008,2.627,1009,2.627,1010,2.627,1011,2.627,1012,2.627,1013,2.627,1014,2.627,1015,4.576,1016,4.576,1017,2.627,1018,2.627,1019,3.86,1020,3.86,1021,3.86,1022,3.264]],["title/modules/MaterialModule.html",[123,1.484,133,2.039]],["body/modules/MaterialModule.html",[0,0.521,2,0.264,3,0.225,7,0.188,26,0.026,28,0.65,29,0.726,34,0.309,35,0.167,84,1.549,110,0.02,111,0.02,123,1.907,126,3.21,133,3.596,142,4.03,161,5.008,163,2.053,188,4.581,189,2.882,195,5.008,743,3.649,794,3.649,1023,4.315,1024,5.922,1025,5.922,1026,5.922,1027,5.922,1028,5.922,1029,5.922,1030,5.922,1031,5.922,1032,5.922,1033,5.922,1034,5.922,1035,5.922,1036,5.922,1037,5.922,1038,5.922,1039,5.922,1040,5.922,1041,5.922,1042,5.922,1043,5.922,1044,4.315,1045,4.315,1046,4.315,1047,4.315,1048,4.315]],["title/components/NavigationComponent.html",[0,0.405,103,1.055]],["body/components/NavigationComponent.html",[0,0.623,1,0.553,2,0.115,3,0.098,4,0.775,5,0.775,6,0.775,7,0.082,9,1.231,10,1.645,11,0.775,12,2.257,13,1.846,14,1.149,16,1.149,18,0.132,19,0.726,20,1.874,21,0.329,22,0.584,25,0.971,26,0.027,27,1.777,28,0.549,29,0.317,30,2.177,34,0.098,35,0.073,36,0.723,37,1.257,38,1.4,40,2.224,41,1.553,43,1.591,44,1.591,49,1.665,56,2.831,58,1.486,59,0.895,60,1.004,61,0.367,66,4.435,72,0.966,82,0.553,83,1.231,84,1.074,85,1.149,86,1.745,87,0.775,88,0.491,89,0.775,90,0.591,91,0.775,92,0.553,93,0.775,94,0.553,95,0.775,96,0.553,97,0.775,98,0.591,99,0.775,100,0.94,101,1.149,102,0.775,103,1.332,104,0.775,105,0.518,106,0.187,107,0.775,108,0.553,109,0.775,110,0.011,111,0.011,116,0.361,118,0.664,119,0.46,120,1.547,121,0.893,136,2.831,159,1.257,160,1.591,163,0.895,180,1.074,192,0.775,199,1.4,204,1.422,208,1.816,214,1.4,219,1.853,226,0.676,249,3.268,255,2.548,257,0.293,258,0.675,269,2.529,287,2.36,288,1.143,290,1.629,293,1.522,294,2.516,295,1.143,305,1.257,318,1.591,348,3.135,373,1.591,377,2.768,378,3.153,396,1.4,397,1.422,403,0.966,404,1.422,407,0.966,440,1.4,441,1.591,450,1.997,476,1.143,495,1.591,504,0.895,568,1.77,584,2.768,592,1.665,602,0.895,674,3.073,691,2.831,716,3.584,738,1.591,751,1.591,760,1.816,761,2.529,768,1.591,811,2.456,820,1.143,829,1.4,832,2.768,846,2.742,870,1.997,880,1.4,881,1.591,889,2.529,904,1.591,927,1.591,954,1.816,960,4.667,963,1.143,972,3.584,974,3.584,998,2.529,1006,1.665,1022,1.591,1049,1.591,1050,3.146,1051,2.99,1052,2.99,1053,4.239,1054,3.721,1055,4.239,1056,4.239,1057,3.584,1058,4.239,1059,4.239,1060,4.924,1061,4.239,1062,4.239,1063,3.911,1064,4.239,1065,3.584,1066,4.239,1067,4.239,1068,4.239,1069,4.239,1070,4.239,1071,3.584,1072,4.924,1073,2.99,1074,1.882,1075,1.882,1076,1.882,1077,1.882,1078,1.882,1079,1.882,1080,1.882,1081,1.882,1082,1.882,1083,1.882,1084,1.882,1085,1.882,1086,1.882,1087,1.882,1088,1.882,1089,1.882,1090,1.882,1091,1.882,1092,1.882,1093,1.882,1094,1.882,1095,1.882,1096,1.882,1097,1.882,1098,1.882,1099,1.882,1100,1.882,1101,1.882,1102,1.882,1103,1.882,1104,1.882,1105,1.4,1106,1.882,1107,1.882,1108,1.882,1109,1.591,1110,1.882,1111,4.924,1112,1.882,1113,1.882,1114,1.591,1115,1.882,1116,2.99,1117,1.882,1118,1.882,1119,1.882,1120,1.882,1121,1.882,1122,4.239,1123,3.721,1124,2.99,1125,4.625,1126,2.529,1127,4.239,1128,1.882,1129,1.882,1130,1.882,1131,1.882,1132,1.591,1133,1.882,1134,1.882,1135,1.882,1136,1.882,1137,1.882,1138,1.882,1139,1.882,1140,1.882,1141,2.99,1142,1.882,1143,1.882,1144,2.529,1145,1.882,1146,1.882,1147,1.882,1148,1.882,1149,1.257,1150,2.529,1151,2.99,1152,2.99,1153,2.99,1154,2.99,1155,2.529,1156,1.997]],["title/components/NewUserComponent.html",[0,0.405,105,0.924]],["body/components/NewUserComponent.html",[0,0.717,1,0.91,2,0.265,3,0.161,4,1.274,5,1.274,6,1.274,7,0.135,9,1.788,10,2.217,11,1.274,12,2.513,13,2.055,14,1.668,16,1.668,18,0.217,19,0.847,20,2.404,21,0.477,22,0.531,25,0.915,26,0.026,27,1.576,28,0.541,29,0.52,34,0.227,35,0.168,41,1.039,51,3.046,59,1.044,82,0.91,83,1.788,84,1.559,85,1.668,86,2.239,87,1.274,88,0.662,89,1.274,90,0.972,91,1.274,92,0.91,93,1.274,94,0.91,95,1.274,96,0.91,97,1.274,98,0.972,99,1.274,100,0.972,101,1.189,102,1.274,103,0.972,104,1.274,105,1.496,106,0.63,107,1.274,108,0.91,109,1.274,110,0.016,111,0.016,116,0.524,118,0.72,119,0.4,121,0.561,148,1.722,165,3.396,173,1.722,180,1.111,192,1.274,204,2.587,221,1.471,222,2.065,249,2.229,257,0.481,258,0.561,290,1.668,403,2.229,442,2.301,607,2.301,770,2.301,811,2.901,820,1.878,846,1.722,954,2.636,963,3.78,970,4.046,980,3.632,987,3.967,989,2.301,992,2.301,993,3.35,996,2.301,1006,1.722,1149,2.066,1157,4.537,1158,2.301,1159,3.671,1160,3.671,1161,4.261,1162,4.599,1163,3.093,1164,4.418,1165,4.341,1166,3.093,1167,3.093,1168,3.093,1169,3.093,1170,3.229,1171,2.616,1172,2.301,1173,3.731,1174,3.229,1175,2.301,1176,2.616,1177,2.616,1178,2.616,1179,1.878,1180,2.616,1181,2.616,1182,2.616,1183,2.616,1184,2.616,1185,2.616,1186,2.616,1187,2.616,1188,2.616,1189,2.616,1190,2.616]],["title/classes/PasswordValidation.html",[35,0.13,1179,2.039]],["body/classes/PasswordValidation.html",[0,0.67,2,0.303,3,0.197,7,0.164,9,1.551,10,2.195,12,1.448,13,1.184,14,1.448,16,1.448,18,0.265,19,0.969,20,1.665,21,0.414,22,0.337,25,0.835,26,0.027,28,0.587,29,0.634,34,0.259,35,0.215,51,3.372,59,1.194,88,0.497,105,1.037,106,0.61,110,0.018,111,0.018,118,0.541,119,0.3,121,0.683,148,2.098,165,2.764,173,2.098,180,1.353,192,1.551,204,2.641,221,1.792,222,2.641,249,2.549,257,0.586,258,0.683,290,1.908,403,2.549,442,2.803,607,2.803,770,3.693,811,2.641,820,2.288,846,2.098,963,3.725,970,2.803,980,3.316,987,4.29,989,2.803,992,2.803,993,3.709,996,2.803,1006,2.098,1149,2.516,1157,3.693,1158,2.803,1159,3.186,1160,3.186,1161,3.693,1162,3.186,1164,4.131,1170,4.391,1171,3.186,1172,2.803,1173,4.131,1174,3.693,1175,2.803,1176,3.186,1177,3.186,1178,3.186,1179,3.015,1180,4.198,1181,4.696,1182,4.198,1183,3.186,1184,3.186,1185,3.186,1186,3.186,1187,3.186,1188,3.186,1189,3.186,1190,4.696,1191,3.768,1192,3.768]],["title/injectables/RainAndSnowService.html",[239,0.808,626,2.243]],["body/injectables/RainAndSnowService.html",[2,0.214,3,0.183,7,0.153,18,0.247,19,0.924,21,0.589,22,0.552,25,1.062,26,0.026,28,0.533,29,0.591,34,0.183,35,0.136,59,0.845,61,1.12,82,1.032,88,0.463,106,0.349,110,0.018,111,0.018,113,1.446,116,0.572,118,0.824,119,0.492,121,0.637,180,2.06,217,1.387,226,1.925,239,1.29,257,0.546,258,0.859,264,2.016,289,1.67,291,2.637,294,1.95,366,2.151,402,1.552,459,4.462,461,4.002,471,1.954,472,2.345,474,3.987,475,3.987,476,3.255,483,3.523,484,2.611,485,3.523,487,2.611,488,3.987,489,2.611,490,3.523,492,4.005,493,2.968,498,2.611,499,2.611,500,2.611,501,2.611,508,2.611,527,3.573,528,3.573,560,2.876,564,2.876,626,3.163,1193,5.336,1194,2.968,1195,4.736,1196,4.736,1197,4.736,1198,3.511,1199,3.511,1200,3.511,1201,3.511,1202,5.738,1203,3.511,1204,3.511,1205,3.511,1206,4.005,1207,3.511]],["title/classes/RespuestaForecast.html",[35,0.13,395,1.724]],["body/classes/RespuestaForecast.html",[2,0.217,3,0.186,7,0.155,18,0.25,21,0.634,22,0.428,26,0.027,28,0.354,33,2.455,34,0.282,35,0.224,36,1.368,48,1.717,55,1.982,58,0.916,59,1.15,60,2.081,61,1.175,72,1.828,106,0.476,110,0.018,111,0.018,116,0.577,118,0.775,119,0.381,121,0.646,203,1.828,207,1.828,217,1.392,231,0.979,257,0.554,264,2.128,293,2.072,346,1.368,359,1.466,366,2.072,387,1.693,395,2.455,406,1.982,421,2.161,451,2.377,460,1.982,462,1.982,473,2.161,479,2.161,480,2.903,509,2.377,512,2.648,513,2.648,514,2.377,515,2.648,516,2.903,517,3.193,518,3.193,519,3.193,520,3.193,521,3.193,522,3.556,523,3.193,524,3.193,525,1.982,526,3.193,527,1.982,528,1.982,529,2.648,530,2.377,531,2.648,532,2.377,533,2.648,534,2.648,535,2.648,536,2.377,537,2.648,538,2.648,539,2.648,540,2.648,541,2.648,542,2.648,543,2.648,544,2.648,545,2.648,546,2.648,547,2.377,548,2.648,549,2.377,550,2.648,551,2.377,552,2.648,553,2.377,554,2.648,555,2.648,556,2.648,557,2.648,558,2.648,559,2.648,560,2.161,561,2.648,562,2.648,563,2.648,564,2.161,565,2.648,566,2.648,567,3.193,568,2.745,569,2.161,570,2.377,571,2.161,1208,4.78]],["title/injectables/SavedCitiesService.html",[239,0.808,255,1.597]],["body/injectables/SavedCitiesService.html",[2,0.202,3,0.172,7,0.144,18,0.232,19,0.886,21,0.571,22,0.566,25,1.113,26,0.026,27,1.427,28,0.517,29,0.555,34,0.172,35,0.128,58,1.771,59,0.794,61,0.644,88,0.435,106,0.557,110,0.017,111,0.017,113,1.359,116,0.548,119,0.414,120,1.037,121,0.824,173,1.838,217,0.741,219,2.237,239,1.249,255,2.16,257,0.514,258,0.599,287,3.265,289,1.57,293,1.185,311,2.204,331,2.455,347,3.378,397,1.57,402,1.459,407,3.248,444,2.455,447,3.862,448,4.39,449,2.455,568,3.089,569,2.004,570,2.204,585,4.16,592,3.616,600,4.16,602,1.57,603,2.455,606,4.16,674,1.838,733,2.791,734,2.791,735,2.791,736,2.791,737,2.791,760,2.004,769,2.791,880,2.455,925,2.791,945,2.791,1006,1.838,1063,4.729,1156,2.204,1209,5.427,1210,2.791,1211,5.593,1212,4.541,1213,3.3,1214,3.3,1215,3.3,1216,4.541,1217,3.3,1218,3.3,1219,3.3,1220,3.3,1221,3.3,1222,3.3,1223,5.192,1224,3.3,1225,3.3,1226,3.3,1227,3.3,1228,3.3,1229,3.3,1230,3.3,1231,3.3,1232,3.3,1233,3.3,1234,3.3,1235,3.3,1236,3.3,1237,3.3,1238,3.3,1239,3.3,1240,3.3,1241,3.3,1242,3.3,1243,3.3,1244,3.3,1245,3.3,1246,3.3,1247,3.3]],["title/classes/SavedCity.html",[35,0.13,219,1.128]],["body/classes/SavedCity.html",[2,0.224,3,0.191,7,0.16,18,0.257,19,0.951,21,0.403,22,0.571,25,0.82,26,0.027,34,0.191,35,0.189,48,1.316,58,1.255,61,0.715,88,0.855,110,0.018,111,0.018,116,0.589,118,1,119,0.528,181,2.449,219,1.637,226,1.316,231,1.805,257,0.571,258,0.665,264,2.036,314,2.449,335,4.056,336,3.874,337,3.874,346,1.409,348,2.226,359,1.51,387,1.744,405,2.727,504,2.319,573,4.344,669,2.449,1144,3.1,1248,3.1,1249,4.938,1250,4.938,1251,5.84,1252,3.627,1253,3.666,1254,3.666,1255,3.666,1256,3.666,1257,3.666,1258,3.666,1259,3.666,1260,3.257,1261,3.257,1262,3.1,1263,3.1,1264,3.1,1265,3.1,1266,3.1]],["title/classes/ServedCity.html",[35,0.13,286,2.039]],["body/classes/ServedCity.html",[2,0.25,3,0.214,7,0.178,18,0.288,21,0.45,22,0.576,26,0.026,34,0.273,35,0.236,61,0.799,88,0.864,110,0.021,111,0.019,116,0.633,118,0.981,119,0.522,217,0.92,231,1.825,257,0.637,258,0.743,264,2.192,285,2.486,286,3.182,309,2.486,335,4.028,336,4.028,337,4.028,359,1.686,504,2.493,891,3.045,1105,3.045,1252,3.898,1260,2.734,1261,2.734,1267,3.045,1268,5.24,1269,4.094,1270,4.094,1271,4.094,1272,4.094,1273,3.462,1274,3.462,1275,3.462,1276,3.462]],["title/classes/ServerResponse.html",[35,0.13,285,2.039]],["body/classes/ServerResponse.html",[2,0.282,3,0.241,7,0.201,18,0.324,22,0.413,26,0.026,34,0.295,35,0.247,61,1.241,88,0.745,110,0.023,111,0.021,116,0.682,118,0.913,119,0.45,217,1.371,231,1.68,264,2.086,285,3.43,286,2.803,309,2.803,335,3.707,336,3.707,337,3.707,359,1.901,504,2.687,891,3.434,1105,3.434,1252,3.434,1260,3.083,1261,3.083,1267,3.434,1273,3.903,1274,3.903,1275,3.903,1276,3.903,1277,4.616]],["title/components/SettingsComponent.html",[0,0.405,108,0.987]],["body/components/SettingsComponent.html",[0,0.627,1,0.628,2,0.202,3,0.111,4,0.879,5,0.879,6,0.879,7,0.093,9,1.359,10,1.784,11,0.879,12,2.329,13,1.904,14,1.269,16,1.269,18,0.15,19,0.788,20,2.008,21,0.363,22,0.587,25,1.02,26,0.026,27,1.904,28,0.557,29,0.359,30,2.522,34,0.111,35,0.083,41,1.744,56,1.426,59,0.971,66,3.379,82,0.628,83,1.359,84,1.185,85,1.269,86,1.87,87,0.879,88,0.599,89,0.879,90,0.671,91,0.879,92,0.628,93,0.879,94,0.628,95,0.879,96,0.628,97,0.879,98,0.671,99,0.879,100,0.671,101,0.82,102,0.879,103,0.671,104,0.879,105,0.587,106,0.329,107,0.879,108,1.336,109,0.879,110,0.012,111,0.012,116,0.399,118,0.579,119,0.431,120,1.543,121,0.891,135,1.588,148,1.189,165,1.189,166,1.588,180,1.944,192,0.879,204,1.92,208,1.296,209,1.588,210,1.805,220,2.522,221,1.016,222,2.79,249,2.667,255,2.575,257,0.514,258,0.732,264,1.037,287,1.189,288,1.296,290,1.746,293,0.767,294,2.415,298,1.426,397,2.575,402,0.944,403,2.332,404,1.57,407,1.096,602,1.016,674,3.457,741,1.588,811,2.161,820,1.296,835,3.841,846,3.015,870,1.426,872,1.805,876,1.805,877,1.805,906,1.805,918,1.805,954,2.005,963,3.288,980,3.616,987,3.28,993,2.696,1050,1.805,1057,3.841,1065,3.841,1071,3.841,1109,1.805,1114,1.805,1126,1.805,1150,2.792,1155,2.792,1156,2.205,1161,1.588,1164,4.028,1170,1.588,1172,2.456,1173,3.003,1174,3.003,1175,1.588,1179,1.296,1278,1.805,1279,3.302,1280,3.302,1281,4.542,1282,4.542,1283,4.542,1284,4.542,1285,4.542,1286,4.542,1287,4.542,1288,4.542,1289,4.037,1290,4.542,1291,4.542,1292,4.912,1293,4.542,1294,4.542,1295,4.542,1296,4.542,1297,2.135,1298,3.302,1299,2.135,1300,2.135,1301,3.302,1302,2.135,1303,2.135,1304,2.135,1305,2.135,1306,2.135,1307,2.135,1308,2.135,1309,2.135,1310,2.135,1311,2.135,1312,2.135,1313,2.135,1314,2.135,1315,2.135,1316,2.135,1317,2.135,1318,2.135,1319,3.302,1320,2.135,1321,2.135,1322,2.135,1323,3.302,1324,2.135,1325,2.135,1326,3.302,1327,3.302,1328,2.792,1329,2.135,1330,5.97,1331,2.135,1332,2.135,1333,2.135,1334,1.805,1335,2.135,1336,2.135,1337,2.135,1338,2.135,1339,2.135,1340,2.135,1341,2.135,1342,4.037,1343,4.037,1344,4.037,1345,2.135,1346,3.302,1347,3.302,1348,3.302,1349,2.135,1350,2.135,1351,2.135,1352,2.135]],["title/injectables/TemperatureService.html",[239,0.808,625,2.243]],["body/injectables/TemperatureService.html",[2,0.206,3,0.176,7,0.147,18,0.237,19,0.899,21,0.577,22,0.558,25,1.051,26,0.027,28,0.523,29,0.567,34,0.176,35,0.131,59,0.811,61,1.101,82,0.992,88,0.445,106,0.336,110,0.017,111,0.017,113,1.389,116,0.556,118,0.81,119,0.498,121,0.612,180,2.027,217,1.403,226,1.885,239,1.263,257,0.525,258,0.836,264,2.085,289,1.604,291,2.923,294,2.162,366,1.885,402,1.491,459,4.398,461,3.947,471,1.878,472,2.253,474,4.198,475,4.198,476,3.427,483,3.429,484,2.509,485,3.429,488,4.396,489,2.509,490,3.906,494,2.852,498,2.509,499,2.509,500,2.509,501,2.509,503,2.852,505,2.852,508,2.509,619,4.898,620,4.772,621,4.772,625,3.078,660,3.897,1206,2.852,1353,2.852,1354,4.609,1355,4.609,1356,4.609,1357,3.373,1358,3.373,1359,3.373,1360,3.373,1361,3.373,1362,3.373,1363,6.1,1364,3.373,1365,4.44,1366,4.609,1367,3.373,1368,3.373,1369,4.609,1370,3.373,1371,3.373,1372,3.373,1373,3.373,1374,3.373]],["title/classes/UserServer.html",[35,0.13,220,1.724]],["body/classes/UserServer.html",[2,0.246,3,0.21,7,0.175,18,0.283,19,1.012,21,0.631,22,0.591,25,0.965,26,0.026,27,1.266,28,0.401,34,0.299,35,0.235,58,1.037,61,0.786,88,0.532,106,0.401,110,0.019,111,0.019,116,0.626,118,0.979,119,0.511,215,2.244,216,2.692,217,1.513,219,1.742,220,2.664,221,2.981,222,2.881,223,4.506,224,4.506,225,3.372,226,2.175,227,2.998,228,2.998,229,2.998,230,2.998,231,1.109,232,2.998,233,3.859,234,2.998,235,2.998,236,2.998,237,2.447,257,0.627,258,0.731,568,1.917,1375,5.187,1376,5.187,1377,4.03,1378,4.03,1379,4.03,1380,4.03,1381,4.03,1382,4.03]],["title/classes/Weather.html",[35,0.13,60,1.128]],["body/classes/Weather.html",[2,0.293,3,0.25,7,0.209,18,0.337,21,0.682,22,0.59,26,0.025,34,0.25,35,0.224,60,1.942,72,3.309,110,0.021,111,0.021,116,0.698,118,0.988,119,0.514,231,1.773,264,1.951,516,3.914,525,3.588,1383,4.057,1384,5.783,1385,4.798,1386,4.798,1387,4.798]],["title/classes/WeatherNow.html",[35,0.13,370,2.243]],["body/classes/WeatherNow.html",[2,0.139,3,0.119,7,0.099,18,0.16,19,0.676,21,0.461,22,0.583,25,0.789,26,0.026,27,1.088,28,0.344,33,1.166,34,0.119,35,0.134,41,1.163,60,2.002,61,1.039,63,1.517,72,1.778,85,0.873,88,0.73,106,0.467,110,0.021,111,0.013,116,0.418,118,0.918,119,0.539,120,1.088,121,0.851,217,1.313,226,0.815,231,1.641,257,0.73,258,0.628,264,2.144,293,1.506,331,1.689,335,2.547,336,2.102,337,2.102,346,0.873,367,1.689,370,3.374,387,1.995,404,1.08,405,1.689,406,1.264,415,1.92,421,1.379,460,2.812,462,2.812,471,1.264,473,1.379,477,1.92,479,1.379,480,2.547,504,1.08,514,3.374,516,3.361,517,2.312,518,2.312,519,2.312,520,2.312,521,2.312,523,2.312,524,2.312,525,1.927,526,2.312,527,2.812,528,2.812,530,1.517,532,2.312,536,1.517,547,2.312,549,2.312,551,2.312,553,2.312,560,2.102,564,2.102,567,2.312,573,4.436,619,2.575,1000,3.547,1006,1.264,1156,1.517,1249,4.271,1250,4.271,1260,2.312,1261,2.312,1262,1.92,1263,1.92,1264,1.92,1265,1.92,1266,1.92,1365,3.547,1388,1.92,1389,5.051,1390,5.051,1391,5.051,1392,3.462,1393,5.051,1394,3.462,1395,2.271,1396,2.271,1397,2.271,1398,2.271,1399,2.271,1400,2.271,1401,2.271,1402,2.271,1403,2.271,1404,2.271,1405,2.271,1406,2.271,1407,2.271,1408,2.271,1409,3.462,1410,3.697,1411,4.692,1412,2.271,1413,3.462,1414,2.271,1415,3.462,1416,2.271,1417,4.195,1418,4.195,1419,2.271,1420,2.271,1421,2.271,1422,2.271,1423,3.462,1424,2.271,1425,3.462,1426,2.271,1427,2.271,1428,2.271,1429,2.271,1430,2.271,1431,2.271,1432,2.271,1433,2.271,1434,2.271,1435,2.271,1436,2.271,1437,2.271,1438,2.271,1439,2.271,1440,2.271,1441,2.271,1442,2.271,1443,2.271,1444,2.271,1445,2.271,1446,2.271,1447,2.271,1448,2.271,1449,2.271,1450,3.462,1451,2.271,1452,3.462,1453,2.271,1454,2.271,1455,2.271,1456,3.462,1457,2.271,1458,2.271,1459,2.271,1460,2.271,1461,2.271,1462,2.271,1463,4.195,1464,2.271,1465,2.271,1466,2.271,1467,2.271,1468,2.271,1469,2.271,1470,2.271,1471,2.271,1472,3.462,1473,2.271,1474,2.271,1475,2.271,1476,3.462,1477,2.271,1478,2.271,1479,2.271,1480,2.271,1481,2.271,1482,3.462,1483,3.462,1484,2.927,1485,3.462,1486,2.271,1487,2.271,1488,5.322,1489,2.271,1490,2.271,1491,2.271,1492,2.271,1493,2.271,1494,2.271,1495,2.271,1496,2.271,1497,2.271,1498,2.271,1499,2.271]],["title/injectables/WeatherService.html",[239,0.808,375,1.869]],["body/injectables/WeatherService.html",[2,0.236,3,0.202,7,0.168,18,0.271,19,0.985,21,0.425,22,0.553,25,1.087,26,0.026,28,0.559,29,0.65,34,0.202,35,0.15,48,1.387,58,1.299,59,0.929,63,3.37,64,3.266,65,3.266,88,0.837,110,0.019,111,0.019,113,1.59,116,0.609,118,0.967,119,0.493,120,1.213,121,0.7,146,2.15,207,1.983,231,1.546,239,1.352,253,3.266,254,3.981,257,0.928,258,1.081,259,3.064,284,2.873,289,1.837,290,2.16,307,2.345,314,3.37,366,1.387,375,2.809,387,1.837,392,3.266,402,1.707,592,3.597,602,1.837,669,2.579,821,3.266,1500,3.266,1501,5.96,1502,5.046,1503,5.046,1504,5.046,1505,5.046,1506,5.046,1507,3.862,1508,5.046,1509,3.862,1510,5.046,1511,3.862,1512,5.046,1513,5.046,1514,3.266,1515,5.621,1516,3.862,1517,5.621,1518,3.862,1519,3.862,1520,3.862,1521,3.862,1522,3.862]],["title/coverage.html",[1523,3.886]],["body/coverage.html",[0,0.797,1,1.058,7,0.157,8,3.042,26,0.026,35,0.26,60,1.208,61,0.702,90,1.13,92,1.058,94,1.058,96,1.058,98,1.13,100,1.13,103,1.13,105,0.99,106,0.358,108,1.058,110,0.018,111,0.018,112,3.042,119,0.287,157,3.582,159,2.403,165,2.681,215,2.003,216,3.625,219,1.208,220,1.847,237,2.185,239,1.552,240,2.185,241,3.042,242,3.042,255,1.711,285,2.185,286,2.185,360,3.042,366,1.292,370,2.403,375,2.003,376,2.185,395,1.847,406,2.003,456,2.403,457,3.042,458,3.042,504,3.358,509,3.625,581,3.042,582,3.042,610,3.042,625,2.403,626,2.403,676,3.042,799,2.403,804,3.042,811,1.711,834,3.042,958,3.042,959,3.042,1049,3.042,1157,3.582,1158,3.582,1179,2.185,1193,3.042,1194,3.042,1209,3.042,1210,3.042,1248,3.042,1267,3.582,1278,3.042,1353,3.042,1383,3.042,1388,3.042,1410,3.871,1500,3.042,1514,3.042,1523,3.042,1524,3.042,1525,3.598,1526,5.427,1527,5.796,1528,4.815,1529,3.598,1530,4.815,1531,5.796,1532,5.427,1533,4.815,1534,3.598,1535,3.598,1536,3.598,1537,3.598,1538,3.598,1539,4.815,1540,3.598,1541,4.815,1542,3.042,1543,5.796,1544,3.042,1545,4.072,1546,3.042,1547,3.598]],["title/dependencies.html",[125,2.7,1548,2.798]],["body/dependencies.html",[26,0.026,29,0.797,110,0.021,111,0.021,125,3.165,140,4.27,141,4.27,148,2.638,155,4.007,156,4.007,163,2.254,189,3.165,192,1.951,472,3.165,602,2.254,1549,4.739,1550,6.869,1551,4.739,1552,5.74,1553,4.739,1554,4.739,1555,4.739,1556,4.739,1557,4.739,1558,4.739,1559,4.739,1560,4.739,1561,4.739,1562,4.739,1563,4.739,1564,4.739,1565,4.739,1566,4.739,1567,4.739,1568,4.739,1569,4.739,1570,4.739,1571,4.739,1572,4.739,1573,4.739]],["title/index.html",[18,0.196,402,1.237,1574,2.798]],["body/index.html",[0,0.723,3,0.231,7,0.193,13,1.39,26,0.02,32,5.45,47,3.739,48,2.15,49,3.334,51,3.341,60,1.485,73,4.652,88,0.583,106,0.44,110,0.02,111,0.02,136,2.954,208,2.685,346,1.699,359,2.265,397,2.103,445,2.954,789,3.739,954,2.685,999,5.064,1132,5.742,1149,2.954,1328,5.45,1334,4.652,1524,4.652,1575,4.422,1576,5.989,1577,4.422,1578,4.422,1579,6.663,1580,4.422,1581,4.422,1582,4.422,1583,4.422,1584,4.422,1585,4.422,1586,4.422,1587,4.422,1588,4.422,1589,4.422,1590,4.422,1591,4.422,1592,3.739,1593,5.502,1594,6.445,1595,5.502,1596,4.422,1597,6.266,1598,4.422,1599,4.422,1600,4.422,1601,4.422,1602,4.422,1603,4.422,1604,4.422,1605,4.422]],["title/modules.html",[123,2.031]],["body/modules.html",[26,0.023,110,0.023,111,0.023,123,2.36,124,3.567,132,3.243,133,3.243,141,3.972,203,3.163,760,3.741,1606,5.34,1607,5.34,1608,6.493]],["title/overview.html",[1609,3.886]],["body/overview.html",[0,0.532,1,1.758,26,0.026,34,0.23,35,0.171,55,2.453,82,1.295,90,2.092,92,1.758,94,1.758,96,1.758,98,1.878,100,1.878,103,1.878,105,1.645,108,1.758,110,0.02,111,0.02,123,2.426,124,4.746,125,2.942,126,3.277,127,3.725,128,3.725,129,3.725,130,3.725,131,3.725,132,3.63,133,3.63,134,4.641,135,3.277,136,2.942,191,2.262,239,1.06,1484,3.725,1609,3.725,1610,4.406,1611,5.489,1612,4.406]],["title/routes.html",[191,2.36]],["body/routes.html",[26,0.023,110,0.023,111,0.023,191,2.827]],["title/miscellaneous/variables.html",[1410,2.7,1613,2.366]],["body/miscellaneous/variables.html",[18,0.345,26,0.026,110,0.022,111,0.022,119,0.5,120,1.97,121,1.137,157,5.011,180,2.106,294,2.022,387,3.089,799,4.188,1410,3.279,1542,4.152,1544,4.152,1545,4.152,1546,5.302,1592,4.958,1613,4.152,1614,5.864,1615,4.91,1616,4.91,1617,4.91,1618,4.91]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":504,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{},"coverage.html":{}}}],["0.0.4",{"_index":1570,"title":{},"body":{"dependencies.html":{}}}],["0.36.1",{"_index":1562,"title":{},"body":{"dependencies.html":{}}}],["0.6.8",{"_index":1557,"title":{},"body":{"dependencies.html":{}}}],["0.8.26",{"_index":1573,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1543,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1530,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1528,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1535,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":1534,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1527,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":1532,"title":{},"body":{"coverage.html":{}}}],["0/23",{"_index":1540,"title":{},"body":{"coverage.html":{}}}],["0/26",{"_index":1536,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1526,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1529,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1541,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1531,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1533,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1539,"title":{},"body":{"coverage.html":{}}}],["0000ff",{"_index":1206,"title":{},"body":{"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["1",{"_index":1319,"title":{},"body":{"components/SettingsComponent.html":{}}}],["1.1.3",{"_index":1560,"title":{},"body":{"dependencies.html":{}}}],["1/2",{"_index":1538,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1610,"title":{},"body":{"overview.html":{}}}],["100",{"_index":507,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["12",{"_index":1612,"title":{},"body":{"overview.html":{}}}],["1500",{"_index":913,"title":{},"body":{"injectables/LogService.html":{}}}],["2.0.8",{"_index":1568,"title":{},"body":{"dependencies.html":{}}}],["2.5.4",{"_index":1566,"title":{},"body":{"dependencies.html":{}}}],["2.7.2",{"_index":1563,"title":{},"body":{"dependencies.html":{}}}],["2500",{"_index":942,"title":{},"body":{"injectables/LogService.html":{}}}],["273.15",{"_index":1365,"title":{},"body":{"injectables/TemperatureService.html":{},"classes/WeatherNow.html":{}}}],["3",{"_index":1484,"title":{},"body":{"classes/WeatherNow.html":{},"overview.html":{}}}],["3000",{"_index":441,"title":{},"body":{"components/CityComponent.html":{},"components/NavigationComponent.html":{}}}],["3cba9f",{"_index":1373,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["4.2",{"_index":800,"title":{},"body":{"components/InitialComponent.html":{}}}],["401",{"_index":916,"title":{},"body":{"injectables/LogService.html":{}}}],["5",{"_index":785,"title":{},"body":{"components/InitialComponent.html":{}}}],["50",{"_index":1537,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":944,"title":{},"body":{"injectables/LogService.html":{}}}],["6.0.0",{"_index":1571,"title":{},"body":{"dependencies.html":{}}}],["6.0.3",{"_index":1558,"title":{},"body":{"dependencies.html":{}}}],["6.0.4",{"_index":1550,"title":{},"body":{"dependencies.html":{}}}],["6.0.5",{"_index":1578,"title":{},"body":{"index.html":{}}}],["6.2.1",{"_index":1552,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":68,"title":{},"body":{"components/AboutComponent.html":{}}}],["8",{"_index":1611,"title":{},"body":{"overview.html":{}}}],["aaaaaa",{"_index":493,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{}}}],["about'},{'nam",{"_index":89,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["about.component.css",{"_index":15,"title":{},"body":{"components/AboutComponent.html":{}}}],["about.component.html",{"_index":17,"title":{},"body":{"components/AboutComponent.html":{}}}],["about/about.compon",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["aboutcompon",{"_index":1,"title":{"components/AboutComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["abstractcontrol",{"_index":1170,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["ac",{"_index":1192,"title":{},"body":{"classes/PasswordValidation.html":{}}}],["ac.get('password",{"_index":1184,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["ac.get('password2",{"_index":1186,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["ac.get('password2').seterror",{"_index":1189,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["access",{"_index":789,"title":{},"body":{"components/InitialComponent.html":{},"index.html":{}}}],["accomplish",{"_index":730,"title":{},"body":{"components/InitialComponent.html":{}}}],["account",{"_index":1330,"title":{},"body":{"components/SettingsComponent.html":{}}}],["action",{"_index":793,"title":{},"body":{"components/InitialComponent.html":{}}}],["activ",{"_index":1131,"title":{},"body":{"components/NavigationComponent.html":{}}}],["activatedrout",{"_index":374,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["actual_compon",{"_index":109,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["ad",{"_index":831,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["addit",{"_index":1411,"title":{},"body":{"classes/WeatherNow.html":{}}}],["admin",{"_index":679,"title":{},"body":{"components/InitialComponent.html":{}}}],["administr",{"_index":795,"title":{},"body":{"components/InitialComponent.html":{}}}],["adquir",{"_index":442,"title":{},"body":{"components/CityComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["afterward",{"_index":931,"title":{},"body":{"injectables/LogService.html":{}}}],["alreadi",{"_index":945,"title":{},"body":{"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["alway",{"_index":953,"title":{},"body":{"injectables/LogService.html":{}}}],["an",{"_index":313,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["angular",{"_index":49,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{},"index.html":{}}}],["angular/anim",{"_index":1549,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1551,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":189,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"modules/MaterialModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"injectables/WeatherService.html":{}}}],["angular/compil",{"_index":1553,"title":{},"body":{"dependencies.html":{}}}],["angular/cor",{"_index":29,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{},"dependencies.html":{}}}],["angular/form",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"dependencies.html":{}}}],["angular/http",{"_index":1554,"title":{},"body":{"dependencies.html":{}}}],["angular/materi",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"dependencies.html":{}}}],["angular/material/dialog",{"_index":1097,"title":{},"body":{"components/NavigationComponent.html":{}}}],["angular/platform",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"dependencies.html":{}}}],["angular/pwa",{"_index":1556,"title":{},"body":{"dependencies.html":{}}}],["angular/rout",{"_index":192,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"dependencies.html":{}}}],["angular/servic",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular\\documentation\\index.html",{"_index":1605,"title":{},"body":{"index.html":{}}}],["ans.push",{"_index":320,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["answer",{"_index":791,"title":{},"body":{"components/InitialComponent.html":{}}}],["api",{"_index":63,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["app",{"_index":13,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"index.html":{}}}],["app.compon",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.css",{"_index":114,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":115,"title":{},"body":{"components/AppComponent.html":{}}}],["app.modul",{"_index":1048,"title":{},"body":{"modules/MaterialModule.html":{}}}],["appcompon",{"_index":90,"title":{"components/AppComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["applic",{"_index":46,"title":{},"body":{"components/AboutComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/ForecastValuesService.html":{},"components/InitialComponent.html":{}}}],["application/json",{"_index":282,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["appmodul",{"_index":124,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodul",{"_index":132,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["argument",{"_index":697,"title":{},"body":{"components/InitialComponent.html":{}}}],["array",{"_index":217,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{}}}],["array.from(rx).foreach(el",{"_index":731,"title":{},"body":{"components/InitialComponent.html":{}}}],["array.from(rx.list).foreach(el",{"_index":426,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["artifact",{"_index":1587,"title":{},"body":{"index.html":{}}}],["ask",{"_index":403,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["asset",{"_index":723,"title":{},"body":{"components/InitialComponent.html":{}}}],["assets/city.list.json",{"_index":710,"title":{},"body":{"components/InitialComponent.html":{}}}],["auth",{"_index":813,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["author",{"_index":243,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["automat",{"_index":1583,"title":{},"body":{"index.html":{}}}],["aux",{"_index":1389,"title":{},"body":{"classes/WeatherNow.html":{}}}],["avail",{"_index":760,"title":{},"body":{"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"modules.html":{}}}],["avoid",{"_index":1105,"title":{},"body":{"components/NavigationComponent.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["back",{"_index":925,"title":{},"body":{"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["background",{"_index":43,"title":{},"body":{"components/AboutComponent.html":{},"components/NavigationComponent.html":{}}}],["backgroundcolor",{"_index":492,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{}}}],["bada55",{"_index":491,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["bandwidth",{"_index":745,"title":{},"body":{"components/InitialComponent.html":{}}}],["bar",{"_index":487,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"components/LogginDialogComponent.html":{},"injectables/RainAndSnowService.html":{}}}],["base",{"_index":1390,"title":{},"body":{"classes/WeatherNow.html":{}}}],["base64",{"_index":893,"title":{},"body":{"injectables/LogService.html":{}}}],["basic",{"_index":894,"title":{},"body":{"injectables/LogService.html":{}}}],["basic_express",{"_index":339,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["be",{"_index":1499,"title":{},"body":{"classes/WeatherNow.html":{}}}],["bearer",{"_index":276,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["befor",{"_index":432,"title":{},"body":{"components/CityComponent.html":{}}}],["block",{"_index":751,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["bodi",{"_index":37,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["body).subscrib",{"_index":886,"title":{},"body":{"injectables/LogService.html":{}}}],["body[0].classlist.add(\"initi",{"_index":39,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{}}}],["body[0].classlist.remove(\"initi",{"_index":1100,"title":{},"body":{"components/NavigationComponent.html":{}}}],["boolean",{"_index":269,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/NavigationComponent.html":{}}}],["bootstrap",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["bordercolor",{"_index":490,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["brows",{"_index":1608,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browser/anim",{"_index":194,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["browseranimationsmodul",{"_index":193,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["browsermodul",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["btoa(`${username}:${password",{"_index":895,"title":{},"body":{"injectables/LogService.html":{}}}],["bug",{"_index":1337,"title":{},"body":{"components/SettingsComponent.html":{}}}],["build",{"_index":1328,"title":{},"body":{"components/SettingsComponent.html":{},"index.html":{}}}],["builddeleteform",{"_index":1287,"title":{},"body":{"components/SettingsComponent.html":{}}}],["buildpsswdform",{"_index":1288,"title":{},"body":{"components/SettingsComponent.html":{}}}],["button",{"_index":450,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["c",{"_index":1363,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["call",{"_index":768,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["cancel",{"_index":1022,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["case",{"_index":926,"title":{},"body":{"injectables/LogService.html":{}}}],["cccccc",{"_index":497,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["certain",{"_index":566,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["chang",{"_index":397,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"index.html":{}}}],["changepassword",{"_index":1289,"title":{},"body":{"components/SettingsComponent.html":{}}}],["changepassword(passwd",{"_index":1301,"title":{},"body":{"components/SettingsComponent.html":{}}}],["chart",{"_index":459,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["chart('cloudsandwind",{"_index":486,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["chart('rainandsnow",{"_index":1205,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["chart('temperatur",{"_index":1372,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["chart.j",{"_index":472,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{},"dependencies.html":{}}}],["check",{"_index":1149,"title":{},"body":{"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"index.html":{}}}],["check_circl",{"_index":1151,"title":{},"body":{"components/NavigationComponent.html":{}}}],["checkandsav",{"_index":1392,"title":{},"body":{"classes/WeatherNow.html":{}}}],["checkandsave(text",{"_index":1409,"title":{},"body":{"classes/WeatherNow.html":{}}}],["checkerror",{"_index":968,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["citi",{"_index":58,"title":{},"body":{"components/AboutComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/UserServer.html":{},"injectables/WeatherService.html":{}}}],["cities.foreach(c",{"_index":349,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["cities.json",{"_index":762,"title":{},"body":{"components/InitialComponent.html":{}}}],["cities.length",{"_index":1121,"title":{},"body":{"components/NavigationComponent.html":{}}}],["cities.servic",{"_index":288,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["cities.service.t",{"_index":1210,"title":{},"body":{"injectables/SavedCitiesService.html":{},"coverage.html":{}}}],["cities.service.ts:12",{"_index":1219,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:13",{"_index":1220,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:14",{"_index":1212,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:19",{"_index":1215,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:24",{"_index":1214,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:41",{"_index":1217,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:55",{"_index":1213,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["citiesid",{"_index":224,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["citieslist",{"_index":225,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/UserServer.html":{}}}],["citieslist.foreach(c",{"_index":301,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["citieslist.split",{"_index":909,"title":{},"body":{"injectables/LogService.html":{}}}],["citieslisturl",{"_index":680,"title":{},"body":{"components/InitialComponent.html":{}}}],["citiesrespons",{"_index":215,"title":{"classes/CitiesResponse.html":{}},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/LogService.html":{},"classes/UserServer.html":{},"coverage.html":{}}}],["citiesresponseunit",{"_index":237,"title":{"classes/CitiesResponseUnit.html":{}},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{},"coverage.html":{}}}],["citiesserv",{"_index":695,"title":{},"body":{"components/InitialComponent.html":{}}}],["citiesserverservic",{"_index":240,"title":{"injectables/CitiesServerService.html":{}},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"coverage.html":{}}}],["citiessubscript",{"_index":1053,"title":{},"body":{"components/NavigationComponent.html":{}}}],["city'",{"_index":1498,"title":{},"body":{"classes/WeatherNow.html":{}}}],["city'},{'nam",{"_index":93,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["city.component.css",{"_index":361,"title":{},"body":{"components/CityComponent.html":{}}}],["city.component.html",{"_index":362,"title":{},"body":{"components/CityComponent.html":{}}}],["city.id",{"_index":1235,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["city.insertbodi",{"_index":303,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["city.nam",{"_index":312,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["city/:id/:nam",{"_index":202,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["city/city.compon",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["city/cod",{"_index":1145,"title":{},"body":{"components/NavigationComponent.html":{}}}],["city/data",{"_index":471,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{},"classes/WeatherNow.html":{}}}],["citycompon",{"_index":92,"title":{"components/CityComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["citymatch",{"_index":681,"title":{},"body":{"components/InitialComponent.html":{}}}],["citymatch.nam",{"_index":797,"title":{},"body":{"components/InitialComponent.html":{}}}],["citymatch.sys.countri",{"_index":798,"title":{},"body":{"components/InitialComponent.html":{}}}],["cityshown",{"_index":363,"title":{},"body":{"components/CityComponent.html":{}}}],["cityshown.nam",{"_index":452,"title":{},"body":{"components/CityComponent.html":{}}}],["citytosav",{"_index":1218,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["citytosave.id",{"_index":1236,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["class",{"_index":35,"title":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/PasswordValidation.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"overview.html":{}}}],["clean",{"_index":653,"title":{},"body":{"components/GraphsComponent.html":{}}}],["cli",{"_index":1576,"title":{},"body":{"index.html":{}}}],["click",{"_index":1017,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["client",{"_index":52,"title":{},"body":{"components/AboutComponent.html":{}}}],["close",{"_index":870,"title":{},"body":{"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["closesess",{"_index":836,"title":{},"body":{"injectables/LogService.html":{}}}],["cloud",{"_index":460,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["cloudcolor",{"_index":613,"title":{},"body":{"components/GraphsComponent.html":{}}}],["cloudsandwind",{"_index":622,"title":{},"body":{"components/GraphsComponent.html":{}}}],["cloudsandwind/cloud",{"_index":648,"title":{},"body":{"components/GraphsComponent.html":{}}}],["cloudsandwindchart",{"_index":614,"title":{},"body":{"components/GraphsComponent.html":{}}}],["cloudsandwindservic",{"_index":456,"title":{"injectables/CloudsAndWindService.html":{}},"body":{"injectables/CloudsAndWindService.html":{},"components/GraphsComponent.html":{},"coverage.html":{}}}],["cluster_appmodul",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declar",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_import",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cod",{"_index":1391,"title":{},"body":{"classes/WeatherNow.html":{}}}],["code",{"_index":445,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"index.html":{}}}],["color",{"_index":661,"title":{},"body":{"components/GraphsComponent.html":{}}}],["column",{"_index":343,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["comment",{"_index":1232,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["commonmodul",{"_index":188,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["commonurl",{"_index":244,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["compat",{"_index":739,"title":{},"body":{"components/InitialComponent.html":{}}}],["compil",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["complet",{"_index":431,"title":{},"body":{"components/CityComponent.html":{}}}],["complexsearch",{"_index":246,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["complexsearch(valu",{"_index":260,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["complexsearchid",{"_index":247,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["complexsearchid(valu",{"_index":263,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["complic",{"_index":930,"title":{},"body":{"injectables/LogService.html":{}}}],["compodoc/compodoc",{"_index":1559,"title":{},"body":{"dependencies.html":{}}}],["compon",{"_index":0,"title":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["component'",{"_index":1242,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["component_templ",{"_index":87,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["comprobamo",{"_index":329,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["confirm",{"_index":1126,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["console.log",{"_index":772,"title":{},"body":{"components/InitialComponent.html":{}}}],["console.log(\"access",{"_index":919,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(\"complet",{"_index":774,"title":{},"body":{"components/InitialComponent.html":{}}}],["console.log(\"failur",{"_index":914,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(\"form",{"_index":1178,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["console.log(\"log",{"_index":327,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log(\"queri",{"_index":317,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log(\"rain",{"_index":559,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["console.log(\"snow",{"_index":563,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["console.log(\"someth",{"_index":946,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(\"there'",{"_index":888,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(\"tri",{"_index":310,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log(\"upload",{"_index":306,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log('thi",{"_index":1241,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["console.log(`there'",{"_index":921,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(bodi",{"_index":892,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(err",{"_index":924,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(r",{"_index":940,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(rx",{"_index":308,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log(this.currentuser.display",{"_index":911,"title":{},"body":{"injectables/LogService.html":{}}}],["const",{"_index":36,"title":{},"body":{"components/AboutComponent.html":{},"modules/AppRoutingModule.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{}}}],["constructor",{"_index":21,"title":{},"body":{"components/AboutComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["constructor(auth",{"_index":810,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["constructor(dialogref",{"_index":971,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["constructor(el",{"_index":529,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["constructor(forecastvaluesservic",{"_index":624,"title":{},"body":{"components/GraphsComponent.html":{}}}],["constructor(formbuild",{"_index":1163,"title":{},"body":{"components/NewUserComponent.html":{}}}],["constructor(http",{"_index":253,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/WeatherService.html":{}}}],["constructor(log",{"_index":1297,"title":{},"body":{"components/SettingsComponent.html":{}}}],["constructor(nam",{"_index":1252,"title":{},"body":{"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["constructor(priv",{"_index":821,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/WeatherService.html":{}}}],["constructor(rout",{"_index":373,"title":{},"body":{"components/CityComponent.html":{},"components/NavigationComponent.html":{}}}],["constructor(savedcitiesservic",{"_index":845,"title":{},"body":{"injectables/LogService.html":{}}}],["constructor(weatherservic",{"_index":694,"title":{},"body":{"components/InitialComponent.html":{}}}],["consum",{"_index":742,"title":{},"body":{"components/InitialComponent.html":{}}}],["contain",{"_index":571,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"classes/RespuestaForecast.html":{}}}],["content",{"_index":298,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["contenttyp",{"_index":245,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["context",{"_index":1546,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["coord",{"_index":1249,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["core",{"_index":1564,"title":{},"body":{"dependencies.html":{}}}],["correctli",{"_index":770,"title":{},"body":{"components/InitialComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["correspond",{"_index":675,"title":{},"body":{"components/GraphsComponent.html":{},"injectables/LogService.html":{}}}],["countri",{"_index":335,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{}}}],["coverag",{"_index":1523,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["crash",{"_index":769,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["creat",{"_index":51,"title":{},"body":{"components/AboutComponent.html":{},"injectables/LogService.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"index.html":{}}}],["createus",{"_index":837,"title":{},"body":{"injectables/LogService.html":{}}}],["createuser(usernam",{"_index":849,"title":{},"body":{"injectables/LogService.html":{}}}],["creation",{"_index":1018,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["current",{"_index":404,"title":{},"body":{"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{}}}],["currentus",{"_index":835,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["currentuser.usernam",{"_index":1346,"title":{},"body":{"components/SettingsComponent.html":{}}}],["data",{"_index":61,"title":{"classes/Data.html":{}},"body":{"components/AboutComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"coverage.html":{}}}],["data.password",{"_index":1141,"title":{},"body":{"components/NavigationComponent.html":{}}}],["data.usernam",{"_index":1140,"title":{},"body":{"components/NavigationComponent.html":{}}}],["databas",{"_index":292,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{}}}],["dataset",{"_index":489,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["datasourc",{"_index":364,"title":{},"body":{"components/CityComponent.html":{}}}],["date",{"_index":461,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["db",{"_index":891,"title":{},"body":{"injectables/LogService.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["de",{"_index":1129,"title":{},"body":{"components/NavigationComponent.html":{}}}],["declar",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"overview.html":{}}}],["default",{"_index":120,"title":{},"body":{"components/AppComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"miscellaneous/variables.html":{}}}],["defin",{"_index":22,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["deg",{"_index":526,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["delaccnt",{"_index":1290,"title":{},"body":{"components/SettingsComponent.html":{}}}],["delet",{"_index":674,"title":{},"body":{"components/GraphsComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{}}}],["deleteaccount",{"_index":1281,"title":{},"body":{"components/SettingsComponent.html":{}}}],["deleteaccount1",{"_index":1282,"title":{},"body":{"components/SettingsComponent.html":{}}}],["deletebodi",{"_index":838,"title":{},"body":{"injectables/LogService.html":{}}}],["deletebody(usernam",{"_index":851,"title":{},"body":{"injectables/LogService.html":{}}}],["deletec",{"_index":1063,"title":{},"body":{"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["deleteus",{"_index":839,"title":{},"body":{"injectables/LogService.html":{}}}],["deleteuser(usernam",{"_index":853,"title":{},"body":{"injectables/LogService.html":{}}}],["demo",{"_index":928,"title":{},"body":{"injectables/LogService.html":{}}}],["demous",{"_index":929,"title":{},"body":{"injectables/LogService.html":{}}}],["deni",{"_index":920,"title":{},"body":{"injectables/LogService.html":{}}}],["depend",{"_index":125,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["descript",{"_index":525,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"components/LogginDialogComponent.html":{},"classes/RespuestaForecast.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{}}}],["dev",{"_index":1581,"title":{},"body":{"index.html":{}}}],["develop",{"_index":47,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["dialog",{"_index":960,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["dialog'},{'nam",{"_index":102,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["dialog.compon",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"components/NavigationComponent.html":{}}}],["dialog.component.css",{"_index":961,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.html",{"_index":962,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.t",{"_index":959,"title":{},"body":{"components/LogginDialogComponent.html":{},"coverage.html":{}}}],["dialog.component.ts:13",{"_index":981,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:14",{"_index":979,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:15",{"_index":986,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:16",{"_index":984,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:17",{"_index":983,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:18",{"_index":982,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:19",{"_index":985,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:20",{"_index":973,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:27",{"_index":977,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:35",{"_index":978,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:42",{"_index":975,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:64",{"_index":976,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog/loggin",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"coverage.html":{}}}],["dialogref",{"_index":974,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["differ",{"_index":209,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/InitialComponent.html":{},"components/SettingsComponent.html":{}}}],["direct",{"_index":85,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{}}}],["directive|pipe|service|class|guard|interface|enum|modul",{"_index":1586,"title":{},"body":{"index.html":{}}}],["directori",{"_index":1589,"title":{},"body":{"index.html":{}}}],["display",{"_index":226,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/SavedCity.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{}}}],["displayedcolumn",{"_index":365,"title":{},"body":{"components/CityComponent.html":{}}}],["displayvalu",{"_index":1393,"title":{},"body":{"classes/WeatherNow.html":{}}}],["dissapear",{"_index":670,"title":{},"body":{"components/GraphsComponent.html":{}}}],["dist",{"_index":1588,"title":{},"body":{"index.html":{}}}],["doc",{"_index":1604,"title":{},"body":{"index.html":{}}}],["document",{"_index":1524,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["document.getelementsbytagname(\"bodi",{"_index":38,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["don`t",{"_index":875,"title":{},"body":{"injectables/LogService.html":{}}}],["download",{"_index":727,"title":{},"body":{"components/InitialComponent.html":{}}}],["dt",{"_index":514,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["dt_txt",{"_index":515,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["durat",{"_index":440,"title":{},"body":{"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["dure",{"_index":78,"title":{},"body":{"components/AboutComponent.html":{}}}],["dynam",{"_index":1555,"title":{},"body":{"dependencies.html":{}}}],["e2",{"_index":1598,"title":{},"body":{"index.html":{}}}],["each",{"_index":213,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["econom",{"_index":74,"title":{},"body":{"components/AboutComponent.html":{}}}],["ee",{"_index":54,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{}}}],["el",{"_index":331,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/SavedCitiesService.html":{},"classes/WeatherNow.html":{}}}],["element",{"_index":84,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["element.cloud",{"_index":531,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.coord.lat",{"_index":737,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["element.coord.lon",{"_index":736,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["element.countri",{"_index":735,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["element.dt",{"_index":533,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.dt_txt",{"_index":535,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.id",{"_index":734,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["element.main.grnd_level",{"_index":537,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.humid",{"_index":538,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.pressur",{"_index":539,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.sea_level",{"_index":540,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.temp",{"_index":541,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.temp_kf",{"_index":542,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.temp_max",{"_index":543,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.temp_min",{"_index":544,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.name.includes(this.c",{"_index":766,"title":{},"body":{"components/InitialComponent.html":{}}}],["element.paramet",{"_index":454,"title":{},"body":{"components/CityComponent.html":{}}}],["element.rain",{"_index":558,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.rain[\"3h",{"_index":561,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.snow",{"_index":562,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.snow[\"3h",{"_index":565,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.valu",{"_index":455,"title":{},"body":{"components/CityComponent.html":{}}}],["element.weather.foreach((weath",{"_index":545,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.wind.deg",{"_index":557,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.wind.spe",{"_index":556,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["email",{"_index":938,"title":{},"body":{"injectables/LogService.html":{}}}],["emit",{"_index":1221,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["emmit",{"_index":1243,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["empti",{"_index":1244,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["emptylist",{"_index":1055,"title":{},"body":{"components/NavigationComponent.html":{}}}],["en",{"_index":1240,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["enabl",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"components/InitialComponent.html":{}}}],["end",{"_index":1597,"title":{},"body":{"index.html":{}}}],["engros",{"_index":1047,"title":{},"body":{"modules/MaterialModule.html":{}}}],["entrycompon",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["environ",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment.product",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["environments/environ",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["eras",{"_index":662,"title":{},"body":{"components/GraphsComponent.html":{}}}],["err",{"_index":887,"title":{},"body":{"injectables/LogService.html":{}}}],["error",{"_index":309,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["es",{"_index":333,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["even",{"_index":1338,"title":{},"body":{"components/SettingsComponent.html":{}}}],["event",{"_index":698,"title":{},"body":{"components/InitialComponent.html":{}}}],["event.key",{"_index":783,"title":{},"body":{"components/InitialComponent.html":{}}}],["everyth",{"_index":1231,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["execut",{"_index":1334,"title":{},"body":{"components/SettingsComponent.html":{},"index.html":{}}}],["exist",{"_index":311,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["expect",{"_index":1362,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["export",{"_index":34,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"overview.html":{}}}],["extract",{"_index":475,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjjcmvhdglvbi10aw1lijoxnti4nzk5mty4mzgxlcj1c2vybmftzsi6imrlbw8ifq.vwezijoag2icsn0uprts8jqre1ngzhcrg6fvkdh2",{"_index":933,"title":{},"body":{"injectables/LogService.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjjcmvhdglvbi10aw1lijoxnti4otu2oty0mte2lcj1c2vybmftzsi6imrlbw8ifq.xkahjdq9yey2aus8dp3qtobmefl0waclsk4lrmkz9n",{"_index":277,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["fail",{"_index":326,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["fals",{"_index":294,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"injectables/RainAndSnowService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"miscellaneous/variables.html":{}}}],["favorit",{"_index":453,"title":{},"body":{"components/CityComponent.html":{}}}],["favourit",{"_index":348,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"classes/SavedCity.html":{}}}],["favouritec",{"_index":223,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["ff0000",{"_index":1374,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["ffffff",{"_index":1207,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["field",{"_index":749,"title":{},"body":{"components/InitialComponent.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"index.html":{}}}],["fill",{"_index":291,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["filter",{"_index":338,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["flag",{"_index":1591,"title":{},"body":{"index.html":{}}}],["folder",{"_index":724,"title":{},"body":{"components/InitialComponent.html":{}}}],["forecast",{"_index":366,"title":{"classes/Forecast.html":{}},"body":{"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{},"coverage.html":{}}}],["forecast(el",{"_index":428,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["forecast.map(item",{"_index":474,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["forecastvalu",{"_index":583,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{}}}],["forecastvaluesservic",{"_index":376,"title":{"injectables/ForecastValuesService.html":{}},"body":{"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"coverage.html":{}}}],["forecastvaluesservice.getupdates().subscribe(valu",{"_index":652,"title":{},"body":{"components/GraphsComponent.html":{}}}],["forecastvaluesservice.getvalu",{"_index":650,"title":{},"body":{"components/GraphsComponent.html":{}}}],["form",{"_index":963,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["format",{"_index":508,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["formbuild",{"_index":1164,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["formcontrol",{"_index":988,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["formcontrol(this.password",{"_index":994,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["formcontrol(this.usernam",{"_index":990,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["formdelet",{"_index":1283,"title":{},"body":{"components/SettingsComponent.html":{}}}],["formgroup",{"_index":980,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["formpassword",{"_index":1284,"title":{},"body":{"components/SettingsComponent.html":{}}}],["formsmodul",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":682,"title":{},"body":{"components/InitialComponent.html":{}}}],["found.nam",{"_index":802,"title":{},"body":{"components/InitialComponent.html":{}}}],["found.sys.countri",{"_index":803,"title":{},"body":{"components/InitialComponent.html":{}}}],["foundciti",{"_index":683,"title":{},"body":{"components/InitialComponent.html":{}}}],["framework",{"_index":50,"title":{},"body":{"components/AboutComponent.html":{}}}],["free",{"_index":65,"title":{},"body":{"components/AboutComponent.html":{},"injectables/WeatherService.html":{}}}],["full",{"_index":201,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["function",{"_index":746,"title":{},"body":{"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{}}}],["further",{"_index":1600,"title":{},"body":{"index.html":{}}}],["gener",{"_index":32,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["get",{"_index":402,"title":{"index.html":{}},"body":{"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{}}}],["getciti",{"_index":584,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["getcitieslist",{"_index":688,"title":{},"body":{"components/InitialComponent.html":{}}}],["getcityweath",{"_index":371,"title":{},"body":{"components/CityComponent.html":{}}}],["getcloudsandwindchart",{"_index":463,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["getcloudsandwindchart(forecast",{"_index":465,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["getforecast",{"_index":1502,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getforecast(id",{"_index":1506,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getlog",{"_index":1064,"title":{},"body":{"components/NavigationComponent.html":{}}}],["getrainandsnowchart",{"_index":1195,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["getrainandsnowchart(forecast",{"_index":1197,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["getsavedc",{"_index":1211,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["gettemperaturechart",{"_index":1354,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["gettemperaturechart(forecast",{"_index":1356,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["gettoken",{"_index":840,"title":{},"body":{"injectables/LogService.html":{}}}],["getupd",{"_index":585,"title":{},"body":{"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["getvalu",{"_index":586,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["getweath",{"_index":1503,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getweather(id",{"_index":1508,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getweatherbycitynam",{"_index":1504,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getweatherbycityname(nam",{"_index":1510,"title":{},"body":{"injectables/WeatherService.html":{}}}],["give",{"_index":1276,"title":{},"body":{"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["go",{"_index":954,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"index.html":{}}}],["graph",{"_index":203,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"classes/RespuestaForecast.html":{},"modules.html":{}}}],["graphs'},{'nam",{"_index":95,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["graphs.component.css",{"_index":611,"title":{},"body":{"components/GraphsComponent.html":{}}}],["graphs.component.html",{"_index":612,"title":{},"body":{"components/GraphsComponent.html":{}}}],["graphs/:id/:nam",{"_index":205,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["graphs/graphs.compon",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["graphscompon",{"_index":94,"title":{"components/GraphsComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["grnd_level",{"_index":517,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["ground",{"_index":1474,"title":{},"body":{"classes/WeatherNow.html":{}}}],["hammerj",{"_index":1567,"title":{},"body":{"dependencies.html":{}}}],["header",{"_index":297,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["heavi",{"_index":726,"title":{},"body":{"components/InitialComponent.html":{}}}],["help",{"_index":999,"title":{},"body":{"components/LogginDialogComponent.html":{},"index.html":{}}}],["here",{"_index":1044,"title":{},"body":{"modules/MaterialModule.html":{}}}],["hidden",{"_index":1146,"title":{},"body":{"components/NavigationComponent.html":{}}}],["hide",{"_index":998,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["hold",{"_index":868,"title":{},"body":{"injectables/LogService.html":{}}}],["home",{"_index":1150,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["host",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["hostlisten",{"_index":692,"title":{},"body":{"components/InitialComponent.html":{}}}],["hostlistener('window:keyup",{"_index":780,"title":{},"body":{"components/InitialComponent.html":{}}}],["hour",{"_index":567,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["html",{"_index":83,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["http",{"_index":259,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"injectables/WeatherService.html":{}}}],["http://localhost:4200",{"_index":1582,"title":{},"body":{"index.html":{}}}],["http://localhost:8080/citiesservic",{"_index":279,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["http_interceptor",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["httpclient",{"_index":254,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"injectables/WeatherService.html":{}}}],["httpclientmodul",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["httpevent",{"_index":819,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["httphandler",{"_index":817,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["httpheader",{"_index":284,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{},"injectables/WeatherService.html":{}}}],["httpinterceptor",{"_index":805,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["httpoption",{"_index":296,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["httpoptions).subscribe(rx",{"_index":304,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["httprequest",{"_index":815,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["httprequest(\"delet",{"_index":950,"title":{},"body":{"injectables/LogService.html":{}}}],["https://api.openweathermap.org/data/2.5/forecast?id=${id}&appid=888b7bb3ed5f95fb9894b5c33589e6a6",{"_index":1521,"title":{},"body":{"injectables/WeatherService.html":{}}}],["https://api.openweathermap.org/data/2.5/weather?id=${id}&appid=888b7bb3ed5f95fb9894b5c33589e6a6",{"_index":1516,"title":{},"body":{"injectables/WeatherService.html":{}}}],["https://api.openweathermap.org/data/2.5/weather?q=${name}&appid=888b7bb3ed5f95fb9894b5c33589e6a6",{"_index":1520,"title":{},"body":{"injectables/WeatherService.html":{}}}],["https://api.openweathermap.org/data/2.5/weather?q=vigo&appid=888b7bb3ed5f95fb9894b5c33589e6a6",{"_index":1512,"title":{},"body":{"injectables/WeatherService.html":{}}}],["humid",{"_index":518,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["icon",{"_index":72,"title":{},"body":{"components/AboutComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{}}}],["id",{"_index":231,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["id\")).subscribe(rx",{"_index":351,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["id\",\"country\",\"lat\",\"lon\",\"nam",{"_index":344,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["identifi",{"_index":1514,"title":{},"body":{"injectables/WeatherService.html":{},"coverage.html":{}}}],["if(err.statu",{"_index":915,"title":{},"body":{"injectables/LogService.html":{}}}],["if(json.parse(localstorage.getitem(\"favouritec",{"_index":1222,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["if(rx.rain",{"_index":1437,"title":{},"body":{"classes/WeatherNow.html":{}}}],["if(rx.snow",{"_index":1439,"title":{},"body":{"classes/WeatherNow.html":{}}}],["if(this.form.get('password').error",{"_index":1010,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["if(this.form.get('password').errors.requir",{"_index":1011,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["if(this.form.get('username').error",{"_index":1005,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["if(this.form.get('username').errors.maxlength",{"_index":1008,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["if(this.form.get('username').errors.minlength",{"_index":1007,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["if(this.form.get('username').errors.requir",{"_index":1009,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["imag",{"_index":44,"title":{},"body":{"components/AboutComponent.html":{},"components/NavigationComponent.html":{}}}],["imatia",{"_index":80,"title":{},"body":{"components/AboutComponent.html":{}}}],["implement",{"_index":9,"title":{},"body":{"components/AboutComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["import",{"_index":28,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["includ",{"_index":449,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["index",{"_index":18,"title":{"index.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["indic",{"_index":476,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["ineffici",{"_index":1106,"title":{},"body":{"components/NavigationComponent.html":{}}}],["info",{"_index":2,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["inform",{"_index":33,"title":{},"body":{"components/AboutComponent.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/LogService.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["inici",{"_index":1147,"title":{},"body":{"components/NavigationComponent.html":{}}}],["initi",{"_index":199,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["initial'},{'nam",{"_index":97,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["initial.component.css",{"_index":677,"title":{},"body":{"components/InitialComponent.html":{}}}],["initial.component.html",{"_index":678,"title":{},"body":{"components/InitialComponent.html":{}}}],["initial/initial.compon",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["initialcompon",{"_index":96,"title":{"components/InitialComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["inject",{"_index":239,"title":{"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{}},"body":{"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"overview.html":{}}}],["innov",{"_index":81,"title":{},"body":{"components/AboutComponent.html":{}}}],["input",{"_index":691,"title":{},"body":{"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["insert",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"classes/SavedCity.html":{}}}],["insertbodi",{"_index":1251,"title":{},"body":{"classes/SavedCity.html":{}}}],["instruct",{"_index":1229,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["interact",{"_index":358,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["intercept",{"_index":809,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["intercept(request",{"_index":814,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["interceptor",{"_index":806,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["interceptor'},{'nam",{"_index":99,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["interceptor.component.css",{"_index":807,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["interceptor.component.html",{"_index":808,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["interceptor/interceptor.compon",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["interceptorcompon",{"_index":98,"title":{"components/InterceptorComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["internship",{"_index":79,"title":{},"body":{"components/AboutComponent.html":{}}}],["intervalcheck",{"_index":1056,"title":{},"body":{"components/NavigationComponent.html":{}}}],["invalid",{"_index":871,"title":{},"body":{"injectables/LogService.html":{}}}],["islog",{"_index":1291,"title":{},"body":{"components/SettingsComponent.html":{}}}],["isn'n",{"_index":1325,"title":{},"body":{"components/SettingsComponent.html":{}}}],["isn't",{"_index":738,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["item.clouds.al",{"_index":478,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["item.countri",{"_index":323,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["item.dt_txt",{"_index":484,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["item.id).join",{"_index":236,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["item.id.tostr",{"_index":322,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["item.lat",{"_index":325,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["item.lon",{"_index":324,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["item.main.temp",{"_index":1364,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["item.main.temp_max",{"_index":1368,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["item.main.temp_min",{"_index":1371,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["item.rain",{"_index":1203,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["item.snow",{"_index":1204,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["item.wind.spe",{"_index":482,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["js",{"_index":1565,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":725,"title":{},"body":{"components/InitialComponent.html":{}}}],["json.parse(localstorage.getitem(\"favouritecities\")).foreach(el",{"_index":1224,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["json.stringify(usernam",{"_index":905,"title":{},"body":{"injectables/LogService.html":{}}}],["karma",{"_index":1596,"title":{},"body":{"index.html":{}}}],["keyadmin",{"_index":684,"title":{},"body":{"components/InitialComponent.html":{}}}],["keyboard",{"_index":777,"title":{},"body":{"components/InitialComponent.html":{}}}],["keyboardev",{"_index":700,"title":{},"body":{"components/InitialComponent.html":{}}}],["keyevent(ev",{"_index":781,"title":{},"body":{"components/InitialComponent.html":{}}}],["km/h",{"_index":481,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["l/m^2",{"_index":1202,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["label",{"_index":488,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["last",{"_index":1483,"title":{},"body":{"classes/WeatherNow.html":{}}}],["lat",{"_index":336,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{}}}],["launch",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/SavedCitiesService.html":{}}}],["launchform",{"_index":1162,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["lead",{"_index":1518,"title":{},"body":{"injectables/WeatherService.html":{}}}],["leakag",{"_index":763,"title":{},"body":{"components/InitialComponent.html":{}}}],["legend",{"_index":82,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"injectables/RainAndSnowService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"overview.html":{}}}],["let'",{"_index":1349,"title":{},"body":{"components/SettingsComponent.html":{}}}],["let\\'",{"_index":1351,"title":{},"body":{"components/SettingsComponent.html":{}}}],["level",{"_index":1472,"title":{},"body":{"classes/WeatherNow.html":{}}}],["limit",{"_index":67,"title":{},"body":{"components/AboutComponent.html":{}}}],["line",{"_index":494,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/TemperatureService.html":{}}}],["link",{"_index":1144,"title":{},"body":{"components/NavigationComponent.html":{},"classes/SavedCity.html":{}}}],["list",{"_index":568,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/UserServer.html":{}}}],["list.map(item",{"_index":235,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["listen",{"_index":396,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["liter",{"_index":573,"title":{},"body":{"classes/Forecast.html":{},"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["litr",{"_index":1485,"title":{},"body":{"classes/WeatherNow.html":{}}}],["load",{"_index":685,"title":{},"body":{"components/InitialComponent.html":{}}}],["loadfavourit",{"_index":248,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["loadfavourites(c",{"_index":266,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["local",{"_index":447,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["localhost",{"_index":433,"title":{},"body":{"components/CityComponent.html":{}}}],["localstorag",{"_index":347,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["localstorage.getitem(\"sess",{"_index":927,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["localstorage.getitem(\"token",{"_index":829,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["localstorage.removeitem(\"favouritec",{"_index":1245,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["localstorage.removeitem(\"sess",{"_index":882,"title":{},"body":{"injectables/LogService.html":{}}}],["localstorage.removeitem(\"token",{"_index":883,"title":{},"body":{"injectables/LogService.html":{}}}],["localstorage.setitem(\"favouritecities\",json.stringify(this.c",{"_index":1238,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["localstorage.setitem(\"sess",{"_index":904,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["localstorage.setitem(\"token",{"_index":898,"title":{},"body":{"injectables/LogService.html":{}}}],["localstorage.setitem(\"token\",\"bear",{"_index":932,"title":{},"body":{"injectables/LogService.html":{}}}],["locat",{"_index":392,"title":{},"body":{"components/CityComponent.html":{},"injectables/WeatherService.html":{}}}],["log",{"_index":249,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["log.servic",{"_index":820,"title":{},"body":{"components/InterceptorComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["loggin",{"_index":101,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["loggindialogcompon",{"_index":100,"title":{"components/LogginDialogComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":841,"title":{},"body":{"injectables/LogService.html":{}}}],["login(usernam",{"_index":857,"title":{},"body":{"injectables/LogService.html":{}}}],["logrefresh",{"_index":842,"title":{},"body":{"injectables/LogService.html":{}}}],["logservic",{"_index":811,"title":{"injectables/LogService.html":{}},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"coverage.html":{}}}],["logsubscript",{"_index":1057,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["logsubscription2",{"_index":1058,"title":{},"body":{"components/NavigationComponent.html":{}}}],["lon",{"_index":337,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{}}}],["long",{"_index":1020,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["look",{"_index":747,"title":{},"body":{"components/InitialComponent.html":{}}}],["lop",{"_index":340,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["ls",{"_index":1225,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["main",{"_index":516,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{}}}],["make",{"_index":669,"title":{},"body":{"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"classes/SavedCity.html":{},"injectables/WeatherService.html":{}}}],["manag",{"_index":570,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{}}}],["mat",{"_index":421,"title":{},"body":{"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["matautocompletemodul",{"_index":1041,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matbuttonmodul",{"_index":195,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["matcardmodul",{"_index":1027,"title":{},"body":{"modules/MaterialModule.html":{}}}],["match",{"_index":111,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["matcheckboxmodul",{"_index":196,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["matchipsmodul",{"_index":1038,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matchpassword",{"_index":1190,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["matchpassword(ac",{"_index":1182,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["matdialog",{"_index":1072,"title":{},"body":{"components/NavigationComponent.html":{}}}],["matdialogmodul",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{}}}],["matdialogref",{"_index":972,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["materi",{"_index":1045,"title":{},"body":{"modules/MaterialModule.html":{}}}],["material/fab",{"_index":1561,"title":{},"body":{"dependencies.html":{}}}],["material/material.modul",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["materialmodul",{"_index":133,"title":{"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["matexpansionmodul",{"_index":1040,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matgridlistmodul",{"_index":1028,"title":{},"body":{"modules/MaterialModule.html":{}}}],["math.max(...this.wind",{"_index":506,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["maticonmodul",{"_index":1026,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matinputmodul",{"_index":1032,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matlistmodul",{"_index":1036,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matmenumodul",{"_index":1024,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matprogressspinnermodul",{"_index":1037,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matradiomodul",{"_index":1035,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matselectmodul",{"_index":1033,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matsidenavmodul",{"_index":1029,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matslidermodul",{"_index":1034,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matslidetogglemodul",{"_index":1043,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matsnackbar",{"_index":378,"title":{},"body":{"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["matsnackbarmodul",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["matsortmodul",{"_index":1030,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattabl",{"_index":513,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["mattabledatasourc",{"_index":394,"title":{},"body":{"components/CityComponent.html":{}}}],["mattabledatasource(this.valuesdisplay",{"_index":423,"title":{},"body":{"components/CityComponent.html":{}}}],["mattablemodul",{"_index":1031,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattabsmodul",{"_index":1042,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matter",{"_index":955,"title":{},"body":{"injectables/LogService.html":{}}}],["mattoolbarmodul",{"_index":1025,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattooltipmodul",{"_index":1039,"title":{},"body":{"modules/MaterialModule.html":{}}}],["max",{"_index":505,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/TemperatureService.html":{}}}],["maximum",{"_index":1367,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["maxlengtherror",{"_index":964,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["mb",{"_index":801,"title":{},"body":{"components/InitialComponent.html":{}}}],["meant",{"_index":787,"title":{},"body":{"components/InitialComponent.html":{}}}],["memori",{"_index":744,"title":{},"body":{"components/InitialComponent.html":{},"injectables/LogService.html":{}}}],["menu",{"_index":1148,"title":{},"body":{"components/NavigationComponent.html":{}}}],["messag",{"_index":1000,"title":{},"body":{"components/LogginDialogComponent.html":{},"classes/WeatherNow.html":{}}}],["metadata",{"_index":11,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["metemo",{"_index":1239,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["method",{"_index":19,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["microservic",{"_index":443,"title":{},"body":{"components/CityComponent.html":{}}}],["min",{"_index":503,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/TemperatureService.html":{}}}],["minimum",{"_index":1370,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["minlengtherror",{"_index":965,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["minut",{"_index":71,"title":{},"body":{"components/AboutComponent.html":{}}}],["miscellan",{"_index":1613,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["missunderstand",{"_index":1519,"title":{},"body":{"injectables/WeatherService.html":{}}}],["modifi",{"_index":1247,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["modul",{"_index":123,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":609,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["more",{"_index":1601,"title":{},"body":{"index.html":{}}}],["more_vert",{"_index":1152,"title":{},"body":{"components/NavigationComponent.html":{}}}],["much",{"_index":743,"title":{},"body":{"components/InitialComponent.html":{},"modules/MaterialModule.html":{}}}],["multi",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["mw",{"_index":934,"title":{},"body":{"injectables/LogService.html":{}}}],["name",{"_index":88,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"index.html":{}}}],["navig",{"_index":208,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{},"index.html":{}}}],["navigation'},{'nam",{"_index":104,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["navigation.component.css",{"_index":1051,"title":{},"body":{"components/NavigationComponent.html":{}}}],["navigation.component.html",{"_index":1052,"title":{},"body":{"components/NavigationComponent.html":{}}}],["navigation/navigation.compon",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["navigationcompon",{"_index":103,"title":{"components/NavigationComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["nciti",{"_index":230,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["necessari",{"_index":794,"title":{},"body":{"components/InitialComponent.html":{},"modules/MaterialModule.html":{}}}],["never",{"_index":1227,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["new",{"_index":106,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"coverage.html":{},"index.html":{}}}],["newus",{"_index":969,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["newusercompon",{"_index":105,"title":{"components/NewUserComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["next",{"_index":816,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["next.handle(request",{"_index":823,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["ng",{"_index":1579,"title":{},"body":{"index.html":{}}}],["ngmodul",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["ngondestroy",{"_index":1065,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["ngoninit",{"_index":20,"title":{},"body":{"components/AboutComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["nif",{"_index":939,"title":{},"body":{"injectables/LogService.html":{}}}],["non",{"_index":1233,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["none",{"_index":716,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["notempti",{"_index":1059,"title":{},"body":{"components/NavigationComponent.html":{}}}],["notsur",{"_index":1066,"title":{},"body":{"components/NavigationComponent.html":{}}}],["npassword",{"_index":228,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["npm",{"_index":1603,"title":{},"body":{"index.html":{}}}],["null",{"_index":1006,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/SavedCitiesService.html":{},"classes/WeatherNow.html":{}}}],["number",{"_index":264,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{}}}],["nvm",{"_index":1569,"title":{},"body":{"dependencies.html":{}}}],["object",{"_index":387,"title":{},"body":{"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"miscellaneous/variables.html":{}}}],["observ",{"_index":592,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"injectables/WeatherService.html":{}}}],["obtain",{"_index":62,"title":{},"body":{"components/AboutComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{}}}],["ok",{"_index":295,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["on",{"_index":212,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["ondestroy",{"_index":1050,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["oninit",{"_index":10,"title":{},"body":{"components/AboutComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["ontim",{"_index":53,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{}}}],["op",{"_index":341,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["open",{"_index":1071,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["openweath",{"_index":1522,"title":{},"body":{"injectables/WeatherService.html":{}}}],["openweathermap",{"_index":64,"title":{},"body":{"components/AboutComponent.html":{},"injectables/WeatherService.html":{}}}],["optimum",{"_index":740,"title":{},"body":{"components/InitialComponent.html":{}}}],["option",{"_index":258,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["order",{"_index":1046,"title":{},"body":{"modules/MaterialModule.html":{}}}],["out",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"components/NavigationComponent.html":{},"index.html":{},"overview.html":{}}}],["outgo",{"_index":830,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["overview",{"_index":1609,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p1",{"_index":1183,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["p1.valu",{"_index":1187,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["p2",{"_index":1185,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["p2.valu",{"_index":1188,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["packag",{"_index":1548,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["para",{"_index":1419,"title":{},"body":{"classes/WeatherNow.html":{}}}],["param",{"_index":261,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["paramet",{"_index":257,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["parámetro",{"_index":332,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["passwd",{"_index":1292,"title":{},"body":{"components/SettingsComponent.html":{}}}],["password",{"_index":222,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"classes/UserServer.html":{}}}],["password2",{"_index":1161,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["passwordrequirederror",{"_index":966,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["passwordvalid",{"_index":1179,"title":{"classes/PasswordValidation.html":{}},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"coverage.html":{}}}],["passwordvalidation.matchpassword",{"_index":1175,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["password}\"}`).subscrib",{"_index":957,"title":{},"body":{"injectables/LogService.html":{}}}],["path",{"_index":197,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{}}}],["pathmatch",{"_index":200,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["per",{"_index":70,"title":{},"body":{"components/AboutComponent.html":{}}}],["percentag",{"_index":477,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/WeatherNow.html":{}}}],["perform",{"_index":741,"title":{},"body":{"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/SettingsComponent.html":{}}}],["perman",{"_index":1348,"title":{},"body":{"components/SettingsComponent.html":{}}}],["pick",{"_index":1143,"title":{},"body":{"components/NavigationComponent.html":{}}}],["pop",{"_index":1014,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["popstateev",{"_index":400,"title":{},"body":{"components/CityComponent.html":{}}}],["possibl",{"_index":446,"title":{},"body":{"components/CityComponent.html":{}}}],["prepar",{"_index":405,"title":{},"body":{"components/CityComponent.html":{},"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["present",{"_index":495,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"components/NavigationComponent.html":{}}}],["pressur",{"_index":519,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["primari",{"_index":664,"title":{},"body":{"components/GraphsComponent.html":{}}}],["primero",{"_index":328,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["privat",{"_index":290,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"injectables/WeatherService.html":{}}}],["problem",{"_index":922,"title":{},"body":{"injectables/LogService.html":{}}}],["process",{"_index":923,"title":{},"body":{"injectables/LogService.html":{}}}],["prod",{"_index":1590,"title":{},"body":{"index.html":{}}}],["produc",{"_index":721,"title":{},"body":{"components/InitialComponent.html":{}}}],["product",{"_index":1592,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["proffit",{"_index":75,"title":{},"body":{"components/AboutComponent.html":{}}}],["profil",{"_index":1060,"title":{},"body":{"components/NavigationComponent.html":{}}}],["project",{"_index":73,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["properti",{"_index":116,"title":{},"body":{"components/AppComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["protractor",{"_index":1599,"title":{},"body":{"index.html":{}}}],["provid",{"_index":55,"title":{},"body":{"components/AboutComponent.html":{},"modules/AppModule.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"overview.html":{}}}],["providedin",{"_index":289,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{}}}],["public",{"_index":1054,"title":{},"body":{"components/NavigationComponent.html":{}}}],["purpos",{"_index":76,"title":{},"body":{"components/AboutComponent.html":{}}}],["put",{"_index":414,"title":{},"body":{"components/CityComponent.html":{}}}],["pwd",{"_index":1285,"title":{},"body":{"components/SettingsComponent.html":{}}}],["que",{"_index":330,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["queri",{"_index":69,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{}}}],["rain",{"_index":527,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["rainandsnow",{"_index":623,"title":{},"body":{"components/GraphsComponent.html":{}}}],["rainandsnow/rain",{"_index":646,"title":{},"body":{"components/GraphsComponent.html":{}}}],["rainandsnowchart",{"_index":615,"title":{},"body":{"components/GraphsComponent.html":{}}}],["rainandsnowservic",{"_index":626,"title":{"injectables/RainAndSnowService.html":{}},"body":{"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"coverage.html":{}}}],["raincolor",{"_index":616,"title":{},"body":{"components/GraphsComponent.html":{}}}],["raind",{"_index":671,"title":{},"body":{"components/GraphsComponent.html":{}}}],["reach",{"_index":1228,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["reactiveformsmodul",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["readm",{"_index":1602,"title":{},"body":{"index.html":{}}}],["receiv",{"_index":415,"title":{},"body":{"components/CityComponent.html":{},"classes/WeatherNow.html":{}}}],["recomend",{"_index":792,"title":{},"body":{"components/InitialComponent.html":{}}}],["redirect",{"_index":210,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/SettingsComponent.html":{}}}],["redirectto",{"_index":198,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["ref",{"_index":1135,"title":{},"body":{"components/NavigationComponent.html":{}}}],["refresh",{"_index":398,"title":{},"body":{"components/CityComponent.html":{}}}],["reload",{"_index":1584,"title":{},"body":{"index.html":{}}}],["relog",{"_index":1067,"title":{},"body":{"components/NavigationComponent.html":{}}}],["remov",{"_index":880,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["repeat",{"_index":1180,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["repres",{"_index":420,"title":{},"body":{"components/CityComponent.html":{}}}],["request",{"_index":307,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"injectables/WeatherService.html":{}}}],["request.clon",{"_index":827,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["request.method",{"_index":822,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["request.url.includes(`http://localhost:8080/citiesservic",{"_index":824,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["requir",{"_index":799,"title":{},"body":{"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":1617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res.headers.get('x",{"_index":899,"title":{},"body":{"injectables/LogService.html":{}}}],["reset",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"components/SettingsComponent.html":{},"overview.html":{}}}],["respons",{"_index":207,"title":{},"body":{"modules/AppRoutingModule.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/RespuestaForecast.html":{},"injectables/WeatherService.html":{}}}],["response.data[0].c",{"_index":902,"title":{},"body":{"injectables/LogService.html":{}}}],["respuestaforecast",{"_index":395,"title":{"classes/RespuestaForecast.html":{}},"body":{"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"classes/RespuestaForecast.html":{},"coverage.html":{}}}],["restor",{"_index":1110,"title":{},"body":{"components/NavigationComponent.html":{}}}],["result",{"_index":110,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":25,"title":{},"body":{"components/AboutComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["right",{"_index":211,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["root",{"_index":113,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{}}}],["root'},{'nam",{"_index":91,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["rop",{"_index":342,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rout",{"_index":191,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/LogginDialogComponent.html":{},"overview.html":{},"routes.html":{}}}],["router",{"_index":846,"title":{},"body":{"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["router.events.subscrib",{"_index":1098,"title":{},"body":{"components/NavigationComponent.html":{}}}],["routermodul",{"_index":190,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(rout",{"_index":206,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routesubscript",{"_index":1061,"title":{},"body":{"components/NavigationComponent.html":{}}}],["routing.modul",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.t",{"_index":187,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["run",{"_index":1132,"title":{},"body":{"components/NavigationComponent.html":{},"index.html":{}}}],["rx",{"_index":367,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"classes/WeatherNow.html":{}}}],["rx.base",{"_index":1426,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.clouds.al",{"_index":1436,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.cod",{"_index":1451,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.coord.lat",{"_index":1421,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.coord.lon",{"_index":1420,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.data.foreach(item",{"_index":319,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.data.length",{"_index":316,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.data[0].countri",{"_index":355,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.data[0].id.tostr",{"_index":354,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.data[0].lat",{"_index":357,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.data[0].lon",{"_index":356,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.dt",{"_index":1441,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.id",{"_index":1448,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.grnd_level",{"_index":1433,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.humid",{"_index":1429,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.pressur",{"_index":1428,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.sea_level",{"_index":1432,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.temp",{"_index":1427,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.temp_max",{"_index":1431,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.temp_min",{"_index":1430,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.name",{"_index":1449,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.rain[\"3h",{"_index":1438,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.snow[\"3h",{"_index":1440,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.countri",{"_index":1445,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.id",{"_index":1443,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.messag",{"_index":1444,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.sunris",{"_index":1446,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.sunset",{"_index":1447,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.typ",{"_index":1442,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.weather.foreach((w",{"_index":1422,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.wind.deg",{"_index":1435,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.wind.spe",{"_index":1434,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rxciti",{"_index":686,"title":{},"body":{"components/InitialComponent.html":{}}}],["rxj",{"_index":602,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/WeatherService.html":{},"dependencies.html":{}}}],["save",{"_index":287,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{}}}],["save(citytosav",{"_index":1216,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["savec",{"_index":372,"title":{},"body":{"components/CityComponent.html":{}}}],["savedc",{"_index":219,"title":{"classes/SavedCity.html":{}},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/UserServer.html":{},"coverage.html":{}}}],["savedcitiesservic",{"_index":255,"title":{"injectables/SavedCitiesService.html":{}},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"coverage.html":{}}}],["savedcity(element.nam",{"_index":733,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["savedcity(item.nam",{"_index":321,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["savedcity(nam",{"_index":411,"title":{},"body":{"components/CityComponent.html":{}}}],["savedcity(rx.data[0].nam",{"_index":353,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["savedcity(this.rxcity.nam",{"_index":756,"title":{},"body":{"components/InitialComponent.html":{}}}],["savedcity.nam",{"_index":1153,"title":{},"body":{"components/NavigationComponent.html":{}}}],["scaffold",{"_index":1585,"title":{},"body":{"index.html":{}}}],["scale",{"_index":499,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["sea",{"_index":1471,"title":{},"body":{"classes/WeatherNow.html":{}}}],["sea_level",{"_index":520,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["search",{"_index":314,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"classes/SavedCity.html":{},"injectables/WeatherService.html":{}}}],["searchbyid",{"_index":250,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["searchbyid(c",{"_index":270,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["searchbynam",{"_index":251,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["searchbyname(nam",{"_index":272,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["selector",{"_index":12,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["send",{"_index":569,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"injectables/LogService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{}}}],["serv",{"_index":1580,"title":{},"body":{"index.html":{}}}],["servedc",{"_index":286,"title":{"classes/ServedCity.html":{}},"body":{"injectables/CitiesServerService.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"coverage.html":{}}}],["server",{"_index":359,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"index.html":{}}}],["server.servic",{"_index":720,"title":{},"body":{"components/InitialComponent.html":{},"injectables/LogService.html":{}}}],["server.service.t",{"_index":242,"title":{},"body":{"injectables/CitiesServerService.html":{},"coverage.html":{}}}],["server.service.ts:107",{"_index":265,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:125",{"_index":271,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:146",{"_index":267,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:15",{"_index":278,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:17",{"_index":281,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:18",{"_index":283,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:19",{"_index":256,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:26",{"_index":275,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:53",{"_index":273,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:84",{"_index":268,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:89",{"_index":262,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server/services/rest",{"_index":826,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["server/services/rest/cities/c",{"_index":280,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server/services/rest/users/login",{"_index":825,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["serverrespons",{"_index":285,"title":{"classes/ServerResponse.html":{}},"body":{"injectables/CitiesServerService.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"coverage.html":{}}}],["servic",{"_index":59,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{}}}],["service'",{"_index":1139,"title":{},"body":{"components/NavigationComponent.html":{}}}],["serviceworkermodul",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["serviceworkermodule.register('/ngsw",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["session",{"_index":56,"title":{},"body":{"components/AboutComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["set",{"_index":41,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{}}}],["set(rx",{"_index":1415,"title":{},"body":{"classes/WeatherNow.html":{}}}],["setciti",{"_index":587,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["setcity(c",{"_index":594,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["setcurrentus",{"_index":1293,"title":{},"body":{"components/SettingsComponent.html":{}}}],["setfromlist",{"_index":1375,"title":{},"body":{"classes/UserServer.html":{}}}],["setfromlist(list",{"_index":233,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["sethead",{"_index":828,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["settings.component.css",{"_index":1279,"title":{},"body":{"components/SettingsComponent.html":{}}}],["settings.component.html",{"_index":1280,"title":{},"body":{"components/SettingsComponent.html":{}}}],["settings/settings.compon",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["settingscompon",{"_index":108,"title":{"components/SettingsComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["setvalu",{"_index":588,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["setvalues(valu",{"_index":596,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["sever",{"_index":451,"title":{},"body":{"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["share",{"_index":608,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["short",{"_index":1019,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["shouldn't",{"_index":1350,"title":{},"body":{"components/SettingsComponent.html":{}}}],["shouldn\\'t",{"_index":1352,"title":{},"body":{"components/SettingsComponent.html":{}}}],["show",{"_index":30,"title":{},"body":{"components/AboutComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["show/hid",{"_index":775,"title":{},"body":{"components/InitialComponent.html":{}}}],["showdelet",{"_index":1294,"title":{},"body":{"components/SettingsComponent.html":{}}}],["showforecast",{"_index":368,"title":{},"body":{"components/CityComponent.html":{}}}],["showlin",{"_index":498,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["shown",{"_index":1128,"title":{},"body":{"components/NavigationComponent.html":{}}}],["sidenav",{"_index":1124,"title":{},"body":{"components/NavigationComponent.html":{}}}],["sign",{"_index":1016,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["simpli",{"_index":607,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["snackbar",{"_index":377,"title":{},"body":{"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["snow",{"_index":528,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["snow.servic",{"_index":647,"title":{},"body":{"components/GraphsComponent.html":{}}}],["snow.service.t",{"_index":1194,"title":{},"body":{"injectables/RainAndSnowService.html":{},"coverage.html":{}}}],["snow.service.ts:10",{"_index":1199,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["snow.service.ts:11",{"_index":1200,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["snow.service.ts:12",{"_index":1201,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["snow.service.ts:13",{"_index":1196,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["snow.service.ts:17",{"_index":1198,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["someon",{"_index":869,"title":{},"body":{"injectables/LogService.html":{}}}],["somw",{"_index":31,"title":{},"body":{"components/AboutComponent.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"index.html":{}}}],["spec\\.t",{"_index":1618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["speed",{"_index":480,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["src/.../environment.prod.t",{"_index":1615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.t",{"_index":1616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../test.t",{"_index":1614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/about/about.component.t",{"_index":8,"title":{},"body":{"components/AboutComponent.html":{},"coverage.html":{}}}],["src/app/about/about.component.ts:13",{"_index":24,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/about/about.component.ts:9",{"_index":23,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/app",{"_index":186,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.t",{"_index":112,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:9",{"_index":122,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.t",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/citi",{"_index":241,"title":{},"body":{"injectables/CitiesServerService.html":{},"coverage.html":{}}}],["src/app/city/city.component.t",{"_index":360,"title":{},"body":{"components/CityComponent.html":{},"coverage.html":{}}}],["src/app/city/city.component.ts:25",{"_index":383,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:26",{"_index":390,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:27",{"_index":388,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:28",{"_index":389,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:29",{"_index":384,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:30",{"_index":385,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:31",{"_index":386,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:32",{"_index":379,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:47",{"_index":381,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:50",{"_index":380,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:85",{"_index":382,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/data.t",{"_index":509,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"coverage.html":{}}}],["src/app/city/data.ts:14",{"_index":574,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:15",{"_index":575,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:16",{"_index":576,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:18",{"_index":577,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:29",{"_index":579,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:37",{"_index":580,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:42",{"_index":578,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:43",{"_index":572,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:5",{"_index":511,"title":{},"body":{"classes/Data.html":{}}}],["src/app/city/data.ts:6",{"_index":510,"title":{},"body":{"classes/Data.html":{}}}],["src/app/city/data.ts:96",{"_index":1208,"title":{},"body":{"classes/RespuestaForecast.html":{}}}],["src/app/forecast",{"_index":581,"title":{},"body":{"injectables/ForecastValuesService.html":{},"coverage.html":{}}}],["src/app/graphs/cloudsandwind/cloud",{"_index":457,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"coverage.html":{}}}],["src/app/graphs/graphs.component.t",{"_index":610,"title":{},"body":{"components/GraphsComponent.html":{},"coverage.html":{}}}],["src/app/graphs/graphs.component.ts:117",{"_index":628,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:17",{"_index":635,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:18",{"_index":642,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:19",{"_index":643,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:20",{"_index":644,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:21",{"_index":636,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:22",{"_index":639,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:23",{"_index":634,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:24",{"_index":640,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:25",{"_index":637,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:26",{"_index":633,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:27",{"_index":632,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:28",{"_index":641,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:29",{"_index":638,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:30",{"_index":627,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:59",{"_index":629,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:78",{"_index":631,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:98",{"_index":630,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/rainandsnow/rain",{"_index":1193,"title":{},"body":{"injectables/RainAndSnowService.html":{},"coverage.html":{}}}],["src/app/graphs/temperature/temperature.service.t",{"_index":1353,"title":{},"body":{"injectables/TemperatureService.html":{},"coverage.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:10",{"_index":1358,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:11",{"_index":1359,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:12",{"_index":1360,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:13",{"_index":1361,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:14",{"_index":1355,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:18",{"_index":1357,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/initial/initial.component.t",{"_index":676,"title":{},"body":{"components/InitialComponent.html":{},"coverage.html":{}}}],["src/app/initial/initial.component.ts:111",{"_index":707,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:121",{"_index":706,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:128",{"_index":701,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:20",{"_index":718,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:21",{"_index":712,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:22",{"_index":713,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:23",{"_index":717,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:24",{"_index":719,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:25",{"_index":711,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:26",{"_index":709,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:27",{"_index":714,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:28",{"_index":708,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:29",{"_index":715,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:31",{"_index":696,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:41",{"_index":704,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:47",{"_index":702,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:62",{"_index":703,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:88",{"_index":705,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/interceptor/interceptor.component.t",{"_index":804,"title":{},"body":{"components/InterceptorComponent.html":{},"coverage.html":{}}}],["src/app/interceptor/interceptor.component.ts:11",{"_index":812,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["src/app/interceptor/interceptor.component.ts:15",{"_index":818,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["src/app/log.service.t",{"_index":834,"title":{},"body":{"injectables/LogService.html":{},"coverage.html":{}}}],["src/app/log.service.ts:136",{"_index":859,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:166",{"_index":850,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:17",{"_index":863,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:18",{"_index":867,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:19",{"_index":866,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:20",{"_index":865,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:204",{"_index":854,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:22",{"_index":864,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:224",{"_index":852,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:23",{"_index":847,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:233",{"_index":861,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:33",{"_index":855,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:37",{"_index":856,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:42",{"_index":848,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:65",{"_index":862,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:77",{"_index":858,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/loggin",{"_index":958,"title":{},"body":{"components/LogginDialogComponent.html":{},"coverage.html":{}}}],["src/app/material/material.module.t",{"_index":1023,"title":{},"body":{"modules/MaterialModule.html":{}}}],["src/app/navigation/navigation.component.t",{"_index":1049,"title":{},"body":{"components/NavigationComponent.html":{},"coverage.html":{}}}],["src/app/navigation/navigation.component.ts:108",{"_index":1082,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:124",{"_index":1075,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:134",{"_index":1084,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:138",{"_index":1080,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:143",{"_index":1083,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:18",{"_index":1096,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:19",{"_index":1095,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:20",{"_index":1085,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:21",{"_index":1091,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:22",{"_index":1092,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:23",{"_index":1074,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:24",{"_index":1093,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:25",{"_index":1088,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:26",{"_index":1087,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:27",{"_index":1090,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:28",{"_index":1094,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:29",{"_index":1089,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:30",{"_index":1073,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:36",{"_index":1086,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:49",{"_index":1079,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:57",{"_index":1078,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:64",{"_index":1081,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:78",{"_index":1077,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:93",{"_index":1076,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/new",{"_index":1157,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"coverage.html":{}}}],["src/app/sav",{"_index":1209,"title":{},"body":{"injectables/SavedCitiesService.html":{},"coverage.html":{}}}],["src/app/savedcity.t",{"_index":1248,"title":{},"body":{"classes/SavedCity.html":{},"coverage.html":{}}}],["src/app/savedcity.ts:2",{"_index":1257,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:24",{"_index":1259,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:3",{"_index":1256,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:4",{"_index":1258,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:5",{"_index":1255,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:6",{"_index":1254,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:9",{"_index":1253,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/servedcity.t",{"_index":1267,"title":{},"body":{"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"coverage.html":{}}}],["src/app/servedcity.ts:2",{"_index":1272,"title":{},"body":{"classes/ServedCity.html":{}}}],["src/app/servedcity.ts:20",{"_index":1277,"title":{},"body":{"classes/ServerResponse.html":{}}}],["src/app/servedcity.ts:3",{"_index":1270,"title":{},"body":{"classes/ServedCity.html":{}}}],["src/app/servedcity.ts:4",{"_index":1269,"title":{},"body":{"classes/ServedCity.html":{}}}],["src/app/servedcity.ts:5",{"_index":1271,"title":{},"body":{"classes/ServedCity.html":{}}}],["src/app/servedcity.ts:6",{"_index":1268,"title":{},"body":{"classes/ServedCity.html":{}}}],["src/app/settings/settings.component.t",{"_index":1278,"title":{},"body":{"components/SettingsComponent.html":{},"coverage.html":{}}}],["src/app/settings/settings.component.ts:106",{"_index":1307,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:113",{"_index":1303,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:119",{"_index":1309,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:17",{"_index":1312,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:18",{"_index":1316,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:19",{"_index":1317,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:20",{"_index":1315,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:21",{"_index":1314,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:22",{"_index":1320,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:23",{"_index":1318,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:24",{"_index":1313,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:25",{"_index":1298,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:35",{"_index":1306,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:41",{"_index":1305,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:45",{"_index":1308,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:55",{"_index":1300,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:65",{"_index":1299,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:72",{"_index":1304,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:81",{"_index":1302,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:86",{"_index":1311,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:96",{"_index":1310,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/userserver.t",{"_index":216,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{},"coverage.html":{}}}],["src/app/userserver.ts:13",{"_index":1381,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:17",{"_index":1382,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:27",{"_index":218,"title":{},"body":{"classes/CitiesResponse.html":{}}}],["src/app/userserver.ts:31",{"_index":238,"title":{},"body":{"classes/CitiesResponseUnit.html":{}}}],["src/app/userserver.ts:4",{"_index":1380,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:5",{"_index":1379,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:6",{"_index":1378,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:7",{"_index":1377,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:8",{"_index":1376,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/weather.service.t",{"_index":1500,"title":{},"body":{"injectables/WeatherService.html":{},"coverage.html":{}}}],["src/app/weather.service.ts:11",{"_index":1505,"title":{},"body":{"injectables/WeatherService.html":{}}}],["src/app/weather.service.ts:17",{"_index":1509,"title":{},"body":{"injectables/WeatherService.html":{}}}],["src/app/weather.service.ts:22",{"_index":1511,"title":{},"body":{"injectables/WeatherService.html":{}}}],["src/app/weather.service.ts:28",{"_index":1507,"title":{},"body":{"injectables/WeatherService.html":{}}}],["src/app/weather.t",{"_index":1383,"title":{},"body":{"classes/Weather.html":{},"coverage.html":{}}}],["src/app/weather.ts:3",{"_index":1386,"title":{},"body":{"classes/Weather.html":{}}}],["src/app/weather.ts:4",{"_index":1387,"title":{},"body":{"classes/Weather.html":{}}}],["src/app/weather.ts:5",{"_index":1385,"title":{},"body":{"classes/Weather.html":{}}}],["src/app/weather.ts:6",{"_index":1384,"title":{},"body":{"classes/Weather.html":{}}}],["src/app/weathernow.t",{"_index":1388,"title":{},"body":{"classes/WeatherNow.html":{},"coverage.html":{}}}],["src/app/weathernow.ts:102",{"_index":1414,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:14",{"_index":1395,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:15",{"_index":1401,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:16",{"_index":1408,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:17",{"_index":1396,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:174",{"_index":1412,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:18",{"_index":1403,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:19",{"_index":1405,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:20",{"_index":1399,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:21",{"_index":1406,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:22",{"_index":1400,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:23",{"_index":1402,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:24",{"_index":1397,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:28",{"_index":1404,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:29",{"_index":1394,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:35",{"_index":1416,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:6",{"_index":1398,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:7",{"_index":1407,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/environments/environment.prod.t",{"_index":1542,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.t",{"_index":1544,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test.t",{"_index":1545,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":1574,"title":{"index.html":{}},"body":{}}],["statement",{"_index":1525,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1181,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["storag",{"_index":448,"title":{},"body":{"components/CityComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["store",{"_index":346,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/WeatherNow.html":{},"index.html":{}}}],["string",{"_index":118,"title":{},"body":{"components/AppComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["styles.css",{"_index":45,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{}}}],["styleurl",{"_index":14,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["subject",{"_index":600,"title":{},"body":{"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["submit",{"_index":970,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["submitdelet",{"_index":1295,"title":{},"body":{"components/SettingsComponent.html":{}}}],["submitpassword",{"_index":1296,"title":{},"body":{"components/SettingsComponent.html":{}}}],["subscrib",{"_index":305,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["subscribe(r",{"_index":897,"title":{},"body":{"injectables/LogService.html":{}}}],["subscribe(respons",{"_index":901,"title":{},"body":{"injectables/LogService.html":{}}}],["subscript",{"_index":66,"title":{},"body":{"components/AboutComponent.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["successfulli",{"_index":941,"title":{},"body":{"injectables/LogService.html":{}}}],["such",{"_index":1345,"title":{},"body":{"components/SettingsComponent.html":{}}}],["suggest",{"_index":57,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{}}}],["sunris",{"_index":1417,"title":{},"body":{"classes/WeatherNow.html":{}}}],["sunset",{"_index":1418,"title":{},"body":{"classes/WeatherNow.html":{}}}],["support",{"_index":1606,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":1155,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["surnam",{"_index":937,"title":{},"body":{"injectables/LogService.html":{}}}],["surpridingli",{"_index":1230,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["svg",{"_index":1607,"title":{},"body":{"modules.html":{}}}],["sy",{"_index":1250,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["tabl",{"_index":406,"title":{},"body":{"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":1547,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":1101,"title":{},"body":{"components/NavigationComponent.html":{}}}],["tbe",{"_index":42,"title":{},"body":{"components/AboutComponent.html":{}}}],["tell",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["temp",{"_index":521,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["temp_kf",{"_index":522,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["temp_max",{"_index":523,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["temp_min",{"_index":524,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["temperatur",{"_index":619,"title":{},"body":{"components/GraphsComponent.html":{},"injectables/TemperatureService.html":{},"classes/WeatherNow.html":{}}}],["temperature/temperature.servic",{"_index":645,"title":{},"body":{"components/GraphsComponent.html":{}}}],["temperaturechart",{"_index":617,"title":{},"body":{"components/GraphsComponent.html":{}}}],["temperaturecolor",{"_index":618,"title":{},"body":{"components/GraphsComponent.html":{}}}],["temperatureservic",{"_index":625,"title":{"injectables/TemperatureService.html":{}},"body":{"components/GraphsComponent.html":{},"injectables/TemperatureService.html":{},"coverage.html":{}}}],["temperaturesmax",{"_index":620,"title":{},"body":{"components/GraphsComponent.html":{},"injectables/TemperatureService.html":{}}}],["temperaturesmin",{"_index":621,"title":{},"body":{"components/GraphsComponent.html":{},"injectables/TemperatureService.html":{}}}],["templat",{"_index":4,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["templateurl",{"_index":16,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["test",{"_index":1594,"title":{},"body":{"index.html":{}}}],["text",{"_index":1413,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.admin",{"_index":776,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.author",{"_index":300,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.aux",{"_index":1496,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.bas",{"_index":1425,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.builddeleteform",{"_index":1324,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.buildpsswdform",{"_index":1323,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.changepassword(this.formpassword.value.password",{"_index":1336,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.chart",{"_index":485,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["this.checkandsave('bas",{"_index":1460,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('cloud",{"_index":1479,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('cod",{"_index":1495,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('descript",{"_index":1458,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('dt",{"_index":1487,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('humid",{"_index":1465,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('icon",{"_index":1459,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('id",{"_index":1456,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('latitud",{"_index":1454,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('longitud",{"_index":1453,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('main",{"_index":1457,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('maximum",{"_index":1469,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('minimum",{"_index":1467,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('nam",{"_index":1494,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('pressur",{"_index":1463,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('rain",{"_index":1481,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('si",{"_index":1488,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('snow",{"_index":1486,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('temperatur",{"_index":1461,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('wind",{"_index":1476,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkerror",{"_index":995,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.citi",{"_index":606,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["this.cities.find(c",{"_index":1234,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["this.cities.push(citytosav",{"_index":1237,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["this.cities.push(this.c",{"_index":1226,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["this.citiesid",{"_index":232,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["this.citieslist",{"_index":728,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citieslist.filter(el",{"_index":765,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citieslist.push(new",{"_index":732,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citiesserver.log",{"_index":771,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citiesserver.searchbyname(this.c",{"_index":767,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citiesserver.upload(>this.citieslist",{"_index":773,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citiesserverservice.loadfavourites(citieslist.split",{"_index":903,"title":{},"body":{"injectables/LogService.html":{}}}],["this.citiesserverservice.upload(this.currentuser.citieslist",{"_index":878,"title":{},"body":{"injectables/LogService.html":{}}}],["this.citiessubscription.unsubscrib",{"_index":1108,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.city.length",{"_index":748,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citymatch",{"_index":755,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.cityshown",{"_index":410,"title":{},"body":{"components/CityComponent.html":{}}}],["this.cityshown.coord",{"_index":436,"title":{},"body":{"components/CityComponent.html":{}}}],["this.cityshown.countri",{"_index":434,"title":{},"body":{"components/CityComponent.html":{}}}],["this.cloud",{"_index":473,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.cloudcolor",{"_index":665,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.clouds.al",{"_index":1480,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.cloudsandwindchart",{"_index":656,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.cloudsandwindservice.getcloudsandwindchart(this.forecastvalu",{"_index":673,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.cod",{"_index":1450,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.commonurl}/users/us",{"_index":951,"title":{},"body":{"injectables/LogService.html":{}}}],["this.complexsearch(nam",{"_index":315,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.complexsearchid(c",{"_index":345,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.complexsearchid(parseint(c",{"_index":350,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.contenttyp",{"_index":299,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.coord",{"_index":1263,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["this.coord.lat",{"_index":1265,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["this.coord.lon",{"_index":1266,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["this.countri",{"_index":1273,"title":{},"body":{"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["this.currentus",{"_index":872,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["this.currentuser.citiesid",{"_index":908,"title":{},"body":{"injectables/LogService.html":{}}}],["this.currentuser.citieslist",{"_index":876,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["this.currentuser.favouritec",{"_index":884,"title":{},"body":{"injectables/LogService.html":{}}}],["this.currentuser.password",{"_index":907,"title":{},"body":{"injectables/LogService.html":{}}}],["this.currentuser.setfromlist(this.savedcitiesservice.getsavedc",{"_index":874,"title":{},"body":{"injectables/LogService.html":{}}}],["this.currentuser.usernam",{"_index":906,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["this.dat",{"_index":483,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["this.datasourc",{"_index":422,"title":{},"body":{"components/CityComponent.html":{}}}],["this.deleteaccount",{"_index":1343,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.deleteaccount1",{"_index":1344,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.deletebody(usernam",{"_index":948,"title":{},"body":{"injectables/LogService.html":{}}}],["this.deletec",{"_index":1134,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.dialog.open(loggindialogcompon",{"_index":1137,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.dialogref",{"_index":1136,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.dialogref.afterclosed().subscribe(data",{"_index":1138,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.dialogref.clos",{"_index":1012,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.dialogref.close(this.form.valu",{"_index":997,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.dt",{"_index":532,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.dt_txt",{"_index":534,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["this.emptylist",{"_index":1123,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.favouritec",{"_index":234,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["this.forecast",{"_index":425,"title":{},"body":{"components/CityComponent.html":{}}}],["this.forecast.push(new",{"_index":427,"title":{},"body":{"components/CityComponent.html":{}}}],["this.forecastvalu",{"_index":604,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{}}}],["this.forecastvalues.push(new",{"_index":658,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.forecastvaluesservice.getvalu",{"_index":667,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.forecastvaluesservice.setcity(this.cityshown",{"_index":430,"title":{},"body":{"components/CityComponent.html":{}}}],["this.forecastvaluesservice.setvalues(this.forecast",{"_index":429,"title":{},"body":{"components/CityComponent.html":{}}}],["this.forecastvaluesservice.setvalues(this.forecastvalu",{"_index":659,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.form",{"_index":989,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["this.form.valid",{"_index":996,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["this.form.value.password",{"_index":1177,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["this.formbuilder.group",{"_index":1172,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["this.formdelet",{"_index":1331,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.formdelete.valid",{"_index":1339,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.formpassword",{"_index":1329,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.formpassword.valid",{"_index":1335,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.found",{"_index":759,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.foundc",{"_index":764,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.getc",{"_index":761,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["this.getcityweath",{"_index":401,"title":{},"body":{"components/CityComponent.html":{}}}],["this.getlog",{"_index":1103,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.getsavedc",{"_index":1246,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["this.http.get(this.weatherurl",{"_index":1517,"title":{},"body":{"injectables/WeatherService.html":{}}}],["this.http.get>(this.citieslisturl).subscribe(rx",{"_index":729,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.http.post(`${this.commonurl}/fav/queri",{"_index":900,"title":{},"body":{"injectables/LogService.html":{}}}],["this.http.post(`${this.commonurl}/fav/upd",{"_index":885,"title":{},"body":{"injectables/LogService.html":{}}}],["this.http.post(`${this.commonurl}/users/login",{"_index":896,"title":{},"body":{"injectables/LogService.html":{}}}],["this.http.post(`${this.commonurl}/users/updatepassword",{"_index":956,"title":{},"body":{"injectables/LogService.html":{}}}],["this.http.post(`${this.commonurl}/users/us",{"_index":935,"title":{},"body":{"injectables/LogService.html":{}}}],["this.http.post(this.commonurl",{"_index":302,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.http.request(new",{"_index":949,"title":{},"body":{"injectables/LogService.html":{}}}],["this.id",{"_index":1261,"title":{},"body":{"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{}}}],["this.islog",{"_index":1322,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.keyadmin",{"_index":782,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.keyadmin.substr",{"_index":784,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.lat",{"_index":1275,"title":{},"body":{"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["this.launchform",{"_index":1171,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["this.load",{"_index":750,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.log",{"_index":1116,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.log.closesess",{"_index":1340,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.log.currentus",{"_index":1326,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.log.deleteuser(username,this.formdelete.value.password",{"_index":1341,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.log.getupdates().subscribe(log",{"_index":1332,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.log.updatepassword(passwd",{"_index":1333,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.login(username,password",{"_index":943,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logservice.closesess",{"_index":1133,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logservice.createuser(this.form.value.usernam",{"_index":1176,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["this.logservice.currentus",{"_index":1117,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logservice.currentuser.username.replace(/['\"]+/g",{"_index":1118,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logservice.getupdates().subscribe(log",{"_index":1115,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logservice.login(data.usernam",{"_index":1142,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logservice.logrefresh",{"_index":1113,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logsubscript",{"_index":1114,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["this.logsubscription.unsubscrib",{"_index":1109,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["this.lon",{"_index":1274,"title":{},"body":{"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["this.main",{"_index":536,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.main.grnd_level",{"_index":1475,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.humid",{"_index":1466,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.pressur",{"_index":1464,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.sea_level",{"_index":1473,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.temp",{"_index":1462,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.temp_max",{"_index":1470,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.temp_min",{"_index":1468,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.maxlengtherror",{"_index":1002,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.minlengtherror",{"_index":1001,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.nam",{"_index":1260,"title":{},"body":{"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{}}}],["this.notempti",{"_index":1122,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.open",{"_index":1127,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.password",{"_index":229,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["this.passwordrequirederror",{"_index":1003,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.profil",{"_index":1111,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.profile.replace(/['\"]+/g",{"_index":1112,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.pwd",{"_index":1342,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.rain",{"_index":560,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.rainandsnowchart",{"_index":655,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.rainandsnowservice.getrainandsnowchart(this.forecastvalu",{"_index":672,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.raincolor",{"_index":666,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.relog",{"_index":1102,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.result",{"_index":1452,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.result.push(this.aux",{"_index":1497,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.route.params.subscribe((valu",{"_index":399,"title":{},"body":{"components/CityComponent.html":{}}}],["this.route.snapshot.parammap.get('id",{"_index":408,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["this.route.snapshot.parammap.get('nam",{"_index":409,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["this.router.navigate(['/initi",{"_index":952,"title":{},"body":{"injectables/LogService.html":{}}}],["this.router.navigate(['initi",{"_index":1327,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.router.navigate(['us",{"_index":1013,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.router.url.includes(`/initi",{"_index":1099,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.routesubscription.unsubscrib",{"_index":1107,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.rx",{"_index":413,"title":{},"body":{"components/CityComponent.html":{}}}],["this.rxciti",{"_index":754,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.rxcity.id",{"_index":757,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.rxcity.sys.countri",{"_index":758,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.savedc",{"_index":1120,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.savedcities.length",{"_index":1119,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.savedcitiesservice.deletec",{"_index":881,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["this.savedcitiesservice.getsavedc",{"_index":877,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["this.savedcitiesservice.save(new",{"_index":352,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.savedcitiesservice.save(this.cityshown",{"_index":438,"title":{},"body":{"components/CityComponent.html":{}}}],["this.setcurrentus",{"_index":1321,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.si",{"_index":1262,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["this.snackbar.open",{"_index":917,"title":{},"body":{"injectables/LogService.html":{}}}],["this.snackbar.open(\"favourit",{"_index":1130,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.snackbar.open(\"log",{"_index":912,"title":{},"body":{"injectables/LogService.html":{}}}],["this.snackbar.open(`${this.cityshown.nam",{"_index":439,"title":{},"body":{"components/CityComponent.html":{}}}],["this.snow",{"_index":564,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.sys.countri",{"_index":1264,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["this.sys.id",{"_index":1490,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.sys.messag",{"_index":1491,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.sys.sunris",{"_index":1492,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.sys.sunset",{"_index":1493,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.sys.typ",{"_index":1489,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.temperatur",{"_index":660,"title":{},"body":{"components/GraphsComponent.html":{},"injectables/TemperatureService.html":{}}}],["this.temperaturechart",{"_index":654,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.temperaturecolor",{"_index":663,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.temperatureservice.gettemperaturechart(this.forecastvalu",{"_index":668,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.temperaturesmax",{"_index":1366,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["this.temperaturesmin",{"_index":1369,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["this.toggleadmin",{"_index":786,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.updated.asobserv",{"_index":603,"title":{},"body":{"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["this.updated.next(fals",{"_index":873,"title":{},"body":{"injectables/LogService.html":{}}}],["this.updated.next(this.c",{"_index":1223,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["this.updated.next(this.forecastvalu",{"_index":605,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["this.updated.next(tru",{"_index":910,"title":{},"body":{"injectables/LogService.html":{}}}],["this.updateuserc",{"_index":879,"title":{},"body":{"injectables/LogService.html":{}}}],["this.usernam",{"_index":227,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["this.usernamerequirederror",{"_index":1004,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.valuesdisplay",{"_index":418,"title":{},"body":{"components/CityComponent.html":{}}}],["this.wasfound",{"_index":752,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.weath",{"_index":530,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.weather.foreach(w",{"_index":1455,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.weather.push(w",{"_index":555,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["this.weather.push(wthr",{"_index":1424,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.weathernow",{"_index":416,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weathernow.coord",{"_index":437,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weathernow.displayvalu",{"_index":419,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weathernow.set(rx",{"_index":417,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weathernow.sys.countri",{"_index":435,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weatherservice.getforecast(id).subscribe((rx",{"_index":657,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.weatherservice.getforecast(this.cityshown.id).subscribe((rx",{"_index":424,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weatherservice.getweather(this.cityshown.id).subscribe(rx",{"_index":412,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weatherservice.getweatherbycityname(this.city).subscribe(rx",{"_index":753,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.weatherurl",{"_index":1515,"title":{},"body":{"injectables/WeatherService.html":{}}}],["this.wind",{"_index":479,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.wind.deg",{"_index":1478,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.wind.spe",{"_index":1477,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.yousurebutton",{"_index":1125,"title":{},"body":{"components/NavigationComponent.html":{}}}],["through",{"_index":444,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["tick",{"_index":502,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["time",{"_index":651,"title":{},"body":{"components/GraphsComponent.html":{}}}],["titl",{"_index":117,"title":{},"body":{"components/AppComponent.html":{}}}],["toggleadmin",{"_index":689,"title":{},"body":{"components/InitialComponent.html":{}}}],["togglefavourit",{"_index":1068,"title":{},"body":{"components/NavigationComponent.html":{}}}],["togglesess",{"_index":1069,"title":{},"body":{"components/NavigationComponent.html":{}}}],["token",{"_index":832,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["train",{"_index":77,"title":{},"body":{"components/AboutComponent.html":{}}}],["transfer",{"_index":512,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["tri",{"_index":889,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["trigger",{"_index":778,"title":{},"body":{"components/InitialComponent.html":{}}}],["true",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"miscellaneous/variables.html":{}}}],["two",{"_index":790,"title":{},"body":{"components/InitialComponent.html":{}}}],["type",{"_index":119,"title":{},"body":{"components/AppComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["undefin",{"_index":293,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{}}}],["uniqu",{"_index":1513,"title":{},"body":{"injectables/WeatherService.html":{}}}],["unit",{"_index":1593,"title":{},"body":{"index.html":{}}}],["unsubscrib",{"_index":1104,"title":{},"body":{"components/NavigationComponent.html":{}}}],["up",{"_index":1015,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["updat",{"_index":407,"title":{},"body":{"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{}}}],["updatepassword",{"_index":843,"title":{},"body":{"injectables/LogService.html":{}}}],["updatepassword(password",{"_index":860,"title":{},"body":{"injectables/LogService.html":{}}}],["updateuserc",{"_index":844,"title":{},"body":{"injectables/LogService.html":{}}}],["upload",{"_index":252,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{}}}],["upload(citieslist",{"_index":274,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["uploadal",{"_index":690,"title":{},"body":{"components/InitialComponent.html":{}}}],["uppercas",{"_index":796,"title":{},"body":{"components/InitialComponent.html":{}}}],["url",{"_index":214,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/NavigationComponent.html":{}}}],["us",{"_index":48,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"injectables/WeatherService.html":{},"index.html":{}}}],["useclass",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":204,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/CitiesServerService.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["user'",{"_index":890,"title":{},"body":{"injectables/LogService.html":{}}}],["user'},{'nam",{"_index":107,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["user.compon",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/SettingsComponent.html":{}}}],["user.component.css",{"_index":1159,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["user.component.html",{"_index":1160,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["user.component.t",{"_index":1158,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"coverage.html":{}}}],["user.component.ts:14",{"_index":1169,"title":{},"body":{"components/NewUserComponent.html":{}}}],["user.component.ts:15",{"_index":1165,"title":{},"body":{"components/NewUserComponent.html":{}}}],["user.component.ts:22",{"_index":1167,"title":{},"body":{"components/NewUserComponent.html":{}}}],["user.component.ts:26",{"_index":1166,"title":{},"body":{"components/NewUserComponent.html":{}}}],["user.component.ts:37",{"_index":1168,"title":{},"body":{"components/NewUserComponent.html":{}}}],["user.component.ts:51",{"_index":1191,"title":{},"body":{"classes/PasswordValidation.html":{}}}],["user/new",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"coverage.html":{}}}],["user_",{"_index":936,"title":{},"body":{"injectables/LogService.html":{}}}],["usernam",{"_index":221,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"classes/UserServer.html":{}}}],["usernamerequirederror",{"_index":967,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["userserv",{"_index":220,"title":{"classes/UserServer.html":{}},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/LogService.html":{},"components/SettingsComponent.html":{},"classes/UserServer.html":{},"coverage.html":{}}}],["ussernam",{"_index":1021,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["util",{"_index":788,"title":{},"body":{"components/InitialComponent.html":{}}}],["valid",{"_index":987,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["validators.compose([validators.minlength(5",{"_index":1173,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["validators.maxlength(20",{"_index":992,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["validators.maxlength(25",{"_index":1174,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["validators.minlength(4",{"_index":991,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["validators.requir",{"_index":993,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["valu",{"_index":121,"title":{},"body":{"components/AppComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"miscellaneous/variables.html":{}}}],["values.servic",{"_index":393,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["values.service.t",{"_index":582,"title":{},"body":{"injectables/ForecastValuesService.html":{},"coverage.html":{}}}],["values.service.ts:11",{"_index":599,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:12",{"_index":601,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:13",{"_index":598,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:15",{"_index":591,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:19",{"_index":597,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:24",{"_index":593,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:28",{"_index":595,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:32",{"_index":590,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:34",{"_index":589,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["valuesdisplay",{"_index":369,"title":{},"body":{"components/CityComponent.html":{}}}],["valuetim",{"_index":1286,"title":{},"body":{"components/SettingsComponent.html":{}}}],["var",{"_index":86,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["variabl",{"_index":1410,"title":{"miscellaneous/variables.html":{}},"body":{"classes/WeatherNow.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":1577,"title":{},"body":{"index.html":{}}}],["via",{"_index":1595,"title":{},"body":{"index.html":{}}}],["view",{"_index":40,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["void",{"_index":27,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{}}}],["volum",{"_index":1482,"title":{},"body":{"classes/WeatherNow.html":{}}}],["válido",{"_index":334,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["w",{"_index":546,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["w.descript",{"_index":553,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["w.icon",{"_index":551,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["w.id",{"_index":549,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["w.main",{"_index":547,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["wallpap",{"_index":722,"title":{},"body":{"components/InitialComponent.html":{}}}],["want",{"_index":1347,"title":{},"body":{"components/SettingsComponent.html":{}}}],["wasfound",{"_index":687,"title":{},"body":{"components/InitialComponent.html":{}}}],["weather",{"_index":60,"title":{"classes/Weather.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"coverage.html":{},"index.html":{}}}],["weather.descript",{"_index":554,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["weather.icon",{"_index":552,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["weather.id",{"_index":550,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["weather.main",{"_index":548,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["weather.servic",{"_index":391,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{}}}],["weatherangular",{"_index":1575,"title":{},"body":{"index.html":{}}}],["weathernow",{"_index":370,"title":{"classes/WeatherNow.html":{}},"body":{"components/CityComponent.html":{},"classes/WeatherNow.html":{},"coverage.html":{}}}],["weatherservic",{"_index":375,"title":{"injectables/WeatherService.html":{}},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/WeatherService.html":{},"coverage.html":{}}}],["weatherurl",{"_index":1501,"title":{},"body":{"injectables/WeatherService.html":{}}}],["web",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["went",{"_index":947,"title":{},"body":{"injectables/LogService.html":{}}}],["wind",{"_index":462,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["wind.servic",{"_index":649,"title":{},"body":{"components/GraphsComponent.html":{}}}],["wind.service.t",{"_index":458,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"coverage.html":{}}}],["wind.service.ts:10",{"_index":467,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["wind.service.ts:11",{"_index":470,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["wind.service.ts:12",{"_index":468,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["wind.service.ts:13",{"_index":469,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["wind.service.ts:15",{"_index":466,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["wind.service.ts:86",{"_index":464,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["window:keyup",{"_index":693,"title":{},"body":{"components/InitialComponent.html":{}}}],["window:keyup(ev",{"_index":699,"title":{},"body":{"components/InitialComponent.html":{}}}],["without",{"_index":318,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/NavigationComponent.html":{}}}],["work",{"_index":833,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["worker",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["worker.j",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["written",{"_index":779,"title":{},"body":{"components/InitialComponent.html":{}}}],["wrong",{"_index":918,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["wthr",{"_index":1423,"title":{},"body":{"classes/WeatherNow.html":{}}}],["xax",{"_index":500,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["yax",{"_index":501,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["yaxisid",{"_index":496,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["ye",{"_index":1156,"title":{},"body":{"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{}}}],["yor",{"_index":1154,"title":{},"body":{"components/NavigationComponent.html":{}}}],["yousur",{"_index":1070,"title":{},"body":{"components/NavigationComponent.html":{}}}],["yousurebutton",{"_index":1062,"title":{},"body":{"components/NavigationComponent.html":{}}}],["zone.j",{"_index":1572,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AboutComponent.html":{"url":"components/AboutComponent.html","title":"component - AboutComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AboutComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/about/about.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-about\n            \n\n            \n                styleUrls\n                about.component.css\n            \n\n\n\n            \n                templateUrl\n                ./about.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/about/about.component.ts:9\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/about/about.component.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css']\n})\n/**This component shows somw general information about the app */\nexport class AboutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n    const body = document.getElementsByTagName(\"body\");\n    body[0].classList.add(\"initial-view\"); //Sets tbe background image in the styles.css\n  }\n\n}\n\n    \n\n    \n        \n  \n    This application has been developed using\n    Angular as the framework to create the client and\n    Ontimize EE to provide session and suggested cities service.\n  \n  \n  \n    The weather data is obtained from the API of\n    OpenWeatherMap in a free subscription limited to 60 queries per minute.\n  \n  \n  \n    Every images and icons have been obtained from free sources and this project generates no economical proffits. The purpose\n    of this app was training me as a developer during a internship in\n    Imatia Innovation.\n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      This application has been developed using    Angular as the framework to create the client and    Ontimize EE to provide session and suggested cities service.          The weather data is obtained from the API of    OpenWeatherMap in a free subscription limited to 60 queries per minute.          Every images and icons have been obtained from free sources and this project generates no economical proffits. The purpose    of this app was training me as a developer during a internship in    Imatia Innovation.  '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AboutComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                app.component.css\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        title:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Weather-Angular'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Weather-Angular';\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n  Modules\n  AppModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAboutComponent\n\nAboutComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAboutComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nCityComponent\n\nCityComponent\n\nAppModule -->\n\nCityComponent->AppModule\n\n\n\n\n\nGraphsComponent\n\nGraphsComponent\n\nAppModule -->\n\nGraphsComponent->AppModule\n\n\n\n\n\nInitialComponent\n\nInitialComponent\n\nAppModule -->\n\nInitialComponent->AppModule\n\n\n\n\n\nInterceptorComponent\n\nInterceptorComponent\n\nAppModule -->\n\nInterceptorComponent->AppModule\n\n\n\n\n\nLogginDialogComponent\n\nLogginDialogComponent\n\nAppModule -->\n\nLogginDialogComponent->AppModule\n\n\n\n\n\nNavigationComponent\n\nNavigationComponent\n\nAppModule -->\n\nNavigationComponent->AppModule\n\n\n\n\n\nNewUserComponent\n\nNewUserComponent\n\nAppModule -->\n\nNewUserComponent->AppModule\n\n\n\n\n\nSettingsComponent\n\nSettingsComponent\n\nAppModule -->\n\nSettingsComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                AboutComponent\n                            \n                            \n                                AppComponent\n                            \n                            \n                                CityComponent\n                            \n                            \n                                GraphsComponent\n                            \n                            \n                                InitialComponent\n                            \n                            \n                                InterceptorComponent\n                            \n                            \n                                LogginDialogComponent\n                            \n                            \n                                NavigationComponent\n                            \n                            \n                                NewUserComponent\n                            \n                            \n                                SettingsComponent\n                            \n                    \n                \n                \n                    EntryComponents\n                    \n                            \n                                LogginDialogComponent\n                            \n                    \n                \n                \n                    Imports\n                    \n                            \n                                    AppRoutingModule\n                            \n                            \n                                    MaterialModule\n                            \n                    \n                \n                \n                    Bootstrap\n                    \n                            \n                                AppComponent\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { InitialComponent } from './initial/initial.component';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './/app-routing.module';\nimport { CityComponent } from './city/city.component';\nimport { NavigationComponent } from './navigation/navigation.component';\n\nimport { MaterialModule } from './material/material.module';\nimport { GraphsComponent } from './graphs/graphs.component';\n\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\nimport { LogginDialogComponent } from './loggin-dialog/loggin-dialog.component';\nimport { MatDialogModule, MatSnackBarModule } from '@angular/material';\nimport { ReactiveFormsModule} from '@angular/forms';\nimport { NewUserComponent } from './new-user/new-user.component';\nimport { SettingsComponent } from './settings/settings.component';\nimport { AboutComponent } from './about/about.component';\nimport { InterceptorComponent } from './interceptor/interceptor.component';\nimport {HTTP_INTERCEPTORS} from '@angular/common/http';\n\n\n\n@NgModule({ //Tells how to compile and launch the application\n  declarations: [\n    AppComponent,\n    InitialComponent,\n    CityComponent,\n    NavigationComponent,\n    GraphsComponent,\n    LogginDialogComponent,\n    NewUserComponent,\n    SettingsComponent,\n    AboutComponent,\n    InterceptorComponent,\n  ],\n  imports: [\n    BrowserModule,\n    MaterialModule,\n    FormsModule,\n    HttpClientModule,\n    AppRoutingModule,\n    ServiceWorkerModule.register('/ngsw-worker.js', { enabled: environment.production }),\n    MatDialogModule,\n    ReactiveFormsModule,\n    MatSnackBarModule\n  ],\n  providers: [{\n    provide: HTTP_INTERCEPTORS,\n    useClass: InterceptorComponent,\n    multi: true,\n  }],\n  bootstrap: [AppComponent], //root component that Angular inserts into the index.html host web page\n  entryComponents: [LogginDialogComponent]\n})\nexport class AppModule { }\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n  Modules\n  AppRoutingModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n        \n\n        \n            \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { InitialComponent } from './initial/initial.component';\nimport { CityComponent } from './city/city.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatButtonModule, MatCheckboxModule } from '@angular/material';\nimport { GraphsComponent } from './graphs/graphs.component';\nimport { NewUserComponent } from './new-user/new-user.component';\nimport { SettingsComponent } from './settings/settings.component';\nimport { AboutComponent } from './about/about.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/initial', pathMatch: 'full' },\n  { path: 'initial', component: InitialComponent },\n  { path: 'city/:id/:name', component: CityComponent },\n  { path: 'graph', component: GraphsComponent },\n  { path: 'user', component: NewUserComponent },\n  { path: 'settings', component: SettingsComponent },\n  { path: 'about', component: AboutComponent },\n  { path: 'graphs/:id/:name', component: GraphsComponent }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes),\n    BrowserAnimationsModule,\n    MatButtonModule,\n    MatCheckboxModule\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n/*\nThis is the routing module. It is responsible for the navigation across the different components, redirecting the application to the right one for each URL.\n*/\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CitiesResponse.html":{"url":"classes/CitiesResponse.html","title":"class - CitiesResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  CitiesResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/userServer.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        data:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SavedCity } from \"./savedCity\";\n\nexport class UserServer {\n    username : string;\n    password : string;\n    favouriteCities : string;\n    citiesId : Array;\n    citiesList : Array;\n\n    constructor(){}\n    \n\n    display(): string{\n        return \"Username: \" + this.username + \"\\nPassword: \" + this.password + \"\\nCities ids: \" + this.citiesId;\n    }\n\n    setFromList(list : Array){\n        this.favouriteCities = list.map(item => item.id).join(',');\n    }\n}\n\n\n\n\n//New\nexport class CitiesResponse {\n    data : Array;\n}\n\nexport class CitiesResponseUnit {\n    CITIES : string;\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CitiesResponseUnit.html":{"url":"classes/CitiesResponseUnit.html","title":"class - CitiesResponseUnit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  CitiesResponseUnit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/userServer.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                CITIES\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CITIES\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        CITIES:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:31\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SavedCity } from \"./savedCity\";\n\nexport class UserServer {\n    username : string;\n    password : string;\n    favouriteCities : string;\n    citiesId : Array;\n    citiesList : Array;\n\n    constructor(){}\n    \n\n    display(): string{\n        return \"Username: \" + this.username + \"\\nPassword: \" + this.password + \"\\nCities ids: \" + this.citiesId;\n    }\n\n    setFromList(list : Array){\n        this.favouriteCities = list.map(item => item.id).join(',');\n    }\n}\n\n\n\n\n//New\nexport class CitiesResponse {\n    data : Array;\n}\n\nexport class CitiesResponseUnit {\n    CITIES : string;\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CitiesServerService.html":{"url":"injectables/CitiesServerService.html","title":"injectable - CitiesServerService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  CitiesServerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/cities-server.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization\n                            \n                            \n                                citiesList\n                            \n                            \n                                commonUrl\n                            \n                            \n                                contentType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                complexSearch\n                            \n                            \n                                complexSearchId\n                            \n                            \n                                loadFavourites\n                            \n                            \n                                log\n                            \n                            \n                                searchById\n                            \n                            \n                                searchByName\n                            \n                            \n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, savedCitiesService: SavedCitiesService)\n                    \n                \n                        \n                            \n                                Defined in src/app/cities-server.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        savedCitiesService\n                                                  \n                                                        \n                                                                    SavedCitiesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            complexSearch\n                            \n                            \n                        \n                    \n                \n                \n                    \ncomplexSearch(value: string, param: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:89\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        param\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            complexSearchId\n                            \n                            \n                        \n                    \n                \n                \n                    \ncomplexSearchId(value: number, param: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:107\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        param\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadFavourites\n                            \n                            \n                        \n                    \n                \n                \n                    \nloadFavourites(cities: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:146\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cities\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            log\n                            \n                            \n                        \n                    \n                \n                \n                    \nlog()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:84\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            searchById\n                            \n                            \n                        \n                    \n                \n                \n                    \nsearchById(city: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:125\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        city\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     SavedCity\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            searchByName\n                            \n                            \n                        \n                    \n                \n                \n                    \nsearchByName(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:53\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            upload\n                            \n                            \n                        \n                    \n                \n                \n                    \nupload(citiesList: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:26\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        citiesList\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            authorization\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        authorization:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGlvbi10aW1lIjoxNTI4OTU2OTY0MTE2LCJ1c2VybmFtZSI6ImRlbW8ifQ.xKAhjdQ9yEy2AuS8Dp3qtoBmEFL0wAclsK4LRmKZ9nE'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesList:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            commonUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        commonUrl:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"http://localhost:8080/citiesservice-server/services/rest/cities/city\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contentType\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contentType:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'application/json'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:18\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { SavedCity } from './savedCity';\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { ServerResponse, ServedCity } from './servedCity'\nimport { SavedCitiesService } from './saved-cities.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CitiesServerService {\n\n  citiesList: Array;\n\n  commonUrl = \"http://localhost:8080/citiesservice-server/services/rest/cities/city\";\n  contentType = 'application/json';\n  authorization = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGlvbi10aW1lIjoxNTI4OTU2OTY0MTE2LCJ1c2VybmFtZSI6ImRlbW8ifQ.xKAhjdQ9yEy2AuS8Dp3qtoBmEFL0wAclsK4LRmKZ9nE';\n\n  constructor(\n    private http: HttpClient,\n    private savedCitiesService: SavedCitiesService\n  ) { }\n\n  upload(citiesList: Array): Boolean {\n    //Used to fill in the database\n    if (citiesList === undefined) {\n      return false;\n    }\n\n    let ok = true;\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': this.contentType,\n        'Authorization': this.authorization\n      })\n    };\n    citiesList.forEach(city => {\n      this.http.post(this.commonUrl, city.insertBody(), httpOptions).subscribe(rx => {\n        //We subscribe for the insert results\n        console.log(\"Upload request results\");\n        console.log(rx);\n      },\n        error => {\n          console.log(\"Tried to upload an existing city: \" + city.name);\n          ok = false;\n        });\n    });\n    return ok;\n  }\n\n  searchByName(name: string): Array {\n    const ans = new Array();\n\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': this.contentType,\n        'Authorization': this.authorization\n      })\n    };\n\n\n    this.http.post(this.commonUrl + \"/search\", this.complexSearch(name, \"NAME\"), httpOptions).subscribe(rx => {\n      //We subscribe for the search results\n      if (rx.data.length === undefined) {\n        console.log(\"Query without results\");\n        return ans;\n      }\n      rx.data.forEach(item => {\n        ans.push(\n          new SavedCity(item.NAME, item.ID.toString(), item.COUNTRY, item.LON, item.LAT)\n        );\n      }, error => {\n        console.log(\"Query to city dataBase failed\");\n      });\n    },\n    );\n\n\n    return ans;\n  }\n\n  log(): Boolean {\n    console.log(\"LOG\");\n    return true;\n  }\n\n  complexSearch(value: string, param: string): string {\n    //primero comprobamos que el parámetro es válido\n    if (param !== \"NAME\" && param !== \"ID\" && param !== \"COUNTRY\" && param !== \"LAT\" && param !== \"LON\") {\n      param = \"NAME\";\n    }\n\n    return `{\n      \"filter\": {\n        \"@basic_expression\":{\n          \"lop\" : \"` + param + `\",\n          \"op\" : \"LIKE\",\n          \"rop\" : \"%` + value + `%\"\n        }\n      },\n      \"columns\":[ \"ID\",\"COUNTRY\",\"LAT\",\"LON\",\"NAME\"]\n     }`;\n  }\n\n  complexSearchId(value: number, param: string): string {\n    //primero comprobamos que el parámetro es válido\n    if (param !== \"NAME\" && param !== \"ID\" && param !== \"COUNTRY\" && param !== \"LAT\" && param !== \"LON\") {\n      param = \"NAME\";\n    }\n\n    return `{\n      \"filter\": {\n        \"@basic_expression\":{\n          \"lop\" : \"` + param + `\",\n          \"op\" : \"=\",\n          \"rop\" : ` + value + `\n        }\n      },\n      \"columns\":[ \"ID\",\"COUNTRY\",\"LAT\",\"LON\",\"NAME\"]\n     }`;\n  }\n\n  searchById(city: number): SavedCity {\n    let ans: SavedCity;\n\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': this.contentType,\n        'Authorization': this.authorization\n      })\n    };\n\n    this.http.post(this.commonUrl + \"/search\", this.complexSearchId(city, \"ID\"), httpOptions).subscribe(rx => {\n      //We subscribe for the search results\n      console.log(rx);\n      rx.data.forEach(item => {\n        ans = new SavedCity(item.NAME, item.ID.toString(), item.COUNTRY, item.LON, item.LAT);\n      });\n    });\n\n    return ans;\n  }\n\n  loadFavourites(cities: Array) {\n    //Queries every city by id in the user and stores it in localStorage as favourites\n\n    /*let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': this.contentType,\n        'Authorization': this.authorization\n      })\n    };*/\n    cities.forEach(city => {\n      this.http.post(this.commonUrl + \"/search\", this.complexSearchId(parseInt(city), \"ID\")).subscribe(rx =>\n        this.savedCitiesService.save(new SavedCity(rx.data[0].NAME, rx.data[0].ID.toString(), rx.data[0].COUNTRY, rx.data[0].LON, rx.data[0].LAT))\n      );\n    });\n  }\n\n}\n/* This service interacts with the server Ontimize, with the service of cities */\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CityComponent.html":{"url":"components/CityComponent.html","title":"component - CityComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CityComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/city/city.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-city\n            \n\n            \n                styleUrls\n                city.component.css\n            \n\n\n\n            \n                templateUrl\n                ./city.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cityShown\n                            \n                            \n                                dataSource\n                            \n                            \n                                displayedColumns\n                            \n                            \n                                forecast\n                            \n                            \n                                rx\n                            \n                            \n                                showForecast\n                            \n                            \n                                valuesDisplayed\n                            \n                            \n                                weatherNow\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCityWeather\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                saveCity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(route: ActivatedRoute, weatherService: WeatherService, savedCitiesService: SavedCitiesService, forecastValuesService: ForecastValuesService, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/city/city.component.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        weatherService\n                                                  \n                                                        \n                                                                    WeatherService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        savedCitiesService\n                                                  \n                                                        \n                                                                    SavedCitiesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        forecastValuesService\n                                                  \n                                                        \n                                                                    ForecastValuesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCityWeather\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCityWeather()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/city/city.component.ts:50\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/city/city.component.ts:47\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saveCity\n                            \n                            \n                        \n                    \n                \n                \n                    \nsaveCity()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/city/city.component.ts:85\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cityShown\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cityShown:     SavedCity\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dataSource\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dataSource:     \n\n                    \n                \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            displayedColumns\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        displayedColumns:     []\n\n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['parameter', 'value']\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            forecast\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        forecast:     \n\n                    \n                \n                    \n                        \n                            Default value : new Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rx\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rx:     Object\n\n                    \n                \n                    \n                        \n                            Type :     Object\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            showForecast\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        showForecast:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valuesDisplayed\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        valuesDisplayed:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            weatherNow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        weatherNow:     WeatherNow\n\n                    \n                \n                    \n                        \n                            Type :     WeatherNow\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { SavedCity } from '../savedCity';\nimport { WeatherService } from '../weather.service';\nimport { WeatherNow } from '../weatherNow';\nimport { ActivatedRoute } from '@angular/router';\nimport { Location } from '@angular/common';\n\nimport { SavedCitiesService } from '../saved-cities.service';\nimport { ForecastValuesService } from '../forecast-values.service';\n\nimport { MatTableDataSource } from '@angular/material';\n\nimport { Data, Forecast, RespuestaForecast } from './data';\n\nimport { MatSnackBar } from '@angular/material'\n\n\n@Component({\n  selector: 'app-city',\n  templateUrl: './city.component.html',\n  styleUrls: ['./city.component.css']\n})\nexport class CityComponent implements OnInit {\n\n  cityShown: SavedCity;\n  weatherNow: WeatherNow;\n  rx: Object;\n  valuesDisplayed: Array;\n  dataSource;\n  displayedColumns = ['parameter', 'value'];\n  forecast = new Array();\n  showForecast = false;\n\n  constructor(\n    private route: ActivatedRoute,\n    private weatherService: WeatherService,\n    private savedCitiesService: SavedCitiesService,\n    private forecastValuesService: ForecastValuesService,\n    private snackBar : MatSnackBar\n  ) {\n    //listen to a change in the path to refresh info\n    this.route.params.subscribe((value: PopStateEvent) => {\n      this.getCityWeather();\n    });\n  }\n\n  ngOnInit() {}\n \n\n  getCityWeather() {\n    /**Gets id from URL and asks weather service for the current weather and forecast storing it in Objects and preparing table data. Updates forecast service Data */\n\n    //Get the parameters from the URL\n    const id = this.route.snapshot.paramMap.get('id');\n    const name = this.route.snapshot.paramMap.get('name');\n\n    this.cityShown = new SavedCity(name, id);\n\n    this.weatherService.getWeather(this.cityShown.id).subscribe(rx => {\n      this.rx = rx\n      //Put the values received in the object weatherNow\n      this.weatherNow = new WeatherNow();\n      this.weatherNow.set(rx);\n    \n      //Display the values\n      this.valuesDisplayed = this.weatherNow.displayValues();\n      //dataSource is used to represent the data in the mat table\n      this.dataSource = new MatTableDataSource(this.valuesDisplayed);\n    });\n\n    this.weatherService.getForecast(this.cityShown.id).subscribe((rx: RespuestaForecast) => {\n\n      this.forecast = [];\n\n      Array.from(rx.list).forEach(element => {\n        this.forecast.push(new Forecast(element));\n      });\n      //Updates the service with the current city forecasted values\n      this.forecastValuesService.setValues(this.forecast);\n      this.forecastValuesService.setCity(this.cityShown);\n\n    });\n  }\n\n  saveCity() {\n    /**Completes the cityShown info before storing it to localhost (Favourites) */\n    this.cityShown.country = this.weatherNow.sys.country;\n    this.cityShown.coord = this.weatherNow.coord;\n    this.savedCitiesService.save(this.cityShown);\n\n    this.snackBar.open(`${this.cityShown.name} saved to favourites`, `Ok`, { duration: 3000 });\n  }\n\n\n}\n/* \nThis component shows the information adquired from the microservice through the weather service. It gets the city code from the URL.\n\nFrom this component it is possible to save a new city to the local storage.\n\nAsks for a WeatherNow object with the city weather info to\n\nIncludes in its template a button that routes to the GraphsComponent, which shows several forecast graphs.\n*/\n    \n\n    \n        \n\n\n  This is the current weather data in {{cityShown.name}}:\n\n\n  Show forecast\n\n\n\n\n\n  favorite\n\n\n\n\n\n\n  \n    \n       Parameter \n       {{element.parameter}} \n    \n\n    \n       Value \n       {{element.value}} \n    \n\n    \n    \n  \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  This is the current weather data in {{cityShown.name}}:  Show forecast  favorite             Parameter        {{element.parameter}}                Value        {{element.value}}               '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CityComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudsAndWindService.html":{"url":"injectables/CloudsAndWindService.html","title":"injectable - CloudsAndWindService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  CloudsAndWindService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                chart\n                            \n                            \n                                clouds\n                            \n                            \n                                dates\n                            \n                            \n                                wind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCloudsAndWindChart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:86\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCloudsAndWindChart\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCloudsAndWindChart(forecast: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        forecast\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Chart\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        chart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clouds\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        clouds:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dates\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dates:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        wind:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:11\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Forecast } from '../../city/data';\nimport { Chart } from 'chart.js';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CloudsAndWindService {\n\n  chart: Chart;\n  wind: number[];\n  clouds: number[];\n  dates: string[];\n\n  getCloudsAndWindChart(forecast: Array): Chart {\n    /**Returns a chart with Clouds and Wind data */\n    this.clouds = forecast.map(item => {\n      //extracts a Array with numbers indicating the clouds percentage\n      return item.clouds.all;\n    });\n\n    this.wind = forecast.map(item => {\n      //extracts a Array with numbers indicating wind speed km/h\n      return item.wind.speed;\n    });\n\n    this.dates = forecast.map(item => {\n      //extracts a Array with strings indicating dates\n      return item.dt_txt;\n    });\n\n    this.chart = new Chart('cloudsAndWind', {\n      type: 'bar',\n      data: {\n        labels: this.dates,\n        datasets: [\n\n          {\n            label: 'Wind speed km/h',\n            data: this.wind,\n            borderColor: \"#BADA55\",\n            fill: false,\n            backgroundColor: \"#aaaaaa\",\n            type: 'line', //The wind is not presented in bars\n            yAxisID: 'Wind'\n          }, {\n            label: 'Clouds percentage %',\n            data: this.clouds,\n            borderColor: \"#cccccc\",\n            fill: false,\n            showLine: true,\n            backgroundColor: \"#cccccc\",\n            yAxisID: 'Clouds'\n          }\n        ]\n      },\n      options: {\n\n        legend: {\n          display: true\n        },\n        scales: {\n          xAxes: [{\n            display: true\n          }],\n          yAxes: [{\n            id: 'Wind',\n            display: true,\n            ticks: {\n              min: 0,\n              max: Math.max(...this.wind)\n            }\n          }, {\n            id: 'Clouds',\n            display: true,\n            ticks: {\n              min: 0,\n              max: 100\n            }\n          }],\n        }\n      }\n    });\n\n    return this.chart;\n  }\n\n  constructor() { }\n}\n/** This service gets the forecast values formated and returns a clouds and wind chart*/\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Data.html":{"url":"classes/Data.html","title":"class - Data","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Data\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/city/data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                parameter\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/city/data.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            parameter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        parameter:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        value:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Weather } from '../weather'\n\n\nexport class Data {\n    parameter: string;\n    value: string;\n\n    constructor() { }\n}\n/* Data is used to transfer information as an array of Data to the MatTable in city */\n\nexport class Forecast {\n\n    clouds: { all: number };\n    dt: number;\n    dt_txt: string;\n\n    main: {\n        grnd_level: number,\n        humidity: number,\n        pressure: number,\n        sea_level: number,\n        temp: number,\n        temp_kf: number,\n        temp_max: number,\n        temp_min: number\n    };\n\n    weather: Array;\n    /*\n        id\n        main\n        description\n        icon\n    */\n\n    wind: {\n        speed: number,\n        deg: number\n    }\n\n    rain: number;\n    snow: number;\n    constructor(element: Forecast) {\n        this.weather = new Array();\n\n        this.clouds = element.clouds;\n        this.dt = element.dt;\n        this.dt_txt = element.dt_txt;\n\n        this.main = {\n            grnd_level: element.main.grnd_level,\n            humidity: element.main.humidity,\n            pressure: element.main.pressure,\n            sea_level: element.main.sea_level,\n            temp: element.main.temp,\n            temp_kf: element.main.temp_kf,\n            temp_max: element.main.temp_max,\n            temp_min: element.main.temp_min\n        };\n\n\n        element.weather.forEach((weather: Weather) => {\n            const w = new Weather();\n            w.main = weather.main;\n            w.id = weather.id;\n            w.icon = weather.icon;\n            w.description = weather.description;\n\n            this.weather.push(w);\n        });\n\n        this.wind = {\n            speed: element.wind.speed,\n            deg: element.wind.deg\n        };\n\n        if (element.rain == undefined) {\n            //console.log(\"rain undefined\");\n        } else {\n            this.rain = element.rain[\"3h\"];\n        }\n\n        if (element.snow == undefined) {\n            //console.log(\"snow undefined\");\n        } else {\n            this.snow = element.snow[\"3h\"];\n        }\n\n    }\n}\n/* The object Forecast stores all the information about the weather provided by the service for a certain hour */\n\nexport class RespuestaForecast {\n\n    list: Array;\n\n    constructor() { }\n}\n\n/* \nData types used for sending data to the mat-table, Graph services and managing a server response containing the forecast for several hours.\n*/\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Forecast.html":{"url":"classes/Forecast.html","title":"class - Forecast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Forecast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/city/data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                clouds\n                            \n                            \n                                dt\n                            \n                            \n                                dt_txt\n                            \n                            \n                                main\n                            \n                            \n                                rain\n                            \n                            \n                                snow\n                            \n                            \n                                weather\n                            \n                            \n                                wind\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(element: Forecast)\n                    \n                \n                        \n                            \n                                Defined in src/app/city/data.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                    Forecast\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clouds\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        clouds:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dt:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dt_txt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dt_txt:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            main\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        main:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rain\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rain:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        snow:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            weather\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        weather:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        wind:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:37\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Weather } from '../weather'\n\n\nexport class Data {\n    parameter: string;\n    value: string;\n\n    constructor() { }\n}\n/* Data is used to transfer information as an array of Data to the MatTable in city */\n\nexport class Forecast {\n\n    clouds: { all: number };\n    dt: number;\n    dt_txt: string;\n\n    main: {\n        grnd_level: number,\n        humidity: number,\n        pressure: number,\n        sea_level: number,\n        temp: number,\n        temp_kf: number,\n        temp_max: number,\n        temp_min: number\n    };\n\n    weather: Array;\n    /*\n        id\n        main\n        description\n        icon\n    */\n\n    wind: {\n        speed: number,\n        deg: number\n    }\n\n    rain: number;\n    snow: number;\n    constructor(element: Forecast) {\n        this.weather = new Array();\n\n        this.clouds = element.clouds;\n        this.dt = element.dt;\n        this.dt_txt = element.dt_txt;\n\n        this.main = {\n            grnd_level: element.main.grnd_level,\n            humidity: element.main.humidity,\n            pressure: element.main.pressure,\n            sea_level: element.main.sea_level,\n            temp: element.main.temp,\n            temp_kf: element.main.temp_kf,\n            temp_max: element.main.temp_max,\n            temp_min: element.main.temp_min\n        };\n\n\n        element.weather.forEach((weather: Weather) => {\n            const w = new Weather();\n            w.main = weather.main;\n            w.id = weather.id;\n            w.icon = weather.icon;\n            w.description = weather.description;\n\n            this.weather.push(w);\n        });\n\n        this.wind = {\n            speed: element.wind.speed,\n            deg: element.wind.deg\n        };\n\n        if (element.rain == undefined) {\n            //console.log(\"rain undefined\");\n        } else {\n            this.rain = element.rain[\"3h\"];\n        }\n\n        if (element.snow == undefined) {\n            //console.log(\"snow undefined\");\n        } else {\n            this.snow = element.snow[\"3h\"];\n        }\n\n    }\n}\n/* The object Forecast stores all the information about the weather provided by the service for a certain hour */\n\nexport class RespuestaForecast {\n\n    list: Array;\n\n    constructor() { }\n}\n\n/* \nData types used for sending data to the mat-table, Graph services and managing a server response containing the forecast for several hours.\n*/\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ForecastValuesService.html":{"url":"injectables/ForecastValuesService.html","title":"injectable - ForecastValuesService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  ForecastValuesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/forecast-values.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                            \n                                forecastValues\n                            \n                            \n                                updated\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCity\n                            \n                            \n                                getUpdates\n                            \n                            \n                                getValues\n                            \n                            \n                                setCity\n                            \n                            \n                                setValues\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/forecast-values.service.ts:34\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCity\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCity()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:32\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     SavedCity\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getUpdates\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetUpdates()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable>\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getValues\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetValues()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:24\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Array\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setCity\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetCity(city: SavedCity)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:28\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        city\n                                                        \n                                                                    SavedCity\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setValues\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetValues(values: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            city\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        city:     SavedCity\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            forecastValues\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        forecastValues:     \n\n                    \n                \n                    \n                        \n                            Default value : Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        updated:     \n\n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:12\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Forecast } from './city/data';\nimport { Observable, Subject } from 'rxjs';\nimport { SavedCity } from './savedCity';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ForecastValuesService {\n\n  forecastValues = Array();\n  updated = new Subject();\n  city: SavedCity;\n\n  getUpdates(): Observable>{\n    return >> this.updated.asObservable();\n  }\n\n  setValues(values: Array) {\n    this.forecastValues = values;\n    this.updated.next(this.forecastValues);\n  }\n\n  getValues(): Array {\n    return this.forecastValues;\n  }\n\n  setCity(city: SavedCity){\n    this.city = city;\n  }\n\n  getCity(): SavedCity{\n    return this.city;\n  }\n  \n  constructor() { }\n}\n\n//Simply stores and shares updates of the forecast values used in the current moment in the application\n \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GraphsComponent.html":{"url":"components/GraphsComponent.html","title":"component - GraphsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GraphsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/graphs/graphs.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-graphs\n            \n\n            \n                styleUrls\n                graphs.component.css\n            \n\n\n\n            \n                templateUrl\n                ./graphs.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                            \n                                cloudColor\n                            \n                            \n                                cloudsAndWindChart\n                            \n                            \n                                dates\n                            \n                            \n                                forecastValues\n                            \n                            \n                                rain\n                            \n                            \n                                rainAndSnowChart\n                            \n                            \n                                rainColor\n                            \n                            \n                                snow\n                            \n                            \n                                temperatureChart\n                            \n                            \n                                temperatureColor\n                            \n                            \n                                temperatures\n                            \n                            \n                                temperaturesMax\n                            \n                            \n                                temperaturesMin\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cloudsAndWind\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                rainAndSnow\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(forecastValuesService: ForecastValuesService, temperatureService: TemperatureService, rainAndSnowService: RainAndSnowService, cloudsAndWindService: CloudsAndWindService, weatherService: WeatherService, route: ActivatedRoute)\n                    \n                \n                        \n                            \n                                Defined in src/app/graphs/graphs.component.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        forecastValuesService\n                                                  \n                                                        \n                                                                    ForecastValuesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        temperatureService\n                                                  \n                                                        \n                                                                    TemperatureService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        rainAndSnowService\n                                                  \n                                                        \n                                                                    RainAndSnowService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        cloudsAndWindService\n                                                  \n                                                        \n                                                                    CloudsAndWindService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        weatherService\n                                                  \n                                                        \n                                                                    WeatherService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cloudsAndWind\n                            \n                            \n                        \n                    \n                \n                \n                    \ncloudsAndWind()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:117\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:59\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rainAndSnow\n                            \n                            \n                        \n                    \n                \n                \n                    \nrainAndSnow()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:98\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperature\n                            \n                            \n                        \n                    \n                \n                \n                    \ntemperature()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:78\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            city\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        city:     \n\n                    \n                \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cloudColor\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cloudColor:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cloudsAndWindChart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cloudsAndWindChart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dates\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dates:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            forecastValues\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        forecastValues:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rain\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rain:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rainAndSnowChart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rainAndSnowChart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rainColor\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rainColor:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        snow:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperatureChart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperatureChart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperatureColor\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperatureColor:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperatures\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperatures:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperaturesMax\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperaturesMax:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperaturesMin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperaturesMin:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { ForecastValuesService } from '../forecast-values.service';\nimport { Forecast, RespuestaForecast } from '../city/data';\nimport { TemperatureService } from './temperature/temperature.service';\nimport { RainAndSnowService } from './rainAndSnow/rain-and-snow.service';\nimport { CloudsAndWindService } from './cloudsAndWind/clouds-and-wind.service';\nimport { WeatherService } from '../weather.service';\nimport { ActivatedRoute, Route } from '@angular/router';\n\n@Component({\n  selector: 'app-graphs',\n  templateUrl: './graphs.component.html',\n  styleUrls: ['./graphs.component.css']\n})\nexport class GraphsComponent implements OnInit {\n\n  forecastValues: Array;\n  temperatures: number[];\n  temperaturesMax: number[];\n  temperaturesMin: number[];\n  rain: number[];\n  snow: number[];\n  dates: string[];\n  temperatureChart: Chart;\n  rainAndSnowChart: Chart;\n  cloudsAndWindChart: Chart;\n  city;\n  temperatureColor = \"\";\n  rainColor = \"\";\n  cloudColor = \"\";\n\n  constructor(\n    private forecastValuesService: ForecastValuesService,\n    private temperatureService: TemperatureService,\n    private rainAndSnowService: RainAndSnowService,\n    private cloudsAndWindService: CloudsAndWindService,\n    private weatherService: WeatherService,\n    private route: ActivatedRoute\n  ) {\n    //Updates values from the service\n    this.forecastValues = forecastValuesService.getValues();\n    //Updates the chart every time values change\n    forecastValuesService.getUpdates().subscribe(values => {\n      this.forecastValues = values;\n      //If the city changes, charts do so\n      //Clean charts\n      if (this.temperatureChart) {\n        this.temperatureChart = undefined;\n      }\n      if (this.rainAndSnowChart) {\n        this.rainAndSnowChart = undefined;\n      }\n      if (this.cloudsAndWindChart) {\n        this.cloudsAndWindChart = undefined;\n      }\n    });\n  }\n\n  ngOnInit() {\n\n    this.city = this.route.snapshot.paramMap.get('name');\n    const id = this.route.snapshot.paramMap.get('id');\n\n    this.weatherService.getForecast(id).subscribe((rx: RespuestaForecast) => {\n\n      this.forecastValues = [];\n\n      Array.from(rx.list).forEach(element => {\n        this.forecastValues.push(new Forecast(element));\n      });\n      //Updates the service with the current city forecasted values\n      this.forecastValuesService.setValues(this.forecastValues);\n\n      this.temperature();\n    });\n  }\n\n  temperature() {\n    /**Changes button color to displayed and erases the other charts to show temperatures chart or erases temperatures chart */\n    if (this.temperatureChart === undefined) {\n      this.temperatureColor = \"primary\";\n      this.cloudColor = \"\";\n      this.rainColor = \"\";\n      this.cloudsAndWindChart = undefined;\n      this.rainAndSnowChart = undefined;\n\n      this.forecastValues = this.forecastValuesService.getValues();\n\n      this.temperatureChart = this.temperatureService.getTemperatureChart(this.forecastValues);\n    } else {\n      //Makes the chart dissapear\n      this.temperatureChart = undefined;\n      this.temperatureColor = \"\";\n    }\n\n  }\n\n  rainAndSnow() {\n    /**Changes button color to displayed and erases the other charts to show raind and snow chart or erases raind and snow chart */\n    if (this.rainAndSnowChart === undefined) {\n      this.rainColor = \"primary\";\n      this.temperatureColor = \"\";\n      this.cloudColor = \"\";\n      this.temperatureChart = undefined;\n      this.cloudsAndWindChart = undefined;\n\n      this.forecastValues = this.forecastValuesService.getValues();\n\n      this.rainAndSnowChart = this.rainAndSnowService.getRainAndSnowChart(this.forecastValues);\n    } else {\n      //Makes the chart dissapear\n      this.rainAndSnowChart = undefined;\n      this.rainColor = \"\";\n    }\n  }\n\n  cloudsAndWind() {\n    /**Changes button color to displayed and erases the other charts to show clouds and wind chart or erases clouds and wind chart */\n    if (this.cloudsAndWindChart === undefined) {\n      this.cloudColor = \"primary\";\n      this.temperatureColor = \"\";\n      this.rainColor = \"\";\n      this.temperatureChart = undefined;\n      this.rainAndSnowChart = undefined;\n\n      this.forecastValues = this.forecastValuesService.getValues();\n\n      this.cloudsAndWindChart = this.cloudsAndWindService.getCloudsAndWindChart(this.forecastValues);\n    } else {\n      //Makes the chart dissapear\n      this.cloudsAndWindChart = undefined;\n      this.cloudColor = \"\";\n    }\n  }\n\n}\n/* This component shows and deletes the charts and obtains them from the corresponding services */\n    \n\n    \n        {{city}}\n\n\n\n  \n    \n      Temperature\n    \n    \n    \n      Rain and Snow\n    \n    \n    \n      Clouds and Wind\n    \n  \n\n  \n    \n      {{ temperatureChart }}\n    \n    \n      {{ rainAndSnowChart }}\n    \n    \n      {{ cloudsAndWindChart }}\n    \n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{city}}            Temperature                  Rain and Snow                  Clouds and Wind                  {{ temperatureChart }}              {{ rainAndSnowChart }}              {{ cloudsAndWindChart }}      '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GraphsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/InitialComponent.html":{"url":"components/InitialComponent.html","title":"component - InitialComponent","body":"\n                   \n\n\n\n\n\n  Components\n  InitialComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/initial/initial.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-initial\n            \n\n            \n                styleUrls\n                initial.component.css\n            \n\n\n\n            \n                templateUrl\n                ./initial.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admin\n                            \n                            \n                                citiesList\n                            \n                            \n                                citiesListURL\n                            \n                            \n                                cityMatch\n                            \n                            \n                                found\n                            \n                            \n                                foundCities\n                            \n                            \n                                keyAdmin\n                            \n                            \n                                loading\n                            \n                            \n                                rxCity\n                            \n                            \n                                wasFound\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCitiesList\n                            \n                            \n                                getCity\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                search\n                            \n                            \n                                toggleAdmin\n                            \n                            \n                                uploadAll\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:keyup\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(weatherService: WeatherService, http: HttpClient, citiesServer: CitiesServerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/initial/initial.component.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        weatherService\n                                                  \n                                                        \n                                                                    WeatherService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        citiesServer\n                                                  \n                                                        \n                                                                    CitiesServerService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        city\n                    \n                    \n                            \n                            Type:    string\n\n                            \n                        \n                            Default value: ''\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:31\n                            \n                        \n            \n        \n\n\n\n    \n    HostListeners        \n            \n                \n                    \n                        \n                        \n                            \n                            window:keyup\n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Arguments : '$event' \n                        \n                    \n                \n                    \nwindow:keyup(event: KeyboardEvent)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:128\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCitiesList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCitiesList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:47\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCity\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCity()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:62\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:41\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            search\n                            \n                            \n                        \n                    \n                \n                \n                    \nsearch()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:88\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleAdmin\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoggleAdmin()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:121\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            uploadAll\n                            \n                            \n                        \n                    \n                \n                \n                    \nuploadAll()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:111\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            admin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        admin:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesList:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesListURL\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesListURL:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '../../assets/city.list.json'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cityMatch\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cityMatch:     SavedCity\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            found\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        found:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            foundCities\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        foundCities:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            keyAdmin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        keyAdmin:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loading\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        loading:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'none'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rxCity\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rxCity:     SavedCity\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wasFound\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        wasFound:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'none'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, Input, HostListener } from '@angular/core';\n\nimport { WeatherService } from '../weather.service';\n\nimport { SavedCity } from '../savedCity';\n\nimport { HttpClient } from '@angular/common/http';\n\nimport { CitiesServerService } from '../cities-server.service';\n\n\n\n@Component({\n  selector: 'app-initial',\n  templateUrl: './initial.component.html',\n  styleUrls: ['./initial.component.css']\n})\nexport class InitialComponent implements OnInit {\n\n  rxCity: SavedCity;\n  cityMatch: SavedCity;\n  found = false;\n  loading = 'none';\n  wasFound = 'none';\n  citiesListURL = '../../assets/city.list.json';\n  citiesList: Array;\n  foundCities: Array;\n  admin = false;\n  keyAdmin = \"\";\n\n  @Input() city: string = '';\n\n  constructor(\n    private weatherService: WeatherService,\n    private http: HttpClient,\n    private citiesServer: CitiesServerService\n  ) {\n\n  }\n\n  ngOnInit() {\n    /**The code includes a class in the body that produces from styles.css the display of a wallpaper */\n    const body = document.getElementsByTagName(\"body\");\n    body[0].classList.add(\"initial-view\");\n  }\n\n  getCitiesList() {\n    /**Requests to the assets folder the JSON with all the cities. Heavy download*/\n    this.citiesList = new Array();\n    this.http.get>(this.citiesListURL).subscribe(rx => {\n      //Stores every city in the cities List were searches will be accomplished\n      Array.from(rx).forEach(element => {\n        this.citiesList.push(new SavedCity(element.name, element.id, element.country, element.coord.lon, element.coord.lat));\n      });\n    }\n\n    );\n    //This method isn't compatible with a optimum performance of the application as it consumes too much memory and bandwidth\n  }\n\n\n  getCity() {\n    /**This function looks for a service response searching with a city name*/\n    if (this.city.length == 0) {\n      //If the city field has no value the search is not launched\n      return;\n    }\n\n    this.loading = 'block';\n    this.wasFound = 'none';\n\n    this.weatherService.getWeatherByCityName(this.city).subscribe(rx => {\n      //We subscribe for the search results\n      this.rxCity = rx;\n      this.cityMatch = new SavedCity(this.rxCity.name, this.rxCity.id, this.rxCity.sys.country);\n      this.found = true;\n      this.loading = 'none';\n    },\n      error => {\n        this.found = false;\n        this.loading = 'none';\n        this.wasFound = 'block';\n      });\n\n  }\n\n\n  search(): void {\n    /**If there exist a local list it is used to search, but if not available asks the API for results through getCity and the API for suggestions */\n    if (this.city.length == 0) {\n      //If the city field has no value the search is not launched\n      return;\n    }\n\n    this.getCity(); //Asks the API\n\n    //Search in the cities.JSON is enabled. It produces a performance leakage\n    if ((this.city.length > 0) && (this.citiesList !== undefined)) {\n      this.foundCities = this.citiesList.filter(element => {\n\n        return (element.name.includes(this.city));\n      });\n    }\n\n\n    //Search in the dataBase through the server Ontimize EE\n    this.foundCities = this.citiesServer.searchByName(this.city);\n\n  }\n\n  uploadAll() {\n    /**This function should not be called because it makes the app crash. However, it has been able to make all the inserts correctly in the dataBase.*/\n    this.citiesServer.log();\n    console.log(\n      this.citiesServer.upload(>this.citiesList)\n    );\n\n    console.log(\"complete upload of citiesList to the dataBase\");\n  }\n\n  toggleAdmin() {\n    /**Show/Hide admin options*/\n    this.admin = !this.admin;\n  }\n\n  //Listens to the keyboard and triggers a function to show admin options when \"admin\" is written\n  @HostListener('window:keyup', ['$event'])\n  keyEvent(event: KeyboardEvent) {\n\n    this.keyAdmin = this.keyAdmin + event.key;\n    if (this.keyAdmin.substr(-5) === \"admin\") {\n      this.toggleAdmin();\n      this.keyAdmin = \"\";\n    }\n\n  }\n\n}\n/*\nThis component is meant to show an initial view of the application.\n\nIt has got a search utility with which new cities can be accessed\n\nDisplays two answers from two different sources:\n\n  An answer obtained searching by city name in the API\n\n  An answer obtained searching in the Ontimize EE database through the server OR searching in a local list of cities downloaded from assets\n\nAlso display not recomended actions that may be necessary to perform when administrating the app\n*/\n    \n\n    \n        \n  \n\n    Look for a city: {{ city | uppercase }}\n\n    \n\n      \n        \n      \n      Searching...\n\n    \n  \n\n\n  Search with Weather-Angular!\n\n  \n    {{cityMatch.name}} ({{cityMatch.sys.country}})\n  \n\n  \n    \n    Enable suggestions (may require a 4.2 MB download)\n    Fill in the local dataBase\n  \n  The city searched was not found\n\n  Suggested results: \n  \n     {{found.name}} ({{found.sys.country}}) \n  \n\n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Look for a city: {{ city | uppercase }}                              Searching...        Search with Weather-Angular!      {{cityMatch.name}} ({{cityMatch.sys.country}})            Enable suggestions (may require a 4.2 MB download)    Fill in the local dataBase    The city searched was not found  Suggested results:        {{found.name}} ({{found.sys.country}})     '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'InitialComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/InterceptorComponent.html":{"url":"components/InterceptorComponent.html","title":"component - InterceptorComponent","body":"\n                   \n\n\n\n\n\n  Components\n  InterceptorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/interceptor/interceptor.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                HttpInterceptor\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-interceptor\n            \n\n            \n                styleUrls\n                interceptor.component.css\n            \n\n\n\n            \n                templateUrl\n                ./interceptor.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: LogService)\n                    \n                \n                        \n                            \n                                Defined in src/app/interceptor/interceptor.component.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                    LogService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intercept\n                            \n                            \n                        \n                    \n                \n                \n                    \nintercept(request: HttpRequest, next: HttpHandler)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/interceptor/interceptor.component.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                        \n                                                                    HttpRequest\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        next\n                                                        \n                                                                    HttpHandler\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { LogService } from '../log.service'\n\n@Component({\n  selector: 'app-interceptor',\n  templateUrl: './interceptor.component.html',\n  styleUrls: ['./interceptor.component.css']\n})\nexport class InterceptorComponent implements HttpInterceptor {\n\n  constructor(private auth: LogService) { }\n\n  intercept(request: HttpRequest, next: HttpHandler): Observable> {\n    if (request.method === \"DELETE\") {\n      return next.handle(request);\n    }\n    if (request.url.includes(`http://localhost:8080/citiesservice-server/services/rest/users/login`)) {\n      return next.handle(request);\n    }\n\n    if (request.url.includes(`http://localhost:8080/citiesservice-server/services/rest`)) {\n      request = request.clone({\n        setHeaders: {\n          'Authorization': `${localStorage.getItem(\"Token\")}`,\n          'Content-Type': `application/json`\n        }\n      });\n    }\n\n\n    return next.handle(request);\n  }\n\n}\n/**This component intercepts every outgoing http requests and filters them to perform changes. The most important, adding the current token. */\n    \n\n    \n        \n  interceptor works!\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  interceptor works!'\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'InterceptorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogService.html":{"url":"injectables/LogService.html","title":"injectable - LogService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  LogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/log.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cities\n                            \n                            \n                                commonUrl\n                            \n                            \n                                contentType\n                            \n                            \n                                currentUser\n                            \n                            \n                                exists\n                            \n                            \n                                updated\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeSession\n                            \n                            \n                                createUser\n                            \n                            \n                                deleteBody\n                            \n                            \n                                deleteUser\n                            \n                            \n                                getToken\n                            \n                            \n                                getUpdates\n                            \n                            \n                                logIn\n                            \n                            \n                                logRefresh\n                            \n                            \n                                updatePassword\n                            \n                            \n                                updateUserCities\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(savedCitiesService: SavedCitiesService, http: HttpClient, citiesServerService: CitiesServerService, router: Router, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/log.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        savedCitiesService\n                                                  \n                                                        \n                                                                    SavedCitiesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        citiesServerService\n                                                  \n                                                        \n                                                                    CitiesServerService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            closeSession\n                            \n                            \n                        \n                    \n                \n                \n                    \ncloseSession()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:42\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createUser\n                            \n                            \n                        \n                    \n                \n                \n                    \ncreateUser(username: string, password: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:166\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        username\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        password\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteBody\n                            \n                            \n                        \n                    \n                \n                \n                    \ndeleteBody(username: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:224\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        username\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteUser\n                            \n                            \n                        \n                    \n                \n                \n                    \ndeleteUser(username: string, password: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:204\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        username\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        password\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getToken\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetToken()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getUpdates\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetUpdates()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:37\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logIn\n                            \n                            \n                        \n                    \n                \n                \n                    \nlogIn(username: string, password: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:77\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        username\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        password\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logRefresh\n                            \n                            \n                        \n                    \n                \n                \n                    \nlogRefresh()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:136\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatePassword\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdatePassword(password: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:233\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        password\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updateUserCities\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdateUserCities()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:65\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cities\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cities:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            commonUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        commonUrl:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"http://localhost:8080/citiesservice-server/services/rest\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contentType\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contentType:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'application/json'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUser\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        currentUser:     UserServer\n\n                    \n                \n                    \n                        \n                            Type :     UserServer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exists\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        exists:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        updated:     \n\n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:18\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { SavedCitiesService } from './saved-cities.service';\nimport { SavedCity } from './savedCity';\nimport { Observable, Subject } from 'rxjs';\nimport { HttpClient, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { UserServer, CitiesResponse } from './userServer';\nimport { CitiesServerService } from './cities-server.service';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LogService {\n\n\n  cities: Array;\n  updated = new Subject();\n  exists: Subject;\n  currentUser: UserServer; //Holds the info of the current logged user\n\n  commonUrl = \"http://localhost:8080/citiesservice-server/services/rest\";\n  contentType = 'application/json';\n \n  constructor(\n    private savedCitiesService: SavedCitiesService,\n    private http: HttpClient,\n    private citiesServerService: CitiesServerService,\n    private router: Router,\n    private snackBar: MatSnackBar\n  ) { }\n\n  getToken(): string {\n    /**Returns the Token from localStorage */\n    return `${localStorage.getItem(\"Token\")}`;\n  }\n  getUpdates(): Observable {\n    /**Observable indicating if someone is logged in*/\n    return >this.updated.asObservable();\n  }\n\n  closeSession() {\n    /**Saves the cities to the server and closes session */\n    //Should invalidate the token in the server, yet to do\n    if (this.currentUser === undefined) {\n      this.updated.next(false);\n      return;\n    }\n\n    //save to string favourite cities\n    this.currentUser.setFromList(this.savedCitiesService.getSavedCities());\n    //save the cities that don`t exist yet in the server\n    this.currentUser.citiesList = this.savedCitiesService.getSavedCities();\n    this.citiesServerService.upload(this.currentUser.citiesList);\n\n    this.updateUserCities() //creates the request body and sends it\n    //Remove session data\n    this.savedCitiesService.deleteCities();\n    localStorage.removeItem(\"session\");\n    localStorage.removeItem(\"Token\");\n    this.updated.next(false);\n    this.currentUser = undefined;\n  }\n\n  updateUserCities() {\n    /**Returns the cities update request body and sends it */\n    const body = `{\n      \"CITIES\" : \"` + this.currentUser.favouriteCities + `\"\n    }`;\n\n    this.http.post(`${this.commonUrl}/fav/update`, body).subscribe(() => { }, err => {\n      console.log(\"There's been an error trying to update user's list of cities in the db\");\n      console.log(body);\n    });\n  }\n\n  logIn(username: string, password: string) {\n    /**Asks the server for the user information and stores it to the app memory (currentUser and localStorage) */\n    let citiesList = \"\";\n    //base64 coded\n    let auth = \"Basic \" + btoa(`${username}:${password}`);\n\n\n    this.http.post(`${this.commonUrl}/users/login`, \"\", {\n      headers: new HttpHeaders({\n        'Authorization': auth\n      }),\n      observe: 'response'\n    }).subscribe(res => {\n      //Set the token\n      localStorage.setItem(\"Token\", \"Bearer \" + res.headers.get('X-Auth-Token'));\n\n      //Get the favourite cities\n      this.http.post(`${this.commonUrl}/fav/query`, \"\").subscribe(response => {\n  \n        citiesList = response.data[0].CITIES;\n        //Fill in the cities server service\n        if (citiesList !== \"\") {\n          this.citiesServerService.loadFavourites(citiesList.split(','));\n        }\n\n        localStorage.setItem(\"session\", JSON.stringify(username));\n        this.currentUser = new UserServer();\n\n        this.currentUser.username = username;\n        this.currentUser.password = `Bearer ${res.headers.get('X-Auth-Token')}`;\n        this.currentUser.favouriteCities = citiesList;\n        this.currentUser.citiesId = citiesList.split(',');\n        this.currentUser.citiesList = this.savedCitiesService.getSavedCities();\n\n        this.updated.next(true);\n        //console.log(this.currentUser.display())\n        this.snackBar.open(\"Logged as \" + this.currentUser.username, \"Ok\", {\n          duration: 1500\n        });\n      }, error => {\n        console.log(\"Failure trying to obtain saved cities from the server\");\n      });\n\n\n\n    }, err => {\n      if(err.status === 401){\n        this.snackBar.open( \"Wrong password or username\" , \"Ok\", {\n          duration: 1500\n        });\n        console.log(\"Access denied\");\n      }else{\n      console.log(`There's been a problem with your log in process.`);\n      console.log(err);\n      }\n    });\n  }\n\n\n  logRefresh(){\n    /**Gets back user info in case it is available (the session has not been closed) */\n    let citiesList = \"\";\n    this.http.post(`${this.commonUrl}/fav/query`, \"\").subscribe(response => {\n     \n      citiesList = response.data[0].CITIES;\n      //Fill in the cities server service\n      if (citiesList !== \"\") {\n        this.citiesServerService.loadFavourites(citiesList.split(','));\n      }\n\n      let username = localStorage.getItem(\"session\");\n      this.currentUser = new UserServer();\n\n      this.currentUser.username = username;\n      this.currentUser.password = localStorage.getItem(\"Token\");;\n      this.currentUser.favouriteCities = citiesList;\n      this.currentUser.citiesId = citiesList.split(',');\n      this.currentUser.citiesList = this.savedCitiesService.getSavedCities();\n\n      this.updated.next(true);\n      this.snackBar.open(\"Logged as \" + this.currentUser.username, \"Ok\", {\n        duration: 1500\n      });\n    });\n  }\n\n  \n\n\n  createUser(username: string, password: string){\n    /**Creates a new user using demo demouser token */\n    //Default Token for demo demouser. Don`t delete the demouser in the db because it would be complicated to create any other user afterwards\n    localStorage.setItem(\"Token\",\"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGlvbi10aW1lIjoxNTI4Nzk5MTY4MzgxLCJ1c2VybmFtZSI6ImRlbW8ifQ.vwEZijOag2iCSN0UPRTS8jqre1NGzHCrg6fVkDH2-mw\")\n    this.http.post(`${this.commonUrl}/users/user`,`\n    {\n      \"data\": {\n        \"USER_\": \"${username}\",\n        \"PASSWORD\": \"${password}\",\n        \"NAME\": \"\",\n        \"SURNAME\": \"\",\n        \"EMAIL\": \"\",\n        \"NIF\" : \"\"\n      }\n      \n     }\n    `).subscribe(res => {\n      //console.log(res)\n      this.snackBar.open( `User ${username} successfully created`, \"Ok\", {\n        duration: 2500\n      });\n      this.logIn(username,password);\n    }, err =>{\n      if(err.status === 500){\n        this.snackBar.open( \"This username is already in use\", \"Ok\", {\n          duration: 2500\n        });\n      }else{\n        console.log(\"Something went wrong when creating the user\");\n      }\n    });\n  }\n \n  \n  \n\n  \n\n  deleteUser(username: string, password: string) {\n    /**Asks the server to delete the user corresponding to the username and password in the input */\n    let deleteBody = this.deleteBody(username);\n    let basic = 'Basic ' + btoa(`${username}:${password}`);\n\n    this.http.request(new HttpRequest(\"DELETE\", `${this.commonUrl}/users/user`, deleteBody, {\n      headers: new HttpHeaders({\n        'Content-Type': \"application/json\",\n        'Authorization': basic\n      })\n    })).subscribe(() => {\n      this.snackBar.open( `The user has been deleted`, \"Ok\", {\n        duration: 2500\n      });\n      this.router.navigate(['/initial']);\n    });\n\n\n  }\n\n  deleteBody(username: string): string {\n  /**The service is always going to delete the current logged in user, no matter what the body contains*/\n    return `{\n       \"filter\": {\n         \"USER_\": \"` + username + `\"\n       }\n      }`;\n  }\n\n  updatePassword(password: string){\n    /**Updates current user password */\n    this.http.post(`${this.commonUrl}/users/updatePassword`,`{ \"PASSWORD\" : \"${password}\"}`).subscribe(() => {\n      this.snackBar.open( `Password changed`, \"Ok\", {\n        duration: 2500\n      });\n    }, () => {\n      console.log(\"Something went wrong when changing the password\");\n    });\n  }\n}\n/** This service interacts with the Ontimize Server, with the service of users*/\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LogginDialogComponent.html":{"url":"components/LogginDialogComponent.html","title":"component - LogginDialogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LogginDialogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/loggin-dialog/loggin-dialog.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-loggin-dialog\n            \n\n            \n                styleUrls\n                loggin-dialog.component.css\n            \n\n\n\n            \n                templateUrl\n                ./loggin-dialog.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                form\n                            \n                            \n                                maxLengthError\n                            \n                            \n                                minLengthError\n                            \n                            \n                                password\n                            \n                            \n                                passwordRequiredError\n                            \n                            \n                                username\n                            \n                            \n                                usernameRequiredError\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkErrors\n                            \n                            \n                                newUser\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                submit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialogRef: MatDialogRef, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/loggin-dialog/loggin-dialog.component.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                    MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            checkErrors\n                            \n                            \n                        \n                    \n                \n                \n                    \ncheckErrors()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:42\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            newUser\n                            \n                            \n                        \n                    \n                \n                \n                    \nnewUser()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:64\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:27\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submit\n                            \n                            \n                        \n                    \n                \n                \n                    \nsubmit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:35\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        description:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            form\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        form:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxLengthError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        maxLengthError:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            minLengthError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        minLengthError:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        password:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            passwordRequiredError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        passwordRequiredError:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        username:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            usernameRequiredError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        usernameRequiredError:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nimport { MatDialogRef } from \"@angular/material\";\nimport { Router } from \"@angular/router\";\n\n@Component({\n  selector: 'app-loggin-dialog',\n  templateUrl: './loggin-dialog.component.html',\n  styleUrls: ['./loggin-dialog.component.css']\n})\nexport class LogginDialogComponent implements OnInit {\n\n  form: FormGroup;\n  description: string;\n  username: string;\n  password: string;\n  minLengthError = false;\n  maxLengthError = false;\n  passwordRequiredError = false;\n  usernameRequiredError = false;\n\n  constructor(\n    private dialogRef: MatDialogRef,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      username: new FormControl(this.username, [Validators.minLength(4), Validators.maxLength(20), Validators.required]),\n      password: new FormControl(this.password, [Validators.required])\n    });\n    \n  }\n  \n  submit() {\n    /**If the validation is Ok returns the data and closes the dialog component */\n    this.checkErrors();\n    if (!this.form.valid) { return; }\n    this.dialogRef.close(this.form.value);\n  }\n\n  checkErrors(){\n    /**Shows or hides input help messages */\n    this.minLengthError = this.maxLengthError = this.passwordRequiredError = this.usernameRequiredError = false;\n    if(this.form.get('username').errors !== null){\n      if(this.form.get('username').errors.minlength !== undefined){\n        this.minLengthError = true;\n      }\n      if(this.form.get('username').errors.maxLength !== undefined){\n        this.maxLengthError = true;\n      }\n      if(this.form.get('username').errors.required !== undefined){\n        this.usernameRequiredError = true;\n      }\n    }\n\n    if(this.form.get('password').errors !== null){\n      if(this.form.get('password').errors.required !== undefined){\n        this.passwordRequiredError = true;\n      }\n    }\n  }\n\n  newUser() {\n    /**Closes the dialog component and navigates to the user component */\n    this.dialogRef.close();\n    this.router.navigate(['user']);\n  }\n}\n\n/** This log-in dialog pops up when the sign-in button in the navigation bar is clicked.\n\nIt just launches a form, validates it and returns the data when closed.\n\nAlso, contains a button that routes to the user creation functionality*/\n\n    \n\n    \n        \n\n    Log In\n\n    \n        \n            \n                \n                    \n                \n                Username is too short\n                Username is too long\n                Ussername is required\n            \n            \n                \n                    \n                \n                Password is required\n            \n\n        \n    \n\n    \n        Cancel\n        \n        Log in\n        \n        Sign up\n    \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Log In                                                                                            Username is too short                Username is too long                Ussername is required                                                                                            Password is required                                    Cancel                Log in                Sign up    '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LogginDialogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MaterialModule.html":{"url":"modules/MaterialModule.html","title":"module - MaterialModule","body":"\n                   \n\n\n\n\n  Modules\n  MaterialModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/material/material.module.ts\n        \n\n\n        \n\n        \n            \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  MatButtonModule,\n  MatMenuModule,\n  MatToolbarModule,\n  MatIconModule,\n  MatCardModule,\n  MatGridListModule,\n  MatSidenavModule,\n  MatSortModule,\n  MatTableModule,\n  MatInputModule,\n  MatSelectModule,\n  MatSliderModule,\n  MatRadioModule,\n  MatListModule,\n  MatProgressSpinnerModule,\n  MatChipsModule,\n  MatTooltipModule,\n  MatExpansionModule,\n  MatDialogModule,\n  MatAutocompleteModule,\n  MatTabsModule,\n  MatSlideToggleModule\n} from '@angular/material';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatMenuModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatCardModule,\n    MatGridListModule,\n    MatSidenavModule,\n    MatSortModule,\n    MatTableModule,\n    MatInputModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatRadioModule,\n    MatListModule,\n    MatProgressSpinnerModule,\n    MatChipsModule,\n    MatTooltipModule,\n    MatExpansionModule,\n    MatDialogModule,\n    MatAutocompleteModule,\n    MatTabsModule,\n    MatSlideToggleModule\n  ],\n  exports: [\n    MatButtonModule,\n    MatMenuModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatCardModule,\n    MatGridListModule,\n    MatSidenavModule,\n    MatSortModule,\n    MatTableModule,\n    MatInputModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatRadioModule,\n    MatListModule,\n    MatProgressSpinnerModule,\n    MatChipsModule,\n    MatTooltipModule,\n    MatExpansionModule,\n    MatDialogModule,\n    MatAutocompleteModule,\n    MatTabsModule,\n    MatSlideToggleModule\n  ],\n  declarations: []\n})\nexport class MaterialModule { }\n\n/** Here components from material are imported and exported in order to not engrose the app.module (just imports MaterialModule )too much and get only the necessary elements */\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavigationComponent.html":{"url":"components/NavigationComponent.html","title":"component - NavigationComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NavigationComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/navigation/navigation.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-navigation\n            \n\n            \n                styleUrls\n                navigation.component.css\n            \n\n\n\n            \n                templateUrl\n                ./navigation.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                citiesSubscription\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                dialogRef\n                            \n                            \n                                emptyList\n                            \n                            \n                                intervalCheck\n                            \n                            \n                                logged\n                            \n                            \n                                logSubscription\n                            \n                            \n                                logSubscription2\n                            \n                            \n                                notEmpty\n                            \n                            \n                                profile\n                            \n                            \n                                routeSubscription\n                            \n                            \n                                savedCities\n                            \n                            \n                                youSureButton\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteCities\n                            \n                            \n                                getCities\n                            \n                            \n                                getLog\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                notSure\n                            \n                            \n                                relog\n                            \n                            \n                                toggleFavourites\n                            \n                            \n                                toggleSession\n                            \n                            \n                                youSure\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                opened\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, savedCitiesService: SavedCitiesService, logService: LogService, dialog: MatDialog, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/navigation/navigation.component.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        savedCitiesService\n                                                  \n                                                        \n                                                                    SavedCitiesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        logService\n                                                  \n                                                        \n                                                                    LogService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        opened\n                    \n                    \n                            \n                            Type:    boolean\n\n                            \n                        \n                            Default value: false\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:23\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteCities\n                            \n                            \n                        \n                    \n                \n                \n                    \ndeleteCities()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:124\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCities\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCities()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:93\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getLog\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetLog()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:78\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:57\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:49\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notSure\n                            \n                            \n                        \n                    \n                \n                \n                    \nnotSure()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:138\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            relog\n                            \n                            \n                        \n                    \n                \n                \n                    \nrelog()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:64\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleFavourites\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoggleFavourites()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:108\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleSession\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoggleSession()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:143\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            youSure\n                            \n                            \n                        \n                    \n                \n                \n                    \nyouSure()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:134\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dialog\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dialog:     MatDialog\n\n                    \n                \n                    \n                        \n                            Type :     MatDialog\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dialogRef\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dialogRef:     MatDialogRef\n\n                    \n                \n                    \n                        \n                            Type :     MatDialogRef\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            emptyList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        emptyList:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'none'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intervalCheck\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        intervalCheck:     \n\n                    \n                \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logged\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        logged:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        logSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logSubscription2\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        logSubscription2:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notEmpty\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        notEmpty:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        profile:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            routeSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        routeSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            savedCities\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        savedCities:     SavedCity[]\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            youSureButton\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        youSureButton:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { SavedCitiesService } from '../saved-cities.service';\nimport { SavedCity } from '../savedCity';\nimport { Subscription } from 'rxjs';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { LogginDialogComponent } from '../loggin-dialog/loggin-dialog.component';\nimport { LogService } from '../log.service';\nimport { MatSnackBar } from '@angular/material';\n\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-navigation',\n  templateUrl: './navigation.component.html',\n  styleUrls: ['./navigation.component.css']\n})\nexport class NavigationComponent implements OnInit, OnDestroy {\n\n  savedCities: SavedCity[];\n  routeSubscription: Subscription;\n  citiesSubscription: Subscription;\n  logSubscription: Subscription;\n  logSubscription2: Subscription;\n  @Input() opened: boolean = false;\n  notEmpty = false;\n  emptyList = 'none';\n  dialogRef: MatDialogRef;\n  logged = false;\n  profile: string = \"\";\n  intervalCheck;\n  youSureButton = false;\n\n  constructor(\n    private router: Router,\n    private savedCitiesService: SavedCitiesService,\n    private logService: LogService,\n    public dialog: MatDialog,\n    private snackBar: MatSnackBar\n  ) {\n    //listening to changes in the url to remove background image\n    router.events.subscribe(() => {\n      if (!(this.router.url.includes(`/initial`))) {\n        const body = document.getElementsByTagName(\"body\");\n        body[0].classList.remove(\"initial-view\");\n      }\n    });\n  }\n\n\n  ngOnInit() {\n    /**Initial tasks */\n    this.relog();\n    this.getCities();\n    this.getLog();\n  }\n\n\n  ngOnDestroy() {\n    /**Unsubscribe from Observables to avoid inefficiency*/\n    this.routeSubscription.unsubscribe();\n    this.citiesSubscription.unsubscribe();\n    this.logSubscription.unsubscribe();\n  }\n\n  relog() {\n    /**If there is a available token tries to restore session */\n    let token = localStorage.getItem(\"Token\");\n    this.profile = localStorage.getItem(\"session\");\n    if ((token !== null) && (this.profile != null)) {\n      this.profile = this.profile.replace(/['\"]+/g, '');\n      localStorage.setItem(\"session\", this.profile);\n      this.logService.logRefresh();\n    }\n  }\n\n\n\n\n  getLog() {\n    /**Subscribes to changes in the current user from the log service observable */\n    this.logSubscription = this.logService.getUpdates().subscribe(logged => {\n      this.logged = logged;\n      if (this.logService.currentUser === undefined) {\n        this.profile = \"USER\";\n      } else {\n        this.profile = this.logService.currentUser.username.replace(/['\"]+/g, ''); //For showing settings\n      }\n      if ((this.savedCities.length  {\n\n      this.savedCities = cities;\n      if (cities.length > 0) {\n        this.notEmpty = true;\n        this.emptyList = 'none';\n      } else {\n        this.notEmpty = false;\n      }\n    });\n  }\n\n  toggleFavourites() {\n    /**Shows (if available) or hides the favourites sidenav */\n    if (this.youSureButton) {\n      //Hides confirming deleted button\n      this.youSureButton = false;\n    }\n    if (this.notEmpty) {\n      this.opened = !this.opened;\n      this.emptyList = 'none';\n    } else {\n      //Not shown without cities\n      this.opened = false;\n      this.emptyList = 'block';\n    }\n  }\n\n  deleteCities() {\n    /**Asks cities service to delete de list and updates its own */\n    this.youSureButton = false;\n    this.savedCitiesService.deleteCities();\n    this.getCities();\n    this.opened = false;\n    this.notEmpty = false;\n    this.snackBar.open(\"Favourite cities have been deleted\", \"Ok\", { duration: 3000 });\n  }\n\n  youSure() {\n    /**Shows the confirmation option to delete the cities list */\n    this.youSureButton = true; //Activates the button to deleteCities()\n  }\n  notSure() {\n    /**Cancels deletion of cities list */\n    this.youSureButton = false;\n  }\n\n  toggleSession() {\n    /**Closes session if logged in, shows dialog component to log in if there isn't a current running session*/\n    if (this.logged) {\n      this.logService.closeSession();\n      this.deleteCities();\n      return;\n    }\n\n    //Opens a dialog ref with a form to log in\n    this.dialogRef = this.dialog.open(LogginDialogComponent);\n\n    this.dialogRef.afterClosed().subscribe(data => {\n      //when dialog is closed we try the session with the service's method\n      if (data !== undefined) {\n        if (data.username !== undefined || data.password !== undefined) {\n          this.logService.logIn(data.username, data.password); //Call the log service\n        }\n      }\n    });\n\n  }\n\n\n}\n/**This component picks the saved cities from the SavedCitiesService and displays the links to city/cod in a sidenav that can be hidden\n\nAlso, presents a link to the inicial view and a menu with the options to log in, settings and about.\n\nLogged in indicator (Check icon).*/\n    \n\n    \n        \n\n  \n  \n    \n      Weather Angular\n      Home\n      Favourites\n\n      \n\n      \n        {{profile}}\n      \n\n      \n        Log in\n      \n\n      \n\n      check_circle\n\n\n      \n        more_vert\n      \n      \n\n        \n          Log in\n        \n\n        \n          Settings\n        \n\n        \n          Log out\n        \n\n        \n          About\n        \n\n\n      \n    \n  \n\n\n  There are no cities saved to favourites-->\n\n  \n    \n      \n        \n           {{savedCity.name}} \n        \n        Delete all\n\n      \n\n      \n        \n        \n        \n      \n    \n    \n      \n        This is going to delete all yor favourite cities when you log out. Are you sure? \n        \n          Yes\n          No\n        \n      \n    \n  \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '              Weather Angular      Home      Favourites                    {{profile}}                    Log in                  check_circle              more_vert                              Log in                          Settings                          Log out                          About                      There are no cities saved to favourites-->                               {{savedCity.name}}                 Delete all                                                                This is going to delete all yor favourite cities when you log out. Are you sure?                   Yes          No                    '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NavigationComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NewUserComponent.html":{"url":"components/NewUserComponent.html","title":"component - NewUserComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NewUserComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/new-user/new-user.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-new-user\n            \n\n            \n                styleUrls\n                new-user.component.css\n            \n\n\n\n            \n                templateUrl\n                ./new-user.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                form\n                            \n                            \n                                password2\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                launchForm\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                submit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(formBuilder: FormBuilder, logService: LogService)\n                    \n                \n                        \n                            \n                                Defined in src/app/new-user/new-user.component.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        logService\n                                                  \n                                                        \n                                                                    LogService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            launchForm\n                            \n                            \n                        \n                    \n                \n                \n                    \nlaunchForm()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:26\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submit\n                            \n                            \n                        \n                    \n                \n                \n                    \nsubmit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:37\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            form\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        form:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password2\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        password2:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:14\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Router } from \"@angular/router\";\nimport { FormGroup, FormBuilder, Validators, AbstractControl } from '@angular/forms';\nimport { LogService } from '../log.service';\n\n@Component({\n  selector: 'app-new-user',\n  templateUrl: './new-user.component.html',\n  styleUrls: ['./new-user.component.css']\n})\nexport class NewUserComponent implements OnInit {\n\n\n  password2: string;\n  form: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private logService: LogService\n  ) { }\n\n  ngOnInit() {\n    this.launchForm();\n  }\n\n  launchForm() {\n    /**Creates the form with its Validators*/\n    this.form = this.formBuilder.group({\n      username: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(20), Validators.required])],\n      password: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])],\n      password2: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])]\n    }, {\n        validator: PasswordValidation.MatchPassword\n      });\n  }\n\n  submit() {\n    /**Checks if the form is valid and asks the log service to create a new user */\n    if (this.form.valid) {\n\n      this.logService.createUser(this.form.value.username, this.form.value.password);\n\n    } else {\n      console.log(\"Form values not valid\");\n    }\n  }\n}\n\nexport class PasswordValidation {\n  /**Validates that the password has been repeated correctly*/\n  static MatchPassword(AC: AbstractControl) {\n    let p1 = AC.get('password');\n    let p2 = AC.get('password2');\n    if (p1.value != p2.value) {\n      AC.get('password2').setErrors({ MatchPassword: true })\n    } else {\n      return null\n    }\n\n  }\n}\n/** This component simply launches a form to ask the log service to create a new user with the info adquired in the form */\n    \n\n    \n        \n  \n    \n      \n        \n          \n        \n      \n      \n        \n          \n        \n      \n      \n        \n          \n        \n      \n      \n        Go!\n      \n    \n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                      Go!            '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NewUserComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordValidation.html":{"url":"classes/PasswordValidation.html","title":"class - PasswordValidation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordValidation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/new-user/new-user.component.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                MatchPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            MatchPassword\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        MatchPassword(AC: AbstractControl)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:51\n                            \n                        \n\n\n                \n                    \n                            Validates that the password has been repeated correctly\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        AC\n                                                        \n                                                                    AbstractControl\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Router } from \"@angular/router\";\nimport { FormGroup, FormBuilder, Validators, AbstractControl } from '@angular/forms';\nimport { LogService } from '../log.service';\n\n@Component({\n  selector: 'app-new-user',\n  templateUrl: './new-user.component.html',\n  styleUrls: ['./new-user.component.css']\n})\nexport class NewUserComponent implements OnInit {\n\n\n  password2: string;\n  form: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private logService: LogService\n  ) { }\n\n  ngOnInit() {\n    this.launchForm();\n  }\n\n  launchForm() {\n    /**Creates the form with its Validators*/\n    this.form = this.formBuilder.group({\n      username: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(20), Validators.required])],\n      password: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])],\n      password2: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])]\n    }, {\n        validator: PasswordValidation.MatchPassword\n      });\n  }\n\n  submit() {\n    /**Checks if the form is valid and asks the log service to create a new user */\n    if (this.form.valid) {\n\n      this.logService.createUser(this.form.value.username, this.form.value.password);\n\n    } else {\n      console.log(\"Form values not valid\");\n    }\n  }\n}\n\nexport class PasswordValidation {\n  /**Validates that the password has been repeated correctly*/\n  static MatchPassword(AC: AbstractControl) {\n    let p1 = AC.get('password');\n    let p2 = AC.get('password2');\n    if (p1.value != p2.value) {\n      AC.get('password2').setErrors({ MatchPassword: true })\n    } else {\n      return null\n    }\n\n  }\n}\n/** This component simply launches a form to ask the log service to create a new user with the info adquired in the form */\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RainAndSnowService.html":{"url":"injectables/RainAndSnowService.html","title":"injectable - RainAndSnowService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  RainAndSnowService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/graphs/rainAndSnow/rain-and-snow.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                chart\n                            \n                            \n                                dates\n                            \n                            \n                                rain\n                            \n                            \n                                snow\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRainAndSnowChart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getRainAndSnowChart\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetRainAndSnowChart(forecast: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        forecast\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Chart\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        chart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dates\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dates:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rain\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rain:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        snow:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:12\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Forecast } from '../../city/data';\nimport { Chart } from 'chart.js';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RainAndSnowService {\n\n  chart: Chart;\n  rain: number[];\n  snow: number[];\n  dates: string[];\n\n  constructor() { }\n\n  getRainAndSnowChart(forecast: Array): Chart {\n    /**Returns a chart with Rain and Snow data */\n    this.rain = forecast.map(item => {\n      //extracts a Array with numbers indicating the rain forecast l/m^2\n      return item.rain;\n    });\n\n    this.snow = forecast.map(item => {\n      //extracts a Array with numbers indicating the snow forecast l/m^2\n      return item.snow;\n    });\n\n    this.dates = forecast.map(item => {\n      //extracts a Array with strings indicating dates\n      return item.dt_txt;\n    });\n\n    this.chart = new Chart('rainAndSnow', {\n      type: 'bar',\n      data: {\n        labels: this.dates,\n        datasets: [\n          {\n            label: 'Rain l/m^2',\n            data: this.rain,\n            borderColor: \"#0000ff\",\n            fill: false,\n            showLine: true,\n            backgroundColor: \"#0000ff\"\n          },\n          {\n            label: 'Snow l/m^2',\n            data: this.snow,\n            borderColor: \"#ffffff\",\n            fill: false,\n            backgroundColor: \"#aaaaaa\"\n          }\n        ]\n      },\n      options: {\n\n        legend: {\n          display: true\n        },\n        scales: {\n          xAxes: [{\n            display: true\n          }],\n          yAxes: [{\n            display: true\n          }],\n        }\n      }\n    });\n\n    return this.chart;\n  }\n}\n\n/* This service gets the forecast values formated and returns a rain and snow chart*/\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RespuestaForecast.html":{"url":"classes/RespuestaForecast.html","title":"class - RespuestaForecast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RespuestaForecast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/city/data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                list\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/city/data.ts:96\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            list\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        list:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:96\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Weather } from '../weather'\n\n\nexport class Data {\n    parameter: string;\n    value: string;\n\n    constructor() { }\n}\n/* Data is used to transfer information as an array of Data to the MatTable in city */\n\nexport class Forecast {\n\n    clouds: { all: number };\n    dt: number;\n    dt_txt: string;\n\n    main: {\n        grnd_level: number,\n        humidity: number,\n        pressure: number,\n        sea_level: number,\n        temp: number,\n        temp_kf: number,\n        temp_max: number,\n        temp_min: number\n    };\n\n    weather: Array;\n    /*\n        id\n        main\n        description\n        icon\n    */\n\n    wind: {\n        speed: number,\n        deg: number\n    }\n\n    rain: number;\n    snow: number;\n    constructor(element: Forecast) {\n        this.weather = new Array();\n\n        this.clouds = element.clouds;\n        this.dt = element.dt;\n        this.dt_txt = element.dt_txt;\n\n        this.main = {\n            grnd_level: element.main.grnd_level,\n            humidity: element.main.humidity,\n            pressure: element.main.pressure,\n            sea_level: element.main.sea_level,\n            temp: element.main.temp,\n            temp_kf: element.main.temp_kf,\n            temp_max: element.main.temp_max,\n            temp_min: element.main.temp_min\n        };\n\n\n        element.weather.forEach((weather: Weather) => {\n            const w = new Weather();\n            w.main = weather.main;\n            w.id = weather.id;\n            w.icon = weather.icon;\n            w.description = weather.description;\n\n            this.weather.push(w);\n        });\n\n        this.wind = {\n            speed: element.wind.speed,\n            deg: element.wind.deg\n        };\n\n        if (element.rain == undefined) {\n            //console.log(\"rain undefined\");\n        } else {\n            this.rain = element.rain[\"3h\"];\n        }\n\n        if (element.snow == undefined) {\n            //console.log(\"snow undefined\");\n        } else {\n            this.snow = element.snow[\"3h\"];\n        }\n\n    }\n}\n/* The object Forecast stores all the information about the weather provided by the service for a certain hour */\n\nexport class RespuestaForecast {\n\n    list: Array;\n\n    constructor() { }\n}\n\n/* \nData types used for sending data to the mat-table, Graph services and managing a server response containing the forecast for several hours.\n*/\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SavedCitiesService.html":{"url":"injectables/SavedCitiesService.html","title":"injectable - SavedCitiesService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  SavedCitiesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/saved-cities.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cities\n                            \n                            \n                                city\n                            \n                            \n                                updated\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteCities\n                            \n                            \n                                getSavedCities\n                            \n                            \n                                getUpdates\n                            \n                            \n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/saved-cities.service.ts:14\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteCities\n                            \n                            \n                        \n                    \n                \n                \n                    \ndeleteCities()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:55\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getSavedCities\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetSavedCities()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:24\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     SavedCity[]\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getUpdates\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetUpdates()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            save\n                            \n                            \n                        \n                    \n                \n                \n                    \nsave(cityToSave: SavedCity)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:41\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cityToSave\n                                                        \n                                                                    SavedCity\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cities\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cities:     SavedCity[]\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            city\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        city:     SavedCity\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        updated:     \n\n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:14\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { SavedCity } from './savedCity';\nimport { Observable, Subject } from 'rxjs'\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SavedCitiesService {\n\n  cities : SavedCity[];\n  city : SavedCity;\n  updated = new Subject();\n\n\n  constructor() { }\n\n  getUpdates(): Observable{\n    /**Returns an Observable that emits new values of the Saved cities List */\n    return > this.updated.asObservable();\n  }\n\n  getSavedCities(): SavedCity[] {\n    /**Gets the cities list from the localStorage and launches an Observable through updated*/\n    this.cities = [];\n    if(JSON.parse(localStorage.getItem(\"favouriteCities\")) === null){ //if there are no cities in the local storage\n      this.updated.next(this.cities); //return cities = [] from the Observable\n      return [];\n    }\n    JSON.parse(localStorage.getItem(\"favouriteCities\")).forEach(element => { //Get back from LS\n      this.city = new SavedCity(element.name, element.id, element.country, element.coord.lon, element.coord.lat);\n      this.cities.push(this.city);\n      this.updated.next(this.cities); //Return Array from the Observable\n      return this.cities;\n    });\n    \n   return this.cities; //Never reaches this instruction? Yes, surpridingly it does, and everything crashed when I commented it\n  }\n\n  save(cityToSave : SavedCity){\n    /**Includes a non existing city in the list and updates the localStorage cities list */\n    if(\n      this.cities.find(city => city.id === cityToSave.id) == undefined\n    ){\n    this.cities.push(cityToSave);\n    localStorage.setItem(\"favouriteCities\",JSON.stringify(this.cities));\n    this.updated.next(this.cities); //Metemos cities en el Subject\n  }else{\n    //console.log('This city has already been saved');\n  }\n\n  }\n\n  deleteCities(){\n    /**Removes cities list data from local Storage and updates the component's city list emmiting a Observable with the list empty */\n    localStorage.removeItem(\"favouriteCities\");\n    this.getSavedCities(); //Send an updated observable with the cities available\n  }\n \n}\n /* \n This service manages the list of cities saved in the local storage.\n Returns an Observable with changes in the cities list an can modify or delete the list\n  */\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SavedCity.html":{"url":"classes/SavedCity.html","title":"class - SavedCity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  SavedCity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/savedCity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                coord\n                            \n                            \n                                country\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                sys\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                insertBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, id: string, country: string, lon: number, lat: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/savedCity.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        country\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        lon\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        lat\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            coord\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        coord:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/savedCity.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            country\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        country:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/savedCity.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/savedCity.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/savedCity.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sys\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sys:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/savedCity.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            insertBody\n                            \n                            \n                        \n                    \n                \n                \n                    \ninsertBody()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/savedCity.ts:24\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class SavedCity{\n    name: string;\n    id: string;\n    sys : {country : string};\n    country: string;\n    coord : {\n        lon : number,\n        lat: number\n    };\n\n    constructor(name: string, id: string, country: string = '', lon: number = 0, lat: number = 0) {\n        this.name = name;\n        this.id = id;\n        this.sys = {\n            country : country\n        };\n\n        this.coord = {\n            lon: lon,\n            lat: lat\n        };\n    }\n\n    insertBody(): string{\n        //Prepares a string to make an insert to the server\n        return `{\n            \"data\": {\n              \"ID\": ` + this.id + `,\n              \"COUNTRY\": \"` + this.sys.country + `\",\n              \"LAT\": ` + this.coord.lat + `,\n              \"LON\": ` + this.coord.lon + `,\n              \"NAME\": \"` + this.name + `\"\t\n            }\n            \n           }`;\n    }\n}\n//This object is for displaying and linking to the searched cities. It is used too for storing favourite cities. \n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServedCity.html":{"url":"classes/ServedCity.html","title":"class - ServedCity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServedCity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/servedCity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                COUNTRY\n                            \n                            \n                                ID\n                            \n                            \n                                LAT\n                            \n                            \n                                LON\n                            \n                            \n                                NAME\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, id: number, country: string, lon: number, lat: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/servedCity.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        country\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        lon\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        lat\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            COUNTRY\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        COUNTRY:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ID\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ID:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LAT\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        LAT:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LON\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        LON:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NAME\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        NAME:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ServedCity{\n    NAME: string;\n    ID: number;\n    COUNTRY: string;\n    LON : number;\n    LAT: number;\n    \n\n    constructor(name: string, id: number, country: string = '', lon: number = 0, lat: number = 0) {\n        this.NAME = name;\n        this.ID = id;\n        this.COUNTRY =  country;\n        this.LON = lon;\n        this.LAT = lat;\n        \n    }\n}\n\nexport class ServerResponse{\n    data: Array;\n}\n\n\n/* These are classes to give a type to the server DB results and avoid errors */\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServerResponse.html":{"url":"classes/ServerResponse.html","title":"class - ServerResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServerResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/servedCity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        data:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ServedCity{\n    NAME: string;\n    ID: number;\n    COUNTRY: string;\n    LON : number;\n    LAT: number;\n    \n\n    constructor(name: string, id: number, country: string = '', lon: number = 0, lat: number = 0) {\n        this.NAME = name;\n        this.ID = id;\n        this.COUNTRY =  country;\n        this.LON = lon;\n        this.LAT = lat;\n        \n    }\n}\n\nexport class ServerResponse{\n    data: Array;\n}\n\n\n/* These are classes to give a type to the server DB results and avoid errors */\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SettingsComponent.html":{"url":"components/SettingsComponent.html","title":"component - SettingsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SettingsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/settings/settings.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-settings\n            \n\n            \n                styleUrls\n                settings.component.css\n            \n\n\n\n            \n                templateUrl\n                ./settings.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentUser\n                            \n                            \n                                deleteAccount\n                            \n                            \n                                deleteAccount1\n                            \n                            \n                                formDelete\n                            \n                            \n                                formPassword\n                            \n                            \n                                logSubscription\n                            \n                            \n                                opened\n                            \n                            \n                                pwd\n                            \n                            \n                                valueTime\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildDeleteForm\n                            \n                            \n                                buildPsswdForm\n                            \n                            \n                                changePassword\n                            \n                            \n                                delAccnt\n                            \n                            \n                                isLogged\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                passwd\n                            \n                            \n                                setCurrentUser\n                            \n                            \n                                showDelete\n                            \n                            \n                                submitDelete\n                            \n                            \n                                submitPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(log: LogService, savedCitiesService: SavedCitiesService, router: Router, formBuilder: FormBuilder)\n                    \n                \n                        \n                            \n                                Defined in src/app/settings/settings.component.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        log\n                                                  \n                                                        \n                                                                    LogService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        savedCitiesService\n                                                  \n                                                        \n                                                                    SavedCitiesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            buildDeleteForm\n                            \n                            \n                        \n                    \n                \n                \n                    \nbuildDeleteForm()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:65\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            buildPsswdForm\n                            \n                            \n                        \n                    \n                \n                \n                    \nbuildPsswdForm()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:55\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changePassword\n                            \n                            \n                        \n                    \n                \n                \n                    \nchangePassword(passwd: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:81\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        passwd\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            delAccnt\n                            \n                            \n                        \n                    \n                \n                \n                    \ndelAccnt()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:113\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isLogged\n                            \n                            \n                        \n                    \n                \n                \n                    \nisLogged()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:72\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:41\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:35\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            passwd\n                            \n                            \n                        \n                    \n                \n                \n                    \npasswd()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:106\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setCurrentUser\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetCurrentUser()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:45\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            showDelete\n                            \n                            \n                        \n                    \n                \n                \n                    \nshowDelete()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:119\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitDelete\n                            \n                            \n                        \n                    \n                \n                \n                    \nsubmitDelete()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:96\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitPassword\n                            \n                            \n                        \n                    \n                \n                \n                    \nsubmitPassword()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:86\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUser\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        currentUser:     UserServer\n\n                    \n                \n                    \n                        \n                            Type :     UserServer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteAccount\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        deleteAccount:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteAccount1\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        deleteAccount1:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formDelete\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        formDelete:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formPassword\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        formPassword:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        logSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            opened\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        opened:     \n\n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pwd\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        pwd:     \n\n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valueTime\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        valueTime:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { LogService } from '../log.service';\nimport { UserServer } from '../userServer';\nimport { SavedCitiesService } from '../saved-cities.service';\nimport { Router } from \"@angular/router\";\nimport { Subscription } from 'rxjs';\nimport { FormGroup, FormBuilder, Validators, AbstractControl } from '@angular/forms';\nimport { PasswordValidation } from '../new-user/new-user.component';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.css']\n})\nexport class SettingsComponent implements OnInit {\n\n  currentUser: UserServer;\n  logSubscription: Subscription;\n  opened = true;\n  formPassword: FormGroup;\n  formDelete: FormGroup;\n  valueTime = 1;\n  pwd = true;\n  deleteAccount = false;\n  deleteAccount1 = false;\n\n\n  constructor(\n    private log: LogService,\n    private savedCitiesService: SavedCitiesService,\n    private router: Router,\n    private formBuilder: FormBuilder\n  ) { }\n\n  ngOnInit() {\n    this.setCurrentUser();\n    this.isLogged();\n    this.buildPsswdForm();\n    this.buildDeleteForm();\n  }\n  ngOnDestroy() {\n    this.logSubscription.unsubscribe();\n  }\n\n  setCurrentUser() {\n    /**Gets the info about the current user and navigates to home if there isn'n any user */\n    if (this.log.currentUser === undefined) {\n      this.router.navigate(['initial']);\n    } else {\n      this.currentUser = this.log.currentUser;\n      this.currentUser.citiesList = this.savedCitiesService.getSavedCities();\n    }\n\n  }\n  buildPsswdForm() {\n    /**Builds the form to change password with its validators */\n    this.formPassword = this.formBuilder.group({\n      password: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])],\n      password2: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])]\n    }, {\n        validator: PasswordValidation.MatchPassword\n      })\n  }\n\n  buildDeleteForm() {\n    /**Builds the Form to delete account (asks for the password)*/\n    this.formDelete = this.formBuilder.group({\n      password: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])]\n    });\n  }\n\n  isLogged() {\n    /**If session is closed redirect to home*/\n    this.logSubscription = this.log.getUpdates().subscribe(logged => {\n      if (!logged) {\n        this.router.navigate(['initial']);\n      }\n    });\n  }\n\n  changePassword(passwd: string) {\n    /**Asks log service to update the password */\n    this.log.updatePassword(passwd);\n  }\n\n  submitPassword() {\n    /**If the password change form is valid executes changePassword() */\n    if (this.formPassword.valid) {\n      this.changePassword(this.formPassword.value.password);\n      //Resets the form\n      this.buildPsswdForm();\n    }\n  }\n\n//Bug, deletes even if password is wrong\n  submitDelete() {\n    /**If the delete account form is valid asks log service to delete the account  */\n    if (this.formDelete.valid) {\n      let username = this.currentUser.username;\n      this.log.closeSession();\n      this.log.deleteUser(username,this.formDelete.value.password);\n    }\n  }\n\n//Methods to show different contents\n  passwd() {\n    /**Shows changing password form */\n    this.pwd = true;\n    this.deleteAccount = false;\n    this.deleteAccount1 = false;\n  }\n  \n  delAccnt() {\n    /**Shows deleting account confirmation form */\n    this.pwd = false;\n    this.deleteAccount = false;\n    this.deleteAccount1 = true;\n  }\n  showDelete() {\n    /**Shows deleting account options */\n    this.pwd = false;\n    this.deleteAccount = true;\n    this.deleteAccount1 = false;\n  }\n}\n/**This component shows the settings that can be changed for the current user and asks the log service to perform such changes */\n    \n\n    \n        \n  {{currentUser.username}} settings:\n\n\n\n\n\n  \n    \n      \n        Change password\n      \n    \n    \n      \n        Delete account\n      \n    \n  \n\n  \n\n\n    \n    \n      \n        \n          \n          \n            \n              \n            \n          \n          \n            \n              \n            \n          \n          \n            Go!\n          \n          \n        \n      \n    \n\n\n    \n    \n      \n      \n      \n        ¿Are you sure you want to permanently delete your account?\n      \n      \n      \n        \n          Yes, let's delete my account\n        \n        \n          No, I shouldn't do this\n        \n      \n      \n      \n    \n    \n      \n        \n          \n          \n            \n              \n            \n          \n          \n          \n          \n            Delete\n          \n          \n          \n        \n      \n    \n\n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  {{currentUser.username}} settings:                    Change password                            Delete account                                                                                                                                                                                        Go!                                                                        ¿Are you sure you want to permanently delete your account?                                    Yes, let\\'s delete my account                          No, I shouldn\\'t do this                                                                                                                                                              Delete                                                  '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SettingsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TemperatureService.html":{"url":"injectables/TemperatureService.html","title":"injectable - TemperatureService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  TemperatureService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/graphs/temperature/temperature.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                chart\n                            \n                            \n                                dates\n                            \n                            \n                                temperatures\n                            \n                            \n                                temperaturesMax\n                            \n                            \n                                temperaturesMin\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTemperatureChart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/graphs/temperature/temperature.service.ts:14\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getTemperatureChart\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetTemperatureChart(forecast: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        forecast\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Chart\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        chart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dates\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dates:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperatures\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperatures:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperaturesMax\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperaturesMax:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperaturesMin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperaturesMin:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:13\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Forecast } from '../../city/data';\nimport { Chart } from 'chart.js';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TemperatureService {\n\n  chart: Chart;\n  temperatures: number[];\n  temperaturesMax: number[];\n  temperaturesMin: number[];\n  dates: string[];\n\n  constructor() { }\n\n  getTemperatureChart(forecast: Array): Chart {\n\n    this.temperatures = forecast.map(item => {\n      //extracts a Array with numbers indicating the expected temperatures ºC\n      return item.main.temp - 273.15;\n    });\n\n\n    this.temperaturesMax = forecast.map(item => {\n      //extracts a Array with numbers indicating the maximum temperatures ºC\n      return item.main.temp_max - 273.15;\n    });\n\n    this.temperaturesMin = forecast.map(item => {\n      //extracts a Array with numbers indicating the minimum temperatures ºC\n      return item.main.temp_min - 273.15;\n    });\n\n    this.dates = forecast.map(item => {\n      //extracts a Array with strings indicating dates\n      return item.dt_txt;\n    });\n\n    this.chart = new Chart('temperature', {\n      type: 'line',\n      data: {\n        labels: this.dates,\n        datasets: [\n          {\n            label: 'temperature ºC',\n            data: this.temperatures,\n            borderColor: \"#3cba9f\",\n            fill: false,\n            showLine: true\n          },\n          {\n            label: 'Max temperature ºC',\n            data: this.temperaturesMax,\n            borderColor: \"#ff0000\",\n            fill: false\n          },\n          {\n            label: 'Min temperature ºC',\n            data: this.temperaturesMin,\n            borderColor: \"#0000FF\",\n            fill: false\n          }\n        ]\n      },\n      options: {\n\n        legend: {\n          display: true,\n          labels: {\n\n          }\n        },\n        scales: {\n          xAxes: [{\n            display: true\n          }],\n          yAxes: [{\n            display: true\n          }],\n        }\n      }\n    });\n\n    return this.chart;\n  }\n\n}\n\n/* This service gets the forecast values formated and returns a temperature chart*/\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserServer.html":{"url":"classes/UserServer.html","title":"class - UserServer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserServer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/userServer.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                citiesId\n                            \n                            \n                                citiesList\n                            \n                            \n                                favouriteCities\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                display\n                            \n                            \n                                setFromList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/userServer.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesId\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesId:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesList:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            favouriteCities\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        favouriteCities:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        password:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        username:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            display\n                            \n                            \n                        \n                    \n                \n                \n                    \ndisplay()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/userServer.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setFromList\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetFromList(list: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/userServer.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        list\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { SavedCity } from \"./savedCity\";\n\nexport class UserServer {\n    username : string;\n    password : string;\n    favouriteCities : string;\n    citiesId : Array;\n    citiesList : Array;\n\n    constructor(){}\n    \n\n    display(): string{\n        return \"Username: \" + this.username + \"\\nPassword: \" + this.password + \"\\nCities ids: \" + this.citiesId;\n    }\n\n    setFromList(list : Array){\n        this.favouriteCities = list.map(item => item.id).join(',');\n    }\n}\n\n\n\n\n//New\nexport class CitiesResponse {\n    data : Array;\n}\n\nexport class CitiesResponseUnit {\n    CITIES : string;\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Weather.html":{"url":"classes/Weather.html","title":"class - Weather","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Weather\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/weather.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                icon\n                            \n                            \n                                id\n                            \n                            \n                                main\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/weather.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        description:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weather.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            icon\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        icon:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weather.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weather.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            main\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        main:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weather.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Weather {\n\n    id: number;\n    main: string;\n    description: string;\n    icon: string;\n\n    constructor(){}\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WeatherNow.html":{"url":"classes/WeatherNow.html","title":"class - WeatherNow","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  WeatherNow\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/weatherNow.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aux\n                            \n                            \n                                base\n                            \n                            \n                                clouds\n                            \n                            \n                                cod\n                            \n                            \n                                coord\n                            \n                            \n                                dt\n                            \n                            \n                                id\n                            \n                            \n                                main\n                            \n                            \n                                name\n                            \n                            \n                                rain\n                            \n                            \n                                result\n                            \n                            \n                                snow\n                            \n                            \n                                sys\n                            \n                            \n                                weather\n                            \n                            \n                                wind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAndSave\n                            \n                            \n                                displayValues\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/weatherNow.ts:29\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            aux\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        aux:     Data\n\n                    \n                \n                    \n                        \n                            Type :     Data\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            base\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        base:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clouds\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        clouds:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cod:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            coord\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        coord:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dt:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            main\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        main:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rain\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rain:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            result\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        result:     \n\n                    \n                \n                    \n                        \n                            Default value : new Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        snow:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sys\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sys:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            weather\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        weather:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        wind:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:16\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            checkAndSave\n                            \n                            \n                        \n                    \n                \n                \n                    \ncheckAndSave(text: string, variable: any, additional: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weatherNow.ts:174\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        text\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        variable\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        additional\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                ''\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            displayValues\n                            \n                            \n                        \n                    \n                \n                \n                    \ndisplayValues()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weatherNow.ts:102\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Array\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            set\n                            \n                            \n                        \n                    \n                \n                \n                    \nset(rx?: WeatherNow)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weatherNow.ts:35\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rx\n                                                        \n                                                                    WeatherNow\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Weather } from './weather';\nimport { Data } from './city/data'\n\nexport class WeatherNow {\n\n    coord: {lon: number, lat: number};\n    weather: Array;\n\n    /* id: number;\n    main: string;\n    description: string;\n    icon: string;*/\n\n    base: string;\n    main: {temp: number, pressure: number, humidity: number, temp_min: number, temp_max: number, sea_level: number, grnd_level: number};\n    wind: {speed: number, deg: number};\n    clouds: {all: number};\n    rain: number;\n    snow: number;\n    dt: number;\n    sys: {type: number, id: number, message: number, country: string, sunrise: number, sunset: number };\n    id: number;\n    name: string;\n    cod: number;\n\n    //Variables para el displayValues() : \n\n    result = new Array();\n    aux : Data; \n\n    constructor() {\n        this.weather = new Array();\n     }\n\n    set(rx? : WeatherNow){\n        \n        this.coord = {\n            lon: rx.coord.lon,\n            lat: rx.coord.lat\n        };\n        \n        rx.weather.forEach((w: Weather) => {\n            \n            let wthr = new Weather();\n            wthr = {\n                id: w.id,\n                main: w.main,\n                description: w.description,\n                icon: w.icon\n            };\n\n            this.weather.push(wthr);\n        });\n        \n        this.base = rx.base;\n        \n        this.main = {\n            temp: rx.main.temp,\n            pressure: rx.main.pressure,\n            humidity: rx.main.humidity,\n            temp_min: rx.main.temp_min,\n            temp_max: rx.main.temp_max,\n            sea_level: rx.main.sea_level,\n            grnd_level: rx.main.grnd_level\n        };\n        \n        this.wind = {\n            speed: rx.wind.speed,\n            deg: rx.wind.deg\n        };\n        \n\n        this.clouds = {\n            all: rx.clouds.all\n        };\n        if(rx.rain == undefined){\n        }else{\n        this.rain = rx.rain[\"3h\"];\n        }\n        if(rx.snow == undefined){\n        }else{\n        this.snow = rx.snow[\"3h\"];\n        }\n        this.dt = rx.dt;\n        \n        this.sys = {\n            type: rx.sys.type,\n            id: rx.sys.id,\n            message: rx.sys.message,\n            country: rx.sys.country,\n            sunrise: rx.sys.sunrise,\n            sunset: rx.sys.sunset\n        };\n        \n        this.id = rx.id;\n\n        this.name = rx.name;\n\n        this.cod = rx.cod;\n    }\n\n    displayValues(): Array {\n\n        this.result = [];\n\n        //coord\n        this.checkAndSave('longitude', this.coord.lon,'');\n        this.checkAndSave('latitude', this.coord.lat,'');\n\n      \n        //weather\n        let i = 0;\n        this.weather.forEach(w =>{\n            i++;\n            this.checkAndSave('id', w.id,'(' + i + ')');\n            this.checkAndSave('main', w.main,'(' + i + ')');\n            this.checkAndSave('description', w.description,'(' + i + ')');\n            this.checkAndSave('icon', w.icon,'(' + i + ')');\n            \n        });\n\n        //base\n        this.checkAndSave('base', this.base,'');\n        \n        //main\n        this.checkAndSave('temperature', this.main.temp - 273.15,' ℃');\n        this.checkAndSave('pressure', this.main.pressure,'');\n        this.checkAndSave('humidity', this.main.humidity,'');\n        this.checkAndSave('minimum temperature', this.main.temp_min - 273.15,' ℃');\n        this.checkAndSave('maximum temperature', this.main.temp_max - 273.15,' ℃');\n        this.checkAndSave('pressure at sea level', this.main.sea_level,'');\n        this.checkAndSave('pressure at ground level', this.main.grnd_level,'');\n        \n\n        //wind\n        this.checkAndSave('Wind speed', this.wind.speed,'');\n        this.checkAndSave('Wind direction', this.wind.deg,'');\n        \n        //clouds\n        this.checkAndSave('Clouds percentage', this.clouds.all,'%');\n        \n        //rain\n        this.checkAndSave('Rain volume in the last 3 hours', this.rain,' litres');\n        \n        //snow\n        this.checkAndSave('Snow volume in the last 3 hours', this.snow,' litres');\n       \n        //dt\n        this.checkAndSave('dt', this.dt,'');\n\n        //sys\n        this.checkAndSave('sys type', this.sys.type,'');\n        this.checkAndSave('sys id', this.sys.id,'');\n        this.checkAndSave('sys message', this.sys.message,'');\n        this.checkAndSave('sys country', this.sys.country,'');\n        this.checkAndSave('sys sunrise', this.sys.sunrise,'');\n        this.checkAndSave('sys sunset', this.sys.sunset,'');\n        \n        //id\n        this.checkAndSave('id', this.id,'');\n\n        //name\n        this.checkAndSave('name', this.name,'');\n\n        //cod\n        this.checkAndSave('cod', this.cod,'');\n        \n        \n        return this.result;\n        //result is an Array\n        //Data is an object with a parameter and a value\n    }\n\n    checkAndSave(text: string, variable: any, additional: string = ''){\n        \n        if(!( variable === undefined || variable === null)){\n            \n            this.aux = { //aux is a Data object\n                parameter: text,\n                value: variable + additional\n            };\n\n            this.result.push(this.aux);\n        }\n\n    }\n}\n\n/* This Object stores the information about a city's current weather received from the API and prepares it to being displayed in a mat table\n\n*/\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WeatherService.html":{"url":"injectables/WeatherService.html","title":"injectable - WeatherService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  WeatherService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/weather.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                weatherURL\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getForecast\n                            \n                            \n                                getWeather\n                            \n                            \n                                getWeatherByCityName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/weather.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getForecast\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetForecast(id: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weather.service.ts:28\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getWeather\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetWeather(id: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weather.service.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getWeatherByCityName\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetWeatherByCityName(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weather.service.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            weatherURL\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        weatherURL:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'https://api.openweathermap.org/data/2.5/weather?q=Vigo&APPID=888b7bb3ed5f95fb9894b5c33589e6a6'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weather.service.ts:11\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs'\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n\n  private weatherURL = 'https://api.openweathermap.org/data/2.5/weather?q=Vigo&APPID=888b7bb3ed5f95fb9894b5c33589e6a6';\n\n\n\n  constructor(private http: HttpClient) { }\n\n  getWeather(id: string): Observable {\n    /**Unique identifier search */\n    this.weatherURL = `https://api.openweathermap.org/data/2.5/weather?id=${id}&APPID=888b7bb3ed5f95fb9894b5c33589e6a6`;\n    return this.http.get(this.weatherURL);\n  }\n  getWeatherByCityName(name: string): Observable {\n    /**Search by name, used to get city objects, may lead to missunderstanding with city location */\n    this.weatherURL = `https://api.openweathermap.org/data/2.5/weather?q=${name}&APPID=888b7bb3ed5f95fb9894b5c33589e6a6`;\n    return this.http.get(this.weatherURL);\n  }\n\n  getForecast(id: string): Observable {\n    /**Gets the free forecast by unique ID from OpenWeatherMap API */\n    this.weatherURL = `https://api.openweathermap.org/data/2.5/forecast?id=${id}&APPID=888b7bb3ed5f95fb9894b5c33589e6a6`;\n    return this.http.get(this.weatherURL);\n  }\n}\n/** Service that makes requests to the API \"OpenWeather\" and return its responses*/\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                    src/app/about/about.component.ts\n            \n            \n                component\n            \n            \n                AboutComponent\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                    src/app/app.component.ts\n            \n            \n                component\n            \n            \n                AppComponent\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                    src/app/cities-server.service.ts\n            \n            \n                injectable\n            \n            \n                CitiesServerService\n            \n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                    src/app/city/city.component.ts\n            \n            \n                component\n            \n            \n                CityComponent\n            \n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                    src/app/city/data.ts\n            \n            \n                class\n            \n            \n                Data\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                    src/app/city/data.ts\n            \n            \n                class\n            \n            \n                Forecast\n            \n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                    src/app/city/data.ts\n            \n            \n                class\n            \n            \n                RespuestaForecast\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                    src/app/forecast-values.service.ts\n            \n            \n                injectable\n            \n            \n                ForecastValuesService\n            \n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                    src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts\n            \n            \n                injectable\n            \n            \n                CloudsAndWindService\n            \n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                    src/app/graphs/graphs.component.ts\n            \n            \n                component\n            \n            \n                GraphsComponent\n            \n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                    src/app/graphs/rainAndSnow/rain-and-snow.service.ts\n            \n            \n                injectable\n            \n            \n                RainAndSnowService\n            \n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                    src/app/graphs/temperature/temperature.service.ts\n            \n            \n                injectable\n            \n            \n                TemperatureService\n            \n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                    src/app/initial/initial.component.ts\n            \n            \n                component\n            \n            \n                InitialComponent\n            \n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                    src/app/interceptor/interceptor.component.ts\n            \n            \n                component\n            \n            \n                InterceptorComponent\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                    src/app/log.service.ts\n            \n            \n                injectable\n            \n            \n                LogService\n            \n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                    src/app/loggin-dialog/loggin-dialog.component.ts\n            \n            \n                component\n            \n            \n                LogginDialogComponent\n            \n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                    src/app/navigation/navigation.component.ts\n            \n            \n                component\n            \n            \n                NavigationComponent\n            \n            \n                0 %\n                (0/26)\n            \n        \n        \n            \n                \n                    src/app/new-user/new-user.component.ts\n            \n            \n                component\n            \n            \n                NewUserComponent\n            \n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                    src/app/new-user/new-user.component.ts\n            \n            \n                class\n            \n            \n                PasswordValidation\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                    src/app/saved-cities.service.ts\n            \n            \n                injectable\n            \n            \n                SavedCitiesService\n            \n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                    src/app/savedCity.ts\n            \n            \n                class\n            \n            \n                SavedCity\n            \n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                    src/app/servedCity.ts\n            \n            \n                class\n            \n            \n                ServedCity\n            \n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                    src/app/servedCity.ts\n            \n            \n                class\n            \n            \n                ServerResponse\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                    src/app/settings/settings.component.ts\n            \n            \n                component\n            \n            \n                SettingsComponent\n            \n            \n                0 %\n                (0/23)\n            \n        \n        \n            \n                \n                    src/app/userServer.ts\n            \n            \n                class\n            \n            \n                CitiesResponse\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                    src/app/userServer.ts\n            \n            \n                class\n            \n            \n                CitiesResponseUnit\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                    src/app/userServer.ts\n            \n            \n                class\n            \n            \n                UserServer\n            \n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                    src/app/weather.service.ts\n            \n            \n                injectable\n            \n            \n                WeatherService\n            \n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                    src/app/weather.ts\n            \n            \n                class\n            \n            \n                Weather\n            \n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                    src/app/weatherNow.ts\n            \n            \n                class\n            \n            \n                WeatherNow\n            \n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                    src/environments/environment.prod.ts\n            \n            \n                variable\n            \n            \n                environment\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                    src/environments/environment.ts\n            \n            \n                variable\n            \n            \n                environment\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                    src/test.ts\n            \n            \n                variable\n            \n            \n                context\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                    src/test.ts\n            \n            \n                variable\n            \n            \n                require\n            \n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^6.0.4\n        \n            @angular/cdk : ^6.2.1\n        \n            @angular/common : ^6.0.4\n        \n            @angular/compiler : ^6.0.4\n        \n            @angular/core : ^6.0.4\n        \n            @angular/forms : ^6.0.4\n        \n            @angular/http : ^6.0.4\n        \n            @angular/material : ^6.2.1\n        \n            @angular/platform-browser : ^6.0.4\n        \n            @angular/platform-browser-dynamic : ^6.0.4\n        \n            @angular/pwa : ^0.6.8\n        \n            @angular/router : ^6.0.4\n        \n            @angular/service-worker : ^6.0.3\n        \n            @compodoc/compodoc : ^1.1.3\n        \n            @material/fab : ^0.36.1\n        \n            chart.js : ^2.7.2\n        \n            core-js : ^2.5.4\n        \n            hammerjs : ^2.0.8\n        \n            nvm : 0.0.4\n        \n            rxjs : ^6.0.0\n        \n            zone.js : ^0.8.26\n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nWeatherAngular\nThis project was generated with Angular CLI version 6.0.5.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\nCreating documentation\nRun npm run generate-docs to create the documentation accessible from \\Weather-Angular\\documentation\\index.html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MaterialModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n            \n                \n                    \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAboutComponent\n\nAboutComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAboutComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nCityComponent\n\nCityComponent\n\nAppModule -->\n\nCityComponent->AppModule\n\n\n\n\n\nGraphsComponent\n\nGraphsComponent\n\nAppModule -->\n\nGraphsComponent->AppModule\n\n\n\n\n\nInitialComponent\n\nInitialComponent\n\nAppModule -->\n\nInitialComponent->AppModule\n\n\n\n\n\nInterceptorComponent\n\nInterceptorComponent\n\nAppModule -->\n\nInterceptorComponent->AppModule\n\n\n\n\n\nLogginDialogComponent\n\nLogginDialogComponent\n\nAppModule -->\n\nLogginDialogComponent->AppModule\n\n\n\n\n\nNavigationComponent\n\nNavigationComponent\n\nAppModule -->\n\nNavigationComponent->AppModule\n\n\n\n\n\nNewUserComponent\n\nNewUserComponent\n\nAppModule -->\n\nNewUserComponent->AppModule\n\n\n\n\n\nSettingsComponent\n\nSettingsComponent\n\nAppModule -->\n\nSettingsComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n                \n                \n                \n                    Zoom in\n                    Reset\n                    Zoom out\n                \n            \n\n    \n            \n                \n                    \n                        \n                        \n                            3 modules\n                        \n                    \n                \n            \n            \n                \n                    \n                        \n                        10 components\n                    \n                \n            \n            \n                \n                    \n                        \n                        8 injectables\n                    \n                \n            \n            \n                \n                    \n                        \n                        12 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        \n                            8 routes\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            context   (src/.../test.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            require   (src/.../test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        context:     \n\n                    \n                \n                    \n                        \n                            Default value : require.context('./', true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        require:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        environment:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        environment:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n\n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
