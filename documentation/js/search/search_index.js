var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/components/AboutComponent.html",[0,0.369,1,0.987]],["body/components/AboutComponent.html",[0,0.685,1,1.709,2,0.221,3,0.284,4,1.493,5,1.493,6,1.493,7,0.158,8,3.065,9,1.993,10,2.408,11,1.493,12,2.58,13,2.005,14,1.86,15,4.839,16,1.86,17,4.839,18,0.255,19,0.944,20,2.57,21,0.599,22,0.433,23,3.625,24,3.625,25,0.61,26,0.026,27,1.139,28,0.361,29,0.61,30,1.861,31,3.625,32,4.607,33,1.493,34,0.189,35,0.141,36,1.393,37,2.201,38,2.696,39,3.065,40,2.696,41,1.521,42,3.625,43,3.065,44,4.607,45,3.065,46,2.939,47,4.916,48,1.738,49,2.694,50,4.839,51,2.694,52,4.839,53,3.232,54,4.092,55,2.694,56,3.232,57,4.092,58,1.164,59,1.164,60,1.625,61,0.944,62,3.883,63,3.232,64,4.092,65,4.916,66,3.6,67,4.839,68,4.092,69,4.092,70,4.839,71,4.839,72,2.485,73,4.092,74,4.839,75,4.839,76,4.839,77,4.839,78,4.839,79,4.839,80,4.839,81,4.839,82,1.066,83,1.993,84,1.738,85,1.86,86,2.394,87,1.493,88,0.638,89,1.493,90,1.139,91,1.493,92,1.066,93,1.493,94,1.066,95,1.493,96,1.066,97,1.493,98,1.139,99,1.493,100,1.139,101,1.393,102,1.493,103,1.139,104,1.493,105,0.997,106,0.478,107,1.493,108,1.066,109,1.493,110,0.018,111,0.018]],["title/components/AppComponent.html",[0,0.369,90,1.055]],["body/components/AppComponent.html",[0,0.704,1,1.27,2,0.264,3,0.225,4,1.778,5,1.778,6,1.778,7,0.188,11,1.778,12,2.646,13,2.024,14,2.083,16,2.083,18,0.303,22,0.386,26,0.026,28,0.43,29,0.727,34,0.225,35,0.167,41,1.357,49,3.018,60,1.82,82,1.27,83,2.232,84,1.946,85,2.083,86,2.559,87,1.778,88,0.715,89,1.778,90,1.952,91,1.778,92,1.27,93,1.778,94,1.27,95,1.778,96,1.27,97,1.778,98,1.357,99,1.778,100,1.357,101,1.66,102,1.778,103,1.357,104,1.778,105,1.188,106,0.57,107,1.778,108,1.27,109,1.778,110,0.02,111,0.02,112,3.652,113,2.232,114,5.421,115,5.421,116,0.654,117,6.213,118,0.778,119,0.344,120,1.357,121,0.783,122,4.319]],["title/modules/AppModule.html",[123,1.484,124,2.243]],["body/modules/AppModule.html",[0,0.366,1,1.787,2,0.203,3,0.174,7,0.145,13,0.979,26,0.027,28,0.689,29,0.56,34,0.238,35,0.129,46,2.021,49,1.853,55,2.903,82,0.979,90,2.081,92,1.787,94,1.787,96,1.787,98,1.955,100,1.991,101,1.279,103,1.909,105,1.672,106,0.439,108,1.787,110,0.017,111,0.017,113,1.37,123,2.019,124,4.67,125,2.223,126,3.879,127,4.409,128,2.814,129,2.814,130,2.814,131,2.814,132,3.69,133,3.69,134,3.862,135,2.476,136,2.223,137,3.328,138,4.567,139,4.567,140,2.476,141,2.476,142,3.397,143,3.328,144,2.814,145,4.567,146,2.543,147,4.567,148,2.543,149,3.328,150,2.814,151,3.328,152,3.328,153,2.814,154,3.328,155,2.814,156,2.814,157,2.476,158,3.328,159,2.223,160,2.814,161,3.862,162,4.567,163,1.583,164,4.567,165,1.853,166,2.476,167,2.814,168,2.814,169,3.328,170,4.567,171,3.328,172,3.328,173,1.853,174,3.328,175,3.328,176,2.814,177,3.328,178,3.328,179,3.328,180,1.195,181,2.223,182,3.328,183,3.328,184,3.328,185,3.328]],["title/modules/AppRoutingModule.html",[123,1.484,132,2.039]],["body/modules/AppRoutingModule.html",[0,0.731,1,1.556,2,0.254,3,0.217,7,0.181,26,0.027,28,0.678,29,0.699,34,0.276,35,0.161,36,1.597,41,1.306,46,2.524,92,1.556,94,1.712,96,1.556,105,1.456,106,0.548,108,1.556,110,0.02,111,0.02,123,2.339,132,3.213,140,3.092,142,3.936,144,3.515,150,3.515,153,3.515,163,1.977,165,2.314,166,3.092,167,3.515,168,3.515,186,4.157,187,4.157,188,5.291,189,3.146,190,1.712,191,5.291,192,4.157,193,4.474,194,5.291,195,5.626,196,4.157,197,3.936,198,4.157,199,4.157,200,4.157,201,2.134,202,1.597,203,4.157,204,4.157,205,1.977,206,2.524,207,3.092,208,3.515,209,4.157,210,4.157,211,4.157,212,3.092]],["title/classes/CitiesResponse.html",[35,0.13,213,1.869]],["body/classes/CitiesResponse.html",[2,0.272,3,0.233,7,0.194,18,0.313,21,0.49,22,0.399,25,0.931,26,0.026,28,0.444,33,2.278,34,0.314,35,0.251,58,1.073,61,1.227,110,0.021,111,0.021,116,0.668,118,0.968,119,0.355,202,1.714,213,3.08,214,2.979,215,1.5,216,4.461,217,1.857,218,2.122,219,2.979,220,2.291,221,2.631,222,2.122,223,3.318,224,3.318,225,2.484,226,1.986,227,3.318,228,3.318,229,3.318,230,3.318,231,1.522,232,3.318,233,1.972,234,2.979,235,1.402,236,2.709,237,2.122,238,3.318,239,3.318,240,3.318,241,3.318,242,2.709]],["title/classes/CitiesResponseUnit.html",[35,0.13,242,2.039]],["body/classes/CitiesResponseUnit.html",[2,0.272,3,0.233,7,0.194,18,0.313,21,0.49,22,0.399,25,0.931,26,0.026,28,0.444,33,2.278,34,0.314,35,0.251,58,1.512,61,0.87,110,0.021,111,0.021,116,0.668,118,0.983,119,0.355,202,1.714,213,2.484,214,2.979,215,1.452,217,1.857,218,2.122,219,2.979,220,2.291,221,2.631,222,2.122,223,3.318,224,3.318,225,2.484,226,1.986,227,3.318,228,3.318,229,3.318,230,3.318,231,1.522,232,3.318,233,1.972,234,2.979,235,1.402,236,2.709,237,2.122,238,3.318,239,3.318,240,3.318,241,3.318,242,3.359,243,4.461]],["title/injectables/CitiesServerService.html",[244,0.808,245,2.039]],["body/injectables/CitiesServerService.html",[2,0.14,3,0.119,7,0.1,18,0.161,19,0.679,21,0.383,22,0.524,25,1.098,26,0.027,27,0.719,28,0.504,29,0.385,34,0.119,35,0.089,36,0.879,37,2.86,48,1.819,53,1.528,58,1.562,59,0.837,69,3.563,88,0.831,106,0.668,110,0.021,111,0.013,113,0.942,116,0.42,118,0.932,119,0.467,120,0.719,121,1.084,146,1.274,180,0.821,181,2.814,202,1.338,215,1.439,217,1.702,218,1.088,225,2.972,231,1.644,233,1.863,235,0.719,244,1.014,245,2.114,246,5.052,247,1.934,248,3.982,249,3.481,250,3.481,251,3.481,252,3.481,253,3.481,254,3.563,255,1.934,256,3.146,257,2.639,258,3.481,259,0.912,260,1.006,261,2.114,262,3.481,263,6.562,264,2.288,265,4.71,266,4.162,267,5.207,268,3.481,269,1.677,270,2.288,271,3.481,272,2.288,273,2.325,274,1.735,275,3.481,276,2.288,277,2.325,278,2.944,279,3.481,280,3.481,281,2.288,282,3.481,283,2.288,284,2.944,285,2.288,286,2.944,287,3.481,288,1.389,289,1.389,290,1.274,291,1.389,292,1.088,293,1.934,294,1.338,295,1.25,296,1.433,297,2.559,298,2.288,299,4.71,300,2.288,301,2.814,302,2.288,303,1.389,304,3.481,305,2.325,306,2.288,307,1.934,308,2.288,309,1.528,310,2.288,311,5.337,312,2.288,313,2.288,314,2.288,315,3.481,316,1.934,317,3.481,318,2.288,319,3.481,320,3.481,321,3.481,322,3.481,323,3.481,324,2.288,325,1.934,326,1.934,327,3.481,328,3.481,329,3.481,330,2.589,331,3.481,332,3.481,333,3.481,334,2.114,335,2.114,336,2.114,337,2.589,338,3.481,339,3.481,340,3.481,341,3.481,342,3.481,343,3.481,344,2.288,345,1.934,346,1.934,347,2.288,348,2.288,349,2.288,350,2.288,351,3.481,352,1.702,353,1.389,354,2.288,355,2.288,356,2.288,357,2.288,358,2.288,359,2.288,360,2.288,361,2.288]],["title/components/CityComponent.html",[0,0.369,92,0.987]],["body/components/CityComponent.html",[0,0.627,1,0.73,2,0.321,3,0.129,4,1.524,5,1.022,6,1.022,7,0.108,9,1.524,10,1.956,11,1.022,12,2.409,13,1.843,14,1.422,16,1.422,18,0.174,19,0.722,20,2.169,21,0.407,22,0.561,25,0.745,26,0.026,27,1.391,28,0.607,29,0.417,30,2.519,33,1.022,34,0.129,35,0.096,36,1.422,41,0.78,48,0.891,58,1.324,59,1.324,60,1.968,61,1.169,82,0.73,83,1.524,84,1.329,85,1.422,86,2.02,87,1.022,88,0.647,89,1.022,90,0.78,91,1.022,92,1.443,93,1.022,94,1.088,95,1.022,96,0.73,97,1.022,98,0.78,99,1.022,100,0.78,101,0.953,102,1.022,103,0.78,104,1.022,105,0.683,106,0.752,107,1.022,108,0.73,109,1.022,110,0.014,111,0.014,116,0.447,119,0.439,120,1.391,121,1.106,163,1.76,189,2.272,190,1.022,195,2.098,201,1.274,212,3.65,215,1.179,217,1.762,226,0.891,231,1.35,235,1.542,257,2.712,259,0.857,260,0.45,273,1.657,290,2.464,291,1.507,294,2.017,296,1.524,297,1.507,353,2.687,362,2.098,363,3.7,364,3.7,365,5.504,366,5.248,367,4.906,368,2.296,369,3.904,370,4.906,371,4.906,372,4.186,373,4.906,374,4.906,375,2.098,376,4.149,377,3.175,378,3.463,379,3.292,380,3.65,381,3.7,382,2.481,383,1.956,384,2.272,385,2.496,386,2.928,387,2.753,388,2.464,389,2.272,390,2.481,391,2.481,392,3.7,393,3.7,394,3.129,395,2.481,396,2.481,397,2.481,398,2.481,399,2.481,400,2.481,401,2.481,402,1.845,403,2.098,404,2.481,405,1.9,406,1.845,407,2.481,408,1.845,409,1.657,410,2.481,411,2.098,412,1.845,413,1.657,414,1.657,415,1.845,416,1.097,417,2.481,418,2.481,419,2.481,420,2.481,421,2.098,422,2.098,423,2.481,424,2.481,425,2.481,426,2.481,427,2.481,428,2.098,429,2.481,430,2.481,431,2.481,432,2.481,433,2.481,434,1.507,435,2.481,436,2.481,437,2.481,438,2.481,439,2.098,440,2.481,441,2.098,442,2.481,443,2.481,444,2.481,445,2.481,446,2.481,447,2.481,448,2.481,449,2.481,450,1.845,451,2.098,452,3.7,453,3.7,454,3.7,455,3.7]],["title/injectables/CloudsAndWindService.html",[244,0.808,456,2.243]],["body/injectables/CloudsAndWindService.html",[2,0.207,3,0.177,7,0.148,18,0.238,19,0.903,21,0.579,22,0.547,25,1.071,26,0.027,28,0.524,29,0.571,34,0.177,35,0.132,59,0.816,61,1.156,82,0.998,88,0.448,106,0.448,110,0.017,111,0.017,113,1.397,116,0.559,118,0.812,119,0.498,121,0.615,180,2.126,215,1.373,226,2.032,231,1.273,233,2.046,244,1.267,259,0.528,260,0.839,269,2,292,1.614,296,1.906,368,1.891,383,1.5,456,3.091,457,5.289,458,2.869,459,4.467,460,3.67,461,3.955,462,3.699,463,4.628,464,3.393,465,4.628,466,3.393,467,3.393,468,3.393,469,3.393,470,3.393,471,1.889,472,2.266,473,2.266,474,2.81,475,3.918,476,3.918,477,3.199,478,3.913,479,3.393,480,2.81,481,2.81,482,4.628,483,3.393,484,3.443,485,2.524,486,3.443,487,3.393,488,3.443,489,3.918,490,2.524,491,3.443,492,3.393,493,3.913,494,2.869,495,2.869,496,2.869,497,4.628,498,4.628,499,2.524,500,2.524,501,2.524,502,2.524,503,4.628,504,3.913,505,2.201,506,3.913,507,3.393,508,3.393]],["title/classes/Data.html",[35,0.13,61,0.655]],["body/classes/Data.html",[2,0.218,3,0.187,7,0.156,18,0.251,21,0.636,22,0.484,26,0.027,28,0.356,33,1.975,34,0.282,35,0.224,36,1.375,48,1.722,55,1.991,58,0.86,59,1.154,60,2.084,61,1.211,72,1.837,106,0.633,110,0.018,111,0.018,116,0.579,118,0.91,119,0.431,121,1.049,201,1.837,205,1.701,215,1.299,218,1.701,231,0.984,235,1.124,237,1.701,259,0.9,269,2.129,274,1.473,295,2.076,368,2.076,386,1.837,388,1.991,405,1.837,414,2.389,434,2.172,460,1.991,462,1.991,474,2.172,480,2.172,481,2.913,509,2.389,510,4.797,511,3.577,512,2.661,513,2.661,514,2.389,515,2.661,516,2.913,517,3.204,518,3.204,519,3.204,520,3.204,521,3.204,522,3.568,523,3.204,524,3.204,525,1.473,526,3.204,527,1.991,528,1.991,529,2.661,530,2.389,531,2.661,532,2.389,533,2.661,534,2.661,535,2.661,536,2.389,537,2.661,538,2.661,539,2.661,540,2.661,541,2.661,542,2.661,543,2.661,544,2.661,545,2.661,546,2.661,547,2.389,548,2.661,549,2.389,550,2.661,551,2.389,552,2.661,553,2.389,554,2.661,555,2.661,556,2.661,557,2.661,558,2.661,559,2.661,560,2.172,561,2.661,562,2.661,563,2.661,564,2.172,565,2.661,566,2.661,567,3.204,568,1.701,569,2.172]],["title/classes/Forecast.html",[35,0.13,368,1.206]],["body/classes/Forecast.html",[2,0.199,3,0.17,7,0.142,18,0.228,21,0.566,22,0.572,26,0.027,28,0.324,33,1.851,34,0.269,35,0.215,36,1.25,48,1.614,55,1.811,58,0.782,59,1.081,60,2.148,61,1.138,72,1.67,84,1.168,88,0.429,106,0.593,110,0.017,111,0.017,116,0.543,118,0.837,119,0.538,121,0.59,201,1.67,205,1.547,215,1.355,218,1.547,231,0.895,235,1.022,237,1.547,259,0.7,260,0.59,269,2.153,274,1.339,295,1.996,368,2.221,386,1.67,388,1.811,405,1.67,414,2.172,434,1.975,460,3.094,462,3.094,474,1.975,480,1.975,481,2.73,509,2.172,512,2.419,513,2.419,514,3.712,515,4.134,516,3.543,517,3.003,518,3.003,519,3.003,520,3.003,521,3.003,522,3.344,523,3.003,524,3.003,525,1.339,526,3.003,527,3.094,528,3.094,529,3.344,530,2.172,531,2.419,532,2.172,533,2.419,534,2.419,535,2.419,536,2.172,537,2.419,538,2.419,539,2.419,540,2.419,541,2.419,542,2.419,543,2.419,544,2.419,545,2.419,546,2.419,547,2.172,548,2.419,549,2.172,550,2.419,551,2.172,552,2.419,553,2.172,554,2.419,555,2.419,556,2.419,557,2.419,558,2.419,559,2.419,560,1.975,561,2.419,562,2.419,563,2.419,564,1.975,565,2.419,566,2.419,567,3.003,568,1.547,569,1.975,570,4.496,571,4.488,572,3.252,573,3.252,574,3.252,575,3.252,576,3.252,577,3.252,578,3.252]],["title/injectables/ForecastValuesService.html",[244,0.808,378,2.039]],["body/injectables/ForecastValuesService.html",[2,0.218,3,0.186,7,0.155,13,1.408,18,0.25,19,0.934,21,0.594,22,0.583,25,1.14,26,0.026,27,1.504,28,0.575,29,0.6,34,0.186,35,0.138,41,1.815,46,2.166,48,1.94,58,1.586,88,0.632,106,0.632,110,0.018,111,0.018,113,1.469,116,0.578,119,0.431,120,1.504,121,1.206,215,1.423,217,2.214,235,1.121,244,1.3,259,0.745,260,0.868,292,1.696,368,2.312,378,2.907,385,3.163,389,3.093,416,2.116,471,1.986,579,5.574,580,3.016,581,4.884,582,4.296,583,4.296,584,5.775,585,4.787,586,4.787,587,3.567,588,3.567,589,3.567,590,3.354,591,3.567,592,4.787,593,3.567,594,4.787,595,3.567,596,3.567,597,3.567,598,4.02,599,3.567,600,1.696,601,2.653,602,3.567,603,3.567,604,2.653,605,4.048,606,3.567,607,3.561]],["title/components/GraphsComponent.html",[0,0.369,94,0.987]],["body/components/GraphsComponent.html",[0,0.567,1,0.619,2,0.128,3,0.11,4,0.866,5,0.866,6,0.866,7,0.092,9,1.344,10,1.768,11,0.866,12,2.321,13,1.776,14,1.254,16,1.254,18,0.148,19,0.637,20,1.992,21,0.359,22,0.576,25,0.758,26,0.027,27,1.416,28,0.554,29,0.354,30,2.766,34,0.11,35,0.082,36,0.809,41,0.661,58,1.339,59,0.962,62,1.405,82,0.619,83,1.344,84,1.172,85,1.254,86,1.856,87,0.866,88,0.528,89,0.866,90,0.661,91,0.866,92,0.619,93,0.866,94,1.325,95,0.866,96,0.619,97,0.866,98,0.661,99,0.866,100,0.661,101,0.809,102,0.866,103,0.661,104,0.866,105,0.579,106,0.278,107,0.866,108,0.619,109,0.866,110,0.012,111,0.012,116,0.394,118,0.821,119,0.493,120,1.257,121,0.977,189,2.314,190,0.866,201,1.676,215,0.898,226,1.854,231,0.579,259,0.327,260,0.382,269,1.965,278,3.382,294,1.984,295,2.245,368,1.436,376,3.811,377,2.999,378,3.135,385,1.001,389,2.054,402,1.565,403,1.779,405,1.676,413,3.448,416,2.461,421,1.779,422,1.779,439,1.779,441,1.779,456,3.597,459,4.533,460,2.874,461,3.01,462,2.874,471,1.171,527,2.874,528,3.252,581,3.811,605,4.365,607,1.565,608,1.779,609,3.264,610,3.264,611,4.507,612,5.162,613,5.162,614,4.507,615,5.162,616,4.507,617,4.605,618,3.811,619,3.811,620,4.507,621,4.507,622,2.104,623,3.597,624,3.597,625,3.264,626,2.104,627,5.162,628,6.04,629,2.104,630,2.104,631,4.507,632,2.104,633,2.104,634,2.104,635,2.104,636,2.104,637,2.104,638,2.104,639,2.104,640,2.104,641,2.104,642,2.104,643,2.104,644,2.104,645,2.104,646,2.104,647,2.104,648,2.104,649,2.104,650,2.104,651,1.171,652,1.779,653,2.104,654,2.104,655,2.104,656,2.104,657,5.386,658,5.386,659,5.386,660,2.104,661,2.104,662,2.104,663,1.779,664,4.507,665,4.507,666,4.507,667,3.999,668,2.104,669,2.671,670,3.999,671,2.104,672,2.104]],["title/components/InitialComponent.html",[0,0.369,96,0.987]],["body/components/InitialComponent.html",[0,0.556,1,0.589,2,0.122,3,0.164,4,0.825,5,0.825,6,0.825,7,0.087,9,1.294,10,1.714,11,0.825,12,2.294,13,1.821,14,1.207,16,1.207,18,0.141,19,0.756,20,1.94,21,0.345,22,0.572,25,0.947,26,0.026,27,1.662,28,0.474,29,0.337,30,1.613,34,0.105,35,0.15,36,0.77,37,2.354,38,1.49,39,1.694,40,2.337,41,0.63,45,2.657,46,1.908,48,1.128,49,1.749,53,2.099,54,2.657,57,4.277,58,1.556,59,0.756,60,1.055,62,2.099,63,3.379,82,0.589,83,1.294,84,1.128,85,1.207,86,1.807,87,0.825,88,0.667,89,0.825,90,0.63,91,0.825,92,0.589,93,0.825,94,0.589,95,0.825,96,1.291,97,0.825,98,0.63,99,0.825,100,0.63,101,0.77,102,0.825,103,0.63,104,0.825,105,0.551,106,0.579,107,0.825,108,0.589,109,0.825,110,0.02,111,0.012,116,0.379,118,0.827,119,0.459,120,1.662,121,1.021,146,1.116,173,1.749,176,3.278,180,0.719,181,2.099,197,2.884,205,1.495,207,1.49,215,1.188,217,1.839,225,2.654,226,1.576,233,1.389,235,0.63,245,2.665,254,1.694,256,2.932,259,0.312,260,0.796,261,2.354,266,4.38,267,4.472,273,3.184,274,1.294,277,2.589,294,1.49,295,0.719,296,1.963,301,1.338,303,1.908,305,1.338,309,2.099,369,1.49,377,2.816,384,1.991,402,1.49,408,3.265,409,2.099,412,2.337,415,1.49,505,1.844,568,2.088,582,3.763,669,2.932,673,1.694,674,3.142,675,3.142,676,5.631,677,4.389,678,4.389,679,5.059,680,4.389,681,4.389,682,3.712,683,4.389,684,4.389,685,4.389,686,4.389,687,4.389,688,2.932,689,3.876,690,3.142,691,2.004,692,3.876,693,3.142,694,2.004,695,3.142,696,2.004,697,3.142,698,2.004,699,2.004,700,3.876,701,3.142,702,3.142,703,3.142,704,4.768,705,2.004,706,4.032,707,4.389,708,2.004,709,3.876,710,3.142,711,2.004,712,1.908,713,2.004,714,3.142,715,2.004,716,2.657,717,2.657,718,2.337,719,2.004,720,2.004,721,3.142,722,2.004,723,2.004,724,2.004,725,2.004,726,2.004,727,4.472,728,2.004,729,2.004,730,2.004,731,1.694,732,2.004,733,2.004,734,1.694,735,3.142,736,3.876,737,2.004,738,2.004,739,1.694,740,2.004,741,3.142,742,2.004,743,2.004,744,2.004,745,2.004,746,1.694,747,1.694,748,1.694,749,1.694,750,1.694,751,1.694,752,2.004,753,2.004,754,2.004,755,1.694,756,1.694,757,2.004,758,3.876,759,3.142,760,3.876,761,2.657,762,3.142,763,2.004,764,2.004,765,2.004,766,2.004,767,2.004,768,2.004,769,3.142,770,1.694,771,2.004,772,2.004,773,3.142,774,2.004,775,2.004,776,2.004,777,2.004,778,2.004,779,2.004,780,2.004,781,3.142,782,2.004,783,2.004,784,2.004,785,2.004,786,2.004,787,3.876,788,2.004,789,2.004,790,2.004,791,2.004,792,3.142,793,3.142,794,3.142,795,2.099,796,3.142,797,3.142,798,3.142,799,3.142]],["title/components/InterceptorComponent.html",[0,0.369,98,1.055]],["body/components/InterceptorComponent.html",[0,0.689,1,1.085,2,0.225,3,0.193,4,1.52,5,1.52,6,1.52,7,0.161,9,2.017,11,1.52,12,2.587,13,1.98,14,1.882,16,1.882,18,0.259,19,0.956,21,0.406,22,0.438,25,0.985,26,0.026,28,0.606,29,0.621,34,0.193,35,0.143,41,1.16,82,1.085,83,2.017,84,1.759,85,1.882,86,2.411,87,1.52,88,0.772,89,1.52,90,1.16,91,1.52,92,1.085,93,1.52,94,1.085,95,1.52,96,1.085,97,1.52,98,1.84,99,1.52,100,1.16,101,1.418,102,1.52,103,1.16,104,1.52,105,1.015,106,0.487,107,1.52,108,1.085,109,1.52,110,0.018,111,0.018,119,0.438,146,2.055,259,0.762,260,0.888,261,2.241,277,2.465,303,3.338,337,2.745,385,1.756,416,1.631,590,3.06,600,1.756,651,2.055,800,3.121,801,5.497,802,5.855,803,4.898,804,4.898,805,5.497,806,3.691,807,2.785,808,3.691,809,4.141,810,4.898,811,4.951,812,5.497,813,5.855,814,3.691,815,3.691,816,2.241,817,3.691,818,3.691,819,2.745,820,3.121,821,3.691,822,5.497,823,4.898,824,3.691,825,3.121,826,3.691,827,3.691,828,3.121,829,2.745,830,2.745,831,3.121,832,4.898]],["title/injectables/LogService.html",[244,0.808,807,1.597]],["body/injectables/LogService.html",[2,0.254,3,0.095,7,0.079,13,0.854,18,0.127,19,0.567,21,0.319,22,0.553,25,1.049,26,0.027,27,1.599,28,0.543,29,0.305,33,1.196,34,0.095,35,0.07,36,0.697,37,2.758,41,0.57,48,1.304,51,2.698,53,1.212,56,3.034,58,1.487,59,1.093,61,0.567,62,1.212,88,0.671,106,0.698,110,0.011,111,0.011,113,0.747,116,0.351,118,0.957,119,0.464,120,1.305,121,0.659,146,1.01,163,0.863,190,0.747,202,2.302,205,0.863,213,1.01,215,0.816,217,0.975,219,1.212,220,2.613,221,2.811,222,2.966,225,2.944,233,1.284,235,0.913,236,1.764,237,0.863,244,0.874,245,3.09,248,3.511,256,2.773,257,2.305,259,0.754,260,0.879,261,2.205,274,2.353,286,2.456,290,2.698,291,1.102,292,0.863,293,1.534,294,1.745,295,1.043,297,3.09,301,1.212,303,2.205,305,1.94,307,1.534,309,3.034,325,3.071,326,1.534,337,1.35,345,2.456,346,2.456,352,3.088,353,1.764,379,2.702,380,3.088,383,1.284,384,1.865,385,1.728,389,2.715,409,1.212,416,1.284,450,3.785,477,1.764,568,0.863,569,2.205,583,3.088,590,2.698,598,3.605,600,0.863,604,1.35,651,2.312,652,1.534,688,1.212,712,1.764,731,1.534,756,2.456,807,1.381,809,3.511,811,1.534,819,4.056,825,2.456,828,2.456,829,2.161,830,1.35,831,3.071,833,1.534,834,4.152,835,4.097,836,4.152,837,2.904,838,4.152,839,2.904,840,4.152,841,2.904,842,4.152,843,2.904,844,4.152,845,1.814,846,2.833,847,2.904,848,1.814,849,2.773,850,2.904,851,1.814,852,3.632,853,4.152,854,2.904,855,1.814,856,2.904,857,1.814,858,1.814,859,1.814,860,2.904,861,2.529,862,2.904,863,1.814,864,1.814,865,2.456,866,2.904,867,1.814,868,1.814,869,1.814,870,1.814,871,1.814,872,1.814,873,1.814,874,3.071,875,1.814,876,1.814,877,3.511,878,2.904,879,1.814,880,2.904,881,3.071,882,3.071,883,1.814,884,1.814,885,1.35,886,1.534,887,1.814,888,1.814,889,3.632,890,1.814,891,1.814,892,1.814,893,2.456,894,1.814,895,1.814,896,4.152,897,2.904,898,1.814,899,2.904,900,2.904,901,2.904,902,3.632,903,2.904,904,2.904,905,2.904,906,2.904,907,2.904,908,1.534,909,1.814,910,3.511,911,2.904,912,2.904,913,2.904,914,2.904,915,1.814,916,2.904,917,3.632,918,1.814,919,2.904,920,1.814,921,1.814,922,1.814,923,1.814,924,1.814,925,1.814,926,1.814,927,1.534,928,1.814,929,1.814,930,1.814,931,1.814,932,1.814,933,2.904,934,1.814,935,1.814,936,1.814,937,1.814,938,1.814,939,1.814,940,4.152,941,1.814,942,1.814,943,1.534,944,2.904,945,2.904,946,1.814,947,1.814,948,1.814,949,1.814,950,1.814,951,1.814,952,1.814,953,1.102,954,1.814,955,1.814,956,1.814,957,1.814]],["title/components/LogginDialogComponent.html",[0,0.369,100,1.055]],["body/components/LogginDialogComponent.html",[0,0.689,1,0.772,2,0.16,3,0.137,4,1.081,5,1.081,6,1.081,7,0.114,9,1.589,10,2.022,11,1.081,12,2.437,13,1.865,14,1.483,16,1.483,18,0.184,19,0.753,20,2.229,21,0.424,22,0.573,25,1.002,26,0.026,27,1.585,28,0.502,29,0.442,30,1.981,34,0.137,35,0.102,41,0.825,61,0.893,82,0.772,83,1.589,84,1.386,85,1.483,86,2.077,87,1.081,88,0.604,89,1.081,90,0.825,91,1.081,92,0.772,93,1.081,94,0.772,95,1.081,96,0.772,97,1.081,98,0.825,99,1.081,100,1.585,101,2.232,102,1.081,103,0.825,104,1.081,105,0.722,106,0.665,107,1.081,108,0.772,109,1.081,110,0.014,111,0.014,116,0.466,118,0.873,119,0.428,120,1.585,121,0.915,148,1.462,159,4.315,163,1.249,173,1.462,180,1.811,189,1.348,190,1.081,202,1.758,206,2.778,221,2.892,222,2.762,237,1.249,259,0.409,260,0.476,294,1.483,295,1.811,296,2.504,297,2.343,413,2.577,488,1.953,525,2.077,688,2.577,706,2.22,795,3.368,846,3.233,849,3.589,861,2.992,958,5.463,959,2.22,960,4.911,961,3.859,962,3.859,963,3.263,964,5.043,965,5.043,966,5.043,967,5.043,968,5.043,969,5.043,970,3.752,971,2.625,972,4.265,973,3.859,974,3.263,975,2.625,976,3.263,977,3.263,978,3.263,979,2.625,980,2.625,981,2.625,982,3.368,983,2.625,984,3.589,985,2.625,986,2.625,987,2.625,988,2.625,989,2.625,990,2.625,991,2.625,992,2.625,993,4.575,994,4.575,995,2.625,996,2.625,997,1.953,998,2.625,999,2.625,1000,1.953,1001,2.577,1002,2.625,1003,2.625,1004,1.953,1005,2.625,1006,3.859,1007,3.859,1008,3.859,1009,3.859,1010,2.625,1011,2.148,1012,2.625,1013,2.625,1014,2.625,1015,2.625,1016,2.625,1017,2.625,1018,2.625,1019,3.859,1020,3.859,1021,3.859,1022,3.263]],["title/modules/MaterialModule.html",[123,1.484,133,2.039]],["body/modules/MaterialModule.html",[0,0.48,2,0.267,3,0.228,7,0.19,26,0.026,28,0.652,29,0.734,34,0.311,35,0.169,84,1.567,110,0.02,111,0.02,123,1.929,126,3.247,133,3.615,142,4.059,161,5.034,163,2.076,193,5.034,739,3.691,755,3.691,1023,4.365,1024,5.457,1025,3.691,1026,5.954,1027,5.954,1028,5.954,1029,5.954,1030,5.954,1031,5.954,1032,5.954,1033,5.954,1034,5.954,1035,5.954,1036,5.954,1037,5.954,1038,5.954,1039,5.954,1040,5.954,1041,5.954,1042,5.954,1043,5.954,1044,5.954,1045,5.954,1046,4.365,1047,4.365,1048,4.365,1049,4.365,1050,4.365]],["title/components/NavigationComponent.html",[0,0.369,103,1.055]],["body/components/NavigationComponent.html",[0,0.586,1,0.546,2,0.113,3,0.097,4,0.764,5,0.764,6,0.764,7,0.081,9,1.218,10,1.63,11,0.764,12,2.249,13,1.721,14,1.136,16,1.136,18,0.13,19,0.719,20,1.859,21,0.325,22,0.583,25,0.967,26,0.027,27,1.77,28,0.547,29,0.312,30,2.637,34,0.097,35,0.072,36,0.713,37,1.127,38,1.38,40,2.2,41,1.443,43,1.569,44,1.569,49,1.646,56,3.429,58,1.48,59,1.177,60,0.993,61,0.362,66,4.42,72,0.953,82,0.546,83,1.218,84,1.062,85,1.136,86,1.732,87,0.764,88,0.486,89,0.764,90,0.583,91,0.764,92,0.546,93,0.764,94,0.546,95,0.764,96,0.546,97,0.764,98,0.583,99,0.764,100,0.929,101,1.136,102,0.764,103,1.321,104,0.764,105,0.511,106,0.245,107,0.764,108,0.546,109,0.764,110,0.011,111,0.011,116,0.357,118,0.659,119,0.458,120,1.538,121,0.888,136,2.809,159,1.239,160,1.569,163,0.883,180,1.062,190,0.764,197,2.2,202,1.417,206,1.796,212,1.38,217,1.891,226,0.666,257,2.536,259,0.289,260,0.763,284,2.501,290,2.557,291,1.127,294,1.616,295,1.51,296,2.508,297,1.127,301,1.975,316,1.569,353,3.237,375,1.569,379,2.743,380,3.128,384,1.893,385,2,389,1.893,394,1.569,413,1.975,415,1.38,416,1.63,450,1.38,451,1.569,477,1.127,496,1.569,505,0.883,568,2.442,582,2.743,590,2.341,600,0.883,651,3.258,682,1.569,688,2.809,712,2.554,716,1.569,727,3.556,751,2.501,761,1.569,770,2.501,807,2.442,816,1.127,819,3.128,829,1.38,846,2.725,849,2.462,861,3.595,885,1.38,886,1.569,893,3.118,908,1.569,927,1.569,953,1.796,960,4.762,963,1.127,972,3.556,974,3.556,976,3.118,1011,1.646,1022,2.501,1051,1.569,1052,3.118,1053,2.957,1054,2.957,1055,4.206,1056,3.687,1057,4.206,1058,4.206,1059,3.556,1060,4.206,1061,4.206,1062,4.894,1063,4.206,1064,4.206,1065,3.884,1066,4.206,1067,3.556,1068,4.206,1069,4.206,1070,4.206,1071,4.206,1072,4.206,1073,3.556,1074,4.894,1075,2.957,1076,1.856,1077,1.856,1078,2.957,1079,1.856,1080,1.856,1081,1.856,1082,2.957,1083,2.501,1084,2.957,1085,1.856,1086,2.957,1087,1.856,1088,1.856,1089,2.957,1090,1.856,1091,3.687,1092,1.856,1093,2.501,1094,1.856,1095,3.118,1096,1.856,1097,1.856,1098,1.856,1099,1.856,1100,1.856,1101,1.856,1102,1.856,1103,1.856,1104,1.856,1105,1.856,1106,1.856,1107,1.856,1108,1.856,1109,1.856,1110,2.501,1111,1.856,1112,1.856,1113,1.856,1114,1.856,1115,1.239,1116,1.856,1117,1.856,1118,1.856,1119,1.856,1120,1.856,1121,1.856,1122,1.856,1123,1.569,1124,4.894,1125,1.856,1126,1.856,1127,1.569,1128,1.856,1129,2.957,1130,1.856,1131,1.856,1132,1.856,1133,1.856,1134,1.856,1135,4.206,1136,3.687,1137,4.593,1138,4.206,1139,1.856,1140,1.856,1141,1.856,1142,1.856,1143,1.856,1144,1.856,1145,1.856,1146,1.856,1147,1.856,1148,1.856,1149,1.856,1150,2.957,1151,1.856,1152,2.501,1153,2.957,1154,2.957,1155,2.957,1156,2.957,1157,2.501,1158,1.975]],["title/components/NewUserComponent.html",[0,0.369,105,0.924]],["body/components/NewUserComponent.html",[0,0.654,1,0.916,2,0.266,3,0.163,4,1.283,5,1.283,6,1.283,7,0.136,9,1.797,10,2.226,11,1.283,12,2.516,13,1.926,14,1.677,16,1.677,18,0.219,19,0.851,20,2.411,21,0.48,22,0.532,25,0.918,26,0.026,27,1.582,28,0.543,29,0.524,34,0.228,35,0.169,41,0.979,51,3.197,59,1.211,82,0.916,83,1.797,84,1.567,85,1.677,86,2.246,87,1.283,88,0.664,89,1.283,90,0.979,91,1.283,92,0.916,93,1.283,94,0.916,95,1.283,96,0.916,97,1.283,98,0.979,99,1.283,100,0.979,101,1.197,102,1.283,103,0.979,104,1.283,105,1.501,106,0.847,107,1.283,108,0.916,109,1.283,110,0.016,111,0.016,116,0.527,118,0.723,119,0.401,121,0.565,148,1.734,165,3.402,173,1.734,180,1.119,190,1.283,202,2.207,221,1.482,222,2.075,259,0.485,260,0.565,294,1.677,384,2.585,406,2.317,601,2.317,718,2.317,807,2.907,816,1.892,846,1.734,861,2.803,953,2.649,963,3.898,970,4.058,982,4.165,984,3.644,997,2.317,1000,2.317,1001,3.363,1004,2.317,1011,1.734,1115,2.914,1159,4.546,1160,2.317,1161,3.689,1162,3.689,1163,4.272,1164,4.613,1165,3.115,1166,4.428,1167,4.363,1168,3.115,1169,3.115,1170,3.115,1171,3.115,1172,3.245,1173,2.634,1174,2.317,1175,3.745,1176,3.245,1177,2.317,1178,2.634,1179,2.634,1180,2.634,1181,2.634,1182,1.892,1183,2.634,1184,2.634,1185,2.634,1186,2.634,1187,2.634,1188,2.634,1189,2.634,1190,2.634,1191,2.634,1192,2.634]],["title/classes/PasswordValidation.html",[35,0.13,1182,2.039]],["body/classes/PasswordValidation.html",[0,0.615,2,0.306,3,0.2,7,0.166,9,1.575,10,2.216,12,1.469,13,1.124,14,1.469,16,1.469,18,0.269,19,0.978,20,1.69,21,0.42,22,0.342,25,0.844,26,0.027,28,0.591,29,0.643,34,0.262,35,0.217,51,3.114,59,1.206,88,0.504,105,1.052,106,0.813,110,0.019,111,0.019,118,0.549,119,0.305,121,0.694,148,2.129,165,2.791,173,2.129,180,1.373,190,1.575,202,2.15,221,1.819,222,2.661,259,0.595,260,0.694,294,1.927,384,2.574,406,2.845,525,1.575,601,2.845,718,3.729,807,2.661,816,2.322,846,2.129,861,2.791,963,3.743,970,2.845,982,4.305,984,3.349,997,2.845,1000,2.845,1001,3.736,1004,2.845,1011,2.129,1115,2.554,1159,3.729,1160,2.845,1161,3.233,1162,3.233,1163,3.729,1164,3.233,1166,4.161,1172,4.416,1173,3.233,1174,2.845,1175,4.161,1176,3.729,1177,2.845,1178,3.233,1179,3.233,1180,3.233,1181,4.239,1182,3.044,1183,4.73,1184,4.239,1185,3.233,1186,3.233,1187,3.233,1188,3.233,1189,3.233,1190,3.233,1191,3.233,1192,4.73,1193,3.824,1194,3.824]],["title/injectables/RainAndSnowService.html",[244,0.808,624,2.243]],["body/injectables/RainAndSnowService.html",[2,0.217,3,0.185,7,0.155,18,0.249,19,0.931,21,0.593,22,0.554,25,1.082,26,0.026,28,0.537,29,0.597,34,0.185,35,0.138,59,0.854,61,1.174,82,1.044,88,0.468,106,0.468,110,0.018,111,0.018,113,1.462,116,0.576,118,0.828,119,0.494,121,0.644,180,2.07,215,1.392,226,1.936,233,2.11,244,1.297,259,0.553,260,0.866,269,2.022,292,1.689,296,1.965,368,2.16,383,1.57,459,4.498,461,4.018,471,1.977,472,2.372,473,2.372,475,4.011,476,4.011,477,3.274,484,3.551,485,2.641,486,3.551,488,2.641,489,4.011,490,2.641,491,3.551,493,4.036,494,3.003,499,2.641,500,2.641,501,2.641,502,2.641,527,3.629,528,3.629,560,2.898,564,2.898,624,3.188,1195,5.352,1196,3.003,1197,4.773,1198,4.773,1199,4.773,1200,3.551,1201,3.551,1202,3.551,1203,3.551,1204,5.765,1205,3.551,1206,3.551,1207,3.551,1208,4.036,1209,3.551]],["title/classes/RespuestaForecast.html",[35,0.13,405,1.724]],["body/classes/RespuestaForecast.html",[2,0.221,3,0.189,7,0.158,18,0.255,21,0.639,22,0.433,26,0.027,28,0.361,33,1.993,34,0.284,35,0.225,36,1.393,48,1.738,55,2.018,58,0.872,59,1.164,60,2.092,61,1.182,72,1.861,106,0.638,110,0.018,111,0.018,116,0.584,118,0.782,119,0.386,121,0.658,201,1.861,205,1.724,215,1.4,218,1.724,231,0.997,235,1.139,237,1.724,259,0.564,269,2.133,274,1.493,295,2.087,368,2.087,386,1.861,388,2.018,405,2.485,414,2.421,434,2.201,460,2.018,462,2.018,474,2.201,480,2.201,481,2.939,509,2.421,512,2.696,513,2.696,514,2.421,515,2.696,516,2.939,517,3.232,518,3.232,519,3.232,520,3.232,521,3.232,522,3.6,523,3.232,524,3.232,525,1.493,526,3.232,527,2.018,528,2.018,529,2.696,530,2.421,531,2.696,532,2.421,533,2.696,534,2.696,535,2.696,536,2.421,537,2.696,538,2.696,539,2.696,540,2.696,541,2.696,542,2.696,543,2.696,544,2.696,545,2.696,546,2.696,547,2.421,548,2.696,549,2.421,550,2.696,551,2.421,552,2.696,553,2.421,554,2.696,555,2.696,556,2.696,557,2.696,558,2.696,559,2.696,560,2.201,561,2.696,562,2.696,563,2.696,564,2.201,565,2.696,566,2.696,567,3.232,568,2.765,569,2.201,1210,4.839]],["title/injectables/SavedCitiesService.html",[244,0.808,257,1.597]],["body/injectables/SavedCitiesService.html",[2,0.194,3,0.166,7,0.138,18,0.223,19,0.864,21,0.56,22,0.561,25,1.114,26,0.026,27,1.391,28,0.507,29,0.535,34,0.166,35,0.123,58,1.671,59,0.765,61,0.864,88,0.42,106,0.763,110,0.016,111,0.016,113,1.31,116,0.534,119,0.406,120,0.999,121,0.923,173,2.464,215,0.714,217,2.224,218,1.513,244,1.225,257,2.105,259,0.495,260,0.577,273,3.677,290,3.336,292,1.513,295,1.142,309,2.956,330,2.366,352,4.095,383,1.957,389,3.345,408,3.293,411,4.655,412,3.293,416,1.406,568,3.218,569,1.931,583,4.095,590,3.687,598,4.095,600,1.513,604,2.366,607,4.095,651,1.771,712,1.931,717,2.689,746,2.689,747,2.689,748,2.689,749,2.689,750,2.689,865,2.689,885,3.293,943,2.689,1011,1.771,1065,4.655,1158,2.124,1211,5.383,1212,2.689,1213,5.505,1214,4.426,1215,3.18,1216,4.426,1217,4.426,1218,4.426,1219,3.18,1220,3.18,1221,4.426,1222,4.426,1223,3.18,1224,4.426,1225,3.18,1226,3.18,1227,3.18,1228,3.18,1229,3.18,1230,5.091,1231,3.18,1232,3.18,1233,3.18,1234,3.18,1235,3.18,1236,3.18,1237,3.18,1238,3.18,1239,3.18,1240,3.18,1241,3.18,1242,3.18,1243,3.18,1244,3.18,1245,3.18,1246,3.18,1247,3.18,1248,3.18,1249,3.18,1250,3.18]],["title/classes/SavedCity.html",[35,0.13,217,1.128]],["body/classes/SavedCity.html",[2,0.226,3,0.193,7,0.161,18,0.26,19,0.958,21,0.407,22,0.572,25,0.826,26,0.027,34,0.193,35,0.213,48,1.329,58,1.181,61,0.722,88,0.857,110,0.018,111,0.018,116,0.592,118,1.003,119,0.529,181,3.278,217,1.648,226,1.329,231,1.808,235,1.163,259,0.576,260,0.671,266,2.473,269,2.04,274,2.021,334,4.063,335,3.884,336,3.884,353,2.248,387,3.651,505,2.334,525,1.524,571,4.361,669,3.278,1110,3.13,1251,3.13,1252,4.957,1253,4.957,1254,5.862,1255,3.651,1256,3.702,1257,3.702,1258,3.702,1259,3.702,1260,3.702,1261,3.702,1262,3.702,1263,3.278,1264,3.278,1265,3.13,1266,3.13,1267,3.13,1268,3.13,1269,3.13]],["title/classes/ServedCity.html",[35,0.13,289,2.039]],["body/classes/ServedCity.html",[2,0.253,3,0.217,7,0.181,18,0.291,21,0.456,22,0.578,26,0.026,34,0.276,35,0.237,61,0.81,88,0.867,110,0.022,111,0.02,116,0.638,118,0.983,119,0.524,215,0.932,231,1.83,236,2.52,259,0.646,260,0.753,269,2.195,274,1.709,288,2.52,289,3.21,305,2.771,334,4.039,335,4.039,336,4.039,505,2.514,525,1.709,1083,3.509,1255,3.932,1263,2.771,1264,2.771,1270,3.087,1271,3.509,1272,5.285,1273,4.149,1274,4.149,1275,4.149,1276,4.149,1277,3.509,1278,3.509,1279,3.509]],["title/classes/ServerResponse.html",[35,0.13,288,2.039]],["body/classes/ServerResponse.html",[2,0.289,3,0.247,7,0.206,18,0.333,22,0.424,26,0.026,34,0.299,35,0.239,61,1.252,88,0.757,110,0.021,111,0.021,116,0.693,118,0.921,119,0.378,215,1.387,231,1.699,269,2.099,288,3.485,289,2.877,334,3.75,335,3.75,336,3.75,505,2.73,1255,3.525,1263,3.165,1264,3.165,1270,3.525,1277,4.007,1278,4.007,1279,4.007,1280,4.738]],["title/components/SettingsComponent.html",[0,0.369,108,0.987]],["body/components/SettingsComponent.html",[0,0.567,1,0.619,2,0.244,3,0.11,4,0.866,5,0.866,6,0.866,7,0.092,9,1.344,10,1.768,11,0.866,12,2.321,13,1.776,14,1.254,16,1.254,18,0.148,19,0.78,20,1.992,21,0.359,22,0.585,25,1.016,26,0.026,27,1.898,28,0.554,29,0.354,30,2.858,34,0.11,35,0.082,41,1.622,56,2.18,59,1.174,66,3.353,82,0.619,83,1.344,84,1.172,85,1.254,86,1.856,87,0.866,88,0.595,89,0.866,90,0.661,91,0.866,92,0.619,93,0.866,94,0.619,95,0.866,96,0.619,97,0.866,98,0.661,99,0.866,100,0.661,101,0.809,102,0.866,103,0.661,104,0.866,105,0.579,106,0.431,107,0.866,108,1.325,109,0.866,110,0.012,111,0.012,116,0.394,118,0.574,119,0.429,120,1.533,121,0.885,135,1.565,148,1.171,165,1.171,166,1.565,180,1.934,190,0.866,202,1.875,206,1.982,207,1.565,208,2.76,220,2.505,221,1.001,222,2.945,257,2.562,259,0.508,260,0.818,269,1.026,277,1.405,290,1.171,291,1.278,294,1.732,295,0.755,296,2.405,383,1.443,384,2.766,385,1.902,389,1.676,416,2.582,600,1.001,651,3.565,807,2.144,816,1.278,830,1.565,835,3.811,846,2.999,849,2.18,861,3.099,877,1.779,881,1.779,882,1.779,910,1.779,953,1.982,963,3.716,982,3.718,984,3.597,1001,2.671,1052,1.779,1059,3.811,1067,3.811,1073,3.811,1095,2.76,1123,1.779,1127,1.779,1152,3.811,1157,2.76,1158,2.18,1163,1.565,1166,4.006,1172,1.565,1174,2.428,1175,2.975,1176,2.975,1177,1.565,1182,1.278,1281,1.779,1282,3.264,1283,3.264,1284,4.507,1285,4.507,1286,4.507,1287,4.507,1288,4.507,1289,4.507,1290,4.507,1291,4.507,1292,4.507,1293,4.507,1294,4.507,1295,4.878,1296,4.507,1297,4.507,1298,4.507,1299,4.507,1300,2.104,1301,3.264,1302,2.104,1303,3.811,1304,6.308,1305,2.104,1306,3.264,1307,2.104,1308,2.104,1309,2.104,1310,2.104,1311,2.104,1312,2.104,1313,2.104,1314,3.264,1315,2.104,1316,2.104,1317,2.104,1318,2.76,1319,2.104,1320,2.104,1321,2.104,1322,2.104,1323,2.104,1324,2.104,1325,2.104,1326,3.264,1327,2.104,1328,2.104,1329,2.104,1330,2.104,1331,3.264,1332,2.104,1333,3.264,1334,3.264,1335,2.104,1336,2.104,1337,2.104,1338,2.104,1339,2.104,1340,2.104,1341,2.104,1342,2.104,1343,2.104,1344,2.104,1345,3.999,1346,3.999,1347,3.999,1348,3.264,1349,3.264,1350,3.264,1351,2.104,1352,2.104,1353,2.104,1354,2.104]],["title/injectables/TemperatureService.html",[244,0.808,623,2.243]],["body/injectables/TemperatureService.html",[2,0.207,3,0.177,7,0.148,18,0.239,19,0.904,21,0.579,22,0.56,25,1.087,26,0.027,28,0.525,29,0.572,34,0.177,35,0.132,59,0.817,61,1.193,82,0.999,88,0.448,106,0.448,110,0.017,111,0.017,113,1.399,116,0.559,118,0.813,119,0.499,121,0.616,180,2.033,215,1.406,226,1.893,233,2.33,244,1.268,259,0.529,260,0.84,269,2.088,292,1.616,296,2.17,368,1.893,383,1.502,459,4.468,461,3.957,471,1.892,472,2.269,473,2.269,475,4.211,476,4.211,477,3.438,484,3.446,485,2.527,486,3.446,489,4.407,490,2.527,491,3.921,495,2.873,499,2.527,500,2.527,501,2.527,502,2.527,504,2.873,506,2.873,617,4.977,618,4.787,619,4.787,623,3.094,663,3.917,1208,2.873,1355,2.873,1356,4.632,1357,4.632,1358,4.632,1359,3.397,1360,3.397,1361,3.397,1362,3.397,1363,3.397,1364,3.397,1365,6.114,1366,3.397,1367,4.457,1368,4.632,1369,3.397,1370,3.397,1371,4.632,1372,3.397,1373,3.397,1374,3.397,1375,3.397,1376,3.397]],["title/classes/UserServer.html",[35,0.13,220,1.724]],["body/classes/UserServer.html",[2,0.236,3,0.201,7,0.168,18,0.271,19,0.984,21,0.618,22,0.586,25,1.04,26,0.026,27,1.213,28,0.384,33,2.454,34,0.293,35,0.246,58,0.929,61,0.753,88,0.509,110,0.019,111,0.019,116,0.609,118,0.996,119,0.505,202,1.939,213,2.149,214,2.578,215,1.523,217,1.694,218,2.4,219,3.369,220,2.59,221,2.941,222,2.834,223,4.433,224,4.433,225,3.318,226,2.277,227,2.872,228,2.872,229,2.872,230,2.872,231,1.546,232,2.872,233,2.23,234,3.369,235,1.585,236,3.063,237,2.4,238,3.753,239,2.872,240,2.872,241,2.872,242,2.344,259,0.601,260,0.7,525,1.59,568,1.836,1377,5.045,1378,5.045,1379,3.86,1380,3.86,1381,3.86,1382,3.86,1383,3.86,1384,3.86]],["title/classes/Weather.html",[35,0.13,60,1.128]],["body/classes/Weather.html",[2,0.295,3,0.252,7,0.21,18,0.339,21,0.685,22,0.591,26,0.025,34,0.252,35,0.225,60,1.95,72,3.317,110,0.022,111,0.022,116,0.701,118,0.989,119,0.515,231,1.778,269,1.957,516,3.923,525,2.66,1385,4.086,1386,5.808,1387,4.832,1388,4.832,1389,4.832]],["title/classes/WeatherNow.html",[35,0.13,372,2.243]],["body/classes/WeatherNow.html",[0,0.362,2,0.246,3,0.111,7,0.093,18,0.149,19,0.642,21,0.443,22,0.577,25,0.872,26,0.027,27,1.034,28,0.327,33,1.355,34,0.111,35,0.201,41,1.424,51,1.832,58,0.792,60,2.06,61,1.09,63,2.198,72,1.69,85,0.817,88,0.713,106,0.598,110,0.02,111,0.012,116,0.397,118,0.907,119,0.535,120,1.034,121,0.822,205,1.565,215,1.378,226,1.627,231,1.612,235,1.034,259,0.705,260,0.597,269,2.13,274,1.355,295,1.446,330,1.581,334,2.445,335,1.998,336,1.998,369,1.581,372,3.274,385,1.565,386,1.69,387,3.371,388,2.523,428,2.783,434,2.752,460,2.729,462,2.729,471,1.184,473,2.198,474,1.291,478,1.798,480,1.291,481,2.445,505,1.011,514,3.274,516,3.283,517,2.198,518,2.198,519,2.198,520,2.198,521,2.198,523,2.198,524,2.198,525,1.658,526,2.198,527,2.729,528,2.729,530,1.42,532,2.198,536,1.42,547,2.198,549,2.198,551,2.198,553,2.198,560,1.998,564,1.998,567,2.198,571,4.358,617,2.448,978,3.404,1011,1.184,1158,1.42,1252,4.145,1253,4.145,1263,2.198,1264,2.198,1265,1.798,1266,1.798,1267,1.798,1268,1.798,1269,1.798,1271,2.783,1367,3.404,1390,1.798,1391,3.291,1392,3.291,1393,4.902,1394,4.902,1395,4.902,1396,3.291,1397,4.902,1398,3.291,1399,2.126,1400,2.126,1401,2.126,1402,2.126,1403,2.126,1404,2.126,1405,2.126,1406,2.126,1407,2.126,1408,2.126,1409,2.126,1410,2.126,1411,2.126,1412,2.126,1413,3.291,1414,3.611,1415,4.532,1416,2.126,1417,3.291,1418,3.291,1419,2.126,1420,3.291,1421,2.126,1422,3.291,1423,4.026,1424,4.026,1425,2.126,1426,2.126,1427,2.126,1428,2.126,1429,3.291,1430,2.126,1431,3.291,1432,2.126,1433,2.126,1434,2.126,1435,2.126,1436,2.126,1437,2.126,1438,2.126,1439,2.126,1440,2.126,1441,2.126,1442,2.126,1443,2.126,1444,2.126,1445,2.126,1446,2.126,1447,2.126,1448,2.126,1449,2.126,1450,2.126,1451,2.126,1452,2.126,1453,2.126,1454,2.126,1455,2.126,1456,3.291,1457,2.126,1458,3.291,1459,2.126,1460,2.126,1461,2.126,1462,3.291,1463,2.126,1464,2.126,1465,2.126,1466,2.126,1467,2.126,1468,2.126,1469,4.026,1470,2.126,1471,2.126,1472,2.126,1473,2.126,1474,2.126,1475,2.126,1476,2.126,1477,2.126,1478,3.291,1479,2.126,1480,2.126,1481,2.126,1482,3.291,1483,2.126,1484,2.126,1485,2.126,1486,2.126,1487,2.126,1488,3.291,1489,3.291,1490,2.783,1491,3.291,1492,2.126,1493,2.126,1494,5.184,1495,2.126,1496,2.126,1497,2.126,1498,2.126,1499,2.126,1500,2.126,1501,2.126,1502,2.126,1503,2.126]],["title/injectables/WeatherService.html",[244,0.808,377,1.869]],["body/injectables/WeatherService.html",[2,0.232,3,0.199,7,0.166,18,0.267,19,0.975,21,0.418,22,0.55,25,1.083,26,0.026,28,0.555,29,0.64,34,0.199,35,0.148,48,1.795,58,1.426,59,0.916,63,3.727,64,4.226,65,4.226,88,0.849,110,0.019,111,0.019,113,1.567,116,0.603,118,0.965,119,0.49,120,1.196,121,0.69,146,2.119,205,1.81,231,1.631,234,3.958,244,1.343,255,3.218,256,3.958,259,0.922,260,1.075,261,3.035,266,3.958,292,1.81,294,2.145,303,2.311,368,1.795,377,2.783,383,2.209,386,2.566,590,3.585,600,1.81,669,2.542,820,3.218,874,3.218,1504,3.218,1505,5.926,1506,4.998,1507,4.998,1508,4.998,1509,4.998,1510,4.998,1511,3.806,1512,4.998,1513,3.806,1514,4.226,1515,4.998,1516,3.806,1517,4.998,1518,4.998,1519,4.998,1520,4.998,1521,3.806,1522,5.581,1523,3.806,1524,5.581,1525,3.806,1526,3.806]],["title/coverage.html",[1527,3.886]],["body/coverage.html",[0,0.728,1,1.077,7,0.159,8,3.097,26,0.026,35,0.261,60,1.23,61,0.715,68,3.097,90,1.151,92,1.077,94,1.077,96,1.077,98,1.151,100,1.151,103,1.151,105,1.008,106,0.483,108,1.077,110,0.018,111,0.018,112,3.097,119,0.292,157,3.625,159,2.447,165,2.713,213,2.039,214,3.658,217,1.23,220,1.881,242,2.224,244,1.559,245,2.224,246,3.097,247,3.097,257,1.742,288,2.224,289,2.224,362,3.097,368,1.315,372,2.447,377,2.039,378,2.224,388,2.039,405,1.881,456,2.447,457,3.097,458,3.097,505,3.234,509,3.658,579,3.097,580,3.097,608,3.097,623,2.447,624,2.447,673,3.097,795,2.447,800,3.097,807,1.742,833,3.097,958,3.097,959,3.097,1051,3.097,1159,3.625,1160,3.625,1182,2.224,1195,3.097,1196,3.097,1211,3.097,1212,3.097,1251,3.097,1270,3.625,1281,3.097,1355,3.097,1385,3.097,1390,3.097,1414,3.899,1504,3.097,1514,3.097,1527,3.097,1528,3.097,1529,3.663,1530,5.476,1531,5.838,1532,3.663,1533,4.873,1534,3.663,1535,3.663,1536,3.663,1537,5.476,1538,3.663,1539,5.476,1540,5.476,1541,3.663,1542,3.097,1543,3.663,1544,3.663,1545,3.663,1546,4.873,1547,3.663,1548,3.663,1549,3.663,1550,3.663,1551,3.663,1552,3.663,1553,3.663,1554,3.663,1555,3.663,1556,3.663,1557,3.663,1558,3.663,1559,3.663,1560,3.663,1561,3.663,1562,3.663,1563,3.663,1564,3.663,1565,3.663,1566,3.097,1567,5.838,1568,3.097,1569,4.121,1570,3.097,1571,3.663]],["title/dependencies.html",[125,2.7,1572,2.798]],["body/dependencies.html",[26,0.026,29,0.803,110,0.021,111,0.021,125,3.19,140,4.29,141,4.29,148,2.659,155,4.038,156,4.038,163,2.272,190,1.966,472,3.19,600,2.272,1025,4.038,1573,4.776,1574,6.877,1575,4.776,1576,5.767,1577,4.776,1578,4.776,1579,4.776,1580,4.776,1581,4.776,1582,4.776,1583,4.776,1584,4.776,1585,4.776,1586,4.776,1587,4.776,1588,4.776,1589,4.776,1590,4.776,1591,4.776,1592,4.776,1593,4.776,1594,4.776,1595,4.776,1596,4.776,1597,4.776]],["title/index.html",[18,0.196,383,1.237,1598,2.798]],["body/index.html",[0,0.661,3,0.233,7,0.195,13,1.314,26,0.021,32,5.467,47,3.779,48,2.161,49,3.35,51,3.083,60,1.501,73,4.683,88,0.59,106,0.59,110,0.021,111,0.021,136,2.985,206,2.714,235,1.404,274,2.28,409,2.985,416,1.975,734,3.779,953,2.714,977,5.088,1093,5.752,1115,2.985,1303,5.467,1318,4.683,1528,4.683,1599,4.469,1600,6.017,1601,4.469,1602,4.469,1603,6.678,1604,4.469,1605,4.469,1606,4.469,1607,4.469,1608,4.469,1609,4.469,1610,4.469,1611,4.469,1612,4.469,1613,4.469,1614,4.469,1615,4.469,1616,3.779,1617,5.538,1618,6.465,1619,5.538,1620,4.469,1621,6.29,1622,4.469,1623,4.469,1624,4.469,1625,4.469,1626,4.469,1627,4.469,1628,4.469,1629,4.469]],["title/modules.html",[123,2.031]],["body/modules.html",[26,0.023,110,0.023,111,0.023,123,2.366,124,3.575,132,3.25,133,3.25,141,3.982,201,3.167,712,3.746,1630,5.352,1631,5.352,1632,6.499]],["title/overview.html",[1633,3.886]],["body/overview.html",[0,0.489,1,1.766,26,0.026,34,0.232,35,0.173,55,2.479,82,1.309,90,2.097,92,1.766,94,1.766,96,1.766,98,1.888,100,1.888,103,1.888,105,1.653,108,1.766,110,0.02,111,0.02,123,2.442,124,4.749,125,2.974,126,3.312,127,3.765,128,3.765,129,3.765,130,3.765,131,3.765,132,3.648,133,3.648,134,4.672,135,3.312,136,2.974,189,2.286,244,1.071,1490,3.765,1542,3.765,1633,3.765,1634,4.453,1635,5.525]],["title/routes.html",[189,2.36]],["body/routes.html",[26,0.023,110,0.023,111,0.023,189,2.829]],["title/miscellaneous/variables.html",[1414,2.7,1636,2.366]],["body/miscellaneous/variables.html",[18,0.347,26,0.026,110,0.022,111,0.022,119,0.501,120,1.975,121,1.14,157,5.018,180,2.113,296,2.034,386,3.342,795,4.199,1414,3.3,1566,4.177,1568,4.177,1569,4.177,1570,5.316,1616,4.977,1636,4.177,1637,5.885,1638,4.94,1639,4.94,1640,4.94,1641,4.94]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":505,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{},"coverage.html":{}}}],["0.0.4",{"_index":1594,"title":{},"body":{"dependencies.html":{}}}],["0.36.1",{"_index":1586,"title":{},"body":{"dependencies.html":{}}}],["0.6.8",{"_index":1581,"title":{},"body":{"dependencies.html":{}}}],["0.8.26",{"_index":1597,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1567,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1536,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1531,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1530,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1535,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1563,"title":{},"body":{"coverage.html":{}}}],["0000ff",{"_index":1208,"title":{},"body":{"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["1",{"_index":1326,"title":{},"body":{"components/SettingsComponent.html":{}}}],["1.1.3",{"_index":1584,"title":{},"body":{"dependencies.html":{}}}],["1/2",{"_index":1553,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":1540,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":1543,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1634,"title":{},"body":{"overview.html":{}}}],["10/23",{"_index":1559,"title":{},"body":{"coverage.html":{}}}],["10/26",{"_index":1550,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":508,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["12",{"_index":1542,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["14",{"_index":1539,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":1533,"title":{},"body":{"coverage.html":{}}}],["1500",{"_index":917,"title":{},"body":{"injectables/LogService.html":{}}}],["2.0.8",{"_index":1592,"title":{},"body":{"dependencies.html":{}}}],["2.5.4",{"_index":1590,"title":{},"body":{"dependencies.html":{}}}],["2.7.2",{"_index":1587,"title":{},"body":{"dependencies.html":{}}}],["2/13",{"_index":1534,"title":{},"body":{"coverage.html":{}}}],["2/7",{"_index":1552,"title":{},"body":{"coverage.html":{}}}],["2/8",{"_index":1557,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1564,"title":{},"body":{"coverage.html":{}}}],["21",{"_index":1548,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":1556,"title":{},"body":{"coverage.html":{}}}],["2500",{"_index":940,"title":{},"body":{"injectables/LogService.html":{}}}],["273.15",{"_index":1367,"title":{},"body":{"injectables/TemperatureService.html":{},"classes/WeatherNow.html":{}}}],["28",{"_index":1551,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":1490,"title":{},"body":{"classes/WeatherNow.html":{},"overview.html":{}}}],["3/14",{"_index":1549,"title":{},"body":{"coverage.html":{}}}],["3/20",{"_index":1541,"title":{},"body":{"coverage.html":{}}}],["3/6",{"_index":1562,"title":{},"body":{"coverage.html":{}}}],["3/9",{"_index":1561,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1544,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":451,"title":{},"body":{"components/CityComponent.html":{},"components/NavigationComponent.html":{}}}],["33",{"_index":1560,"title":{},"body":{"coverage.html":{}}}],["38",{"_index":1546,"title":{},"body":{"coverage.html":{}}}],["3cba9f",{"_index":1375,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["4.2",{"_index":796,"title":{},"body":{"components/InitialComponent.html":{}}}],["4/20",{"_index":1565,"title":{},"body":{"coverage.html":{}}}],["4/9",{"_index":1555,"title":{},"body":{"coverage.html":{}}}],["401",{"_index":920,"title":{},"body":{"injectables/LogService.html":{}}}],["43",{"_index":1558,"title":{},"body":{"coverage.html":{}}}],["44",{"_index":1554,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":790,"title":{},"body":{"components/InitialComponent.html":{}}}],["5/10",{"_index":1538,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1537,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":307,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["6.0.0",{"_index":1595,"title":{},"body":{"dependencies.html":{}}}],["6.0.3",{"_index":1582,"title":{},"body":{"dependencies.html":{}}}],["6.0.4",{"_index":1574,"title":{},"body":{"dependencies.html":{}}}],["6.0.5",{"_index":1602,"title":{},"body":{"index.html":{}}}],["6.2.1",{"_index":1576,"title":{},"body":{"dependencies.html":{}}}],["6/10",{"_index":1532,"title":{},"body":{"coverage.html":{}}}],["6/20",{"_index":1545,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":68,"title":{},"body":{"components/AboutComponent.html":{},"coverage.html":{}}}],["7/18",{"_index":1547,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1635,"title":{},"body":{"overview.html":{}}}],["aaaaaa",{"_index":494,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{}}}],["about'},{'nam",{"_index":89,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["about.component.css",{"_index":15,"title":{},"body":{"components/AboutComponent.html":{}}}],["about.component.html",{"_index":17,"title":{},"body":{"components/AboutComponent.html":{}}}],["about/about.compon",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["aboutcompon",{"_index":1,"title":{"components/AboutComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["abstractcontrol",{"_index":1172,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["ac",{"_index":1194,"title":{},"body":{"classes/PasswordValidation.html":{}}}],["ac.get('password",{"_index":1186,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["ac.get('password2",{"_index":1188,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["ac.get('password2').seterror",{"_index":1191,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["access",{"_index":734,"title":{},"body":{"components/InitialComponent.html":{},"index.html":{}}}],["accomplish",{"_index":743,"title":{},"body":{"components/InitialComponent.html":{}}}],["account",{"_index":1304,"title":{},"body":{"components/SettingsComponent.html":{}}}],["action",{"_index":738,"title":{},"body":{"components/InitialComponent.html":{}}}],["activ",{"_index":1141,"title":{},"body":{"components/NavigationComponent.html":{}}}],["activatedrout",{"_index":376,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["actual_compon",{"_index":109,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["ad",{"_index":818,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["addit",{"_index":1415,"title":{},"body":{"classes/WeatherNow.html":{}}}],["admin",{"_index":676,"title":{},"body":{"components/InitialComponent.html":{}}}],["administr",{"_index":740,"title":{},"body":{"components/InitialComponent.html":{}}}],["adquir",{"_index":406,"title":{},"body":{"components/CityComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["afterward",{"_index":929,"title":{},"body":{"injectables/LogService.html":{}}}],["alreadi",{"_index":943,"title":{},"body":{"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["alway",{"_index":952,"title":{},"body":{"injectables/LogService.html":{}}}],["an",{"_index":311,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["angular",{"_index":49,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{},"index.html":{}}}],["angular/anim",{"_index":1573,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1575,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":1025,"title":{},"body":{"modules/MaterialModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"injectables/WeatherService.html":{}}}],["angular/compil",{"_index":1577,"title":{},"body":{"dependencies.html":{}}}],["angular/cor",{"_index":29,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{},"dependencies.html":{}}}],["angular/form",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"dependencies.html":{}}}],["angular/http",{"_index":1578,"title":{},"body":{"dependencies.html":{}}}],["angular/materi",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"dependencies.html":{}}}],["angular/material/dialog",{"_index":1108,"title":{},"body":{"components/NavigationComponent.html":{}}}],["angular/platform",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"dependencies.html":{}}}],["angular/pwa",{"_index":1580,"title":{},"body":{"dependencies.html":{}}}],["angular/rout",{"_index":190,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"dependencies.html":{}}}],["angular/servic",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular\\documentation\\index.html",{"_index":1629,"title":{},"body":{"index.html":{}}}],["ans.push",{"_index":318,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["answer",{"_index":736,"title":{},"body":{"components/InitialComponent.html":{}}}],["api",{"_index":63,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["app",{"_index":13,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"index.html":{}}}],["app.compon",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.css",{"_index":114,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":115,"title":{},"body":{"components/AppComponent.html":{}}}],["app.modul",{"_index":1050,"title":{},"body":{"modules/MaterialModule.html":{}}}],["appcompon",{"_index":90,"title":{"components/AppComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["applic",{"_index":46,"title":{},"body":{"components/AboutComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/ForecastValuesService.html":{},"components/InitialComponent.html":{}}}],["application/json",{"_index":831,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["appmodul",{"_index":124,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodul",{"_index":132,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["argument",{"_index":694,"title":{},"body":{"components/InitialComponent.html":{}}}],["array",{"_index":215,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{}}}],["array.from(rx).foreach(el",{"_index":744,"title":{},"body":{"components/InitialComponent.html":{}}}],["array.from(rx.list).foreach(el",{"_index":439,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["artifact",{"_index":1611,"title":{},"body":{"index.html":{}}}],["ask",{"_index":384,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["asset",{"_index":700,"title":{},"body":{"components/InitialComponent.html":{}}}],["assets/city.list.json",{"_index":721,"title":{},"body":{"components/InitialComponent.html":{}}}],["attribut",{"_index":1422,"title":{},"body":{"classes/WeatherNow.html":{}}}],["auth",{"_index":809,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["author",{"_index":828,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["automat",{"_index":1607,"title":{},"body":{"index.html":{}}}],["aux",{"_index":1393,"title":{},"body":{"classes/WeatherNow.html":{}}}],["avail",{"_index":712,"title":{},"body":{"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"modules.html":{}}}],["avoid",{"_index":1083,"title":{},"body":{"components/NavigationComponent.html":{},"classes/ServedCity.html":{}}}],["back",{"_index":865,"title":{},"body":{"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["background",{"_index":43,"title":{},"body":{"components/AboutComponent.html":{},"components/NavigationComponent.html":{}}}],["backgroundcolor",{"_index":493,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{}}}],["bada55",{"_index":492,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["bandwidth",{"_index":757,"title":{},"body":{"components/InitialComponent.html":{}}}],["bar",{"_index":488,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"components/LogginDialogComponent.html":{},"injectables/RainAndSnowService.html":{}}}],["base",{"_index":1394,"title":{},"body":{"classes/WeatherNow.html":{}}}],["base64",{"_index":895,"title":{},"body":{"injectables/LogService.html":{}}}],["basic",{"_index":896,"title":{},"body":{"injectables/LogService.html":{}}}],["basic_express",{"_index":338,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["be",{"_index":1392,"title":{},"body":{"classes/WeatherNow.html":{}}}],["bearer",{"_index":902,"title":{},"body":{"injectables/LogService.html":{}}}],["befor",{"_index":393,"title":{},"body":{"components/CityComponent.html":{}}}],["block",{"_index":761,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["bodi",{"_index":37,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["body).subscrib",{"_index":891,"title":{},"body":{"injectables/LogService.html":{}}}],["body[0].classlist.add(\"initi",{"_index":39,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{}}}],["body[0].classlist.remove(\"initi",{"_index":1118,"title":{},"body":{"components/NavigationComponent.html":{}}}],["boolean",{"_index":284,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/NavigationComponent.html":{}}}],["bootstrap",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["bordercolor",{"_index":491,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["brows",{"_index":1632,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browser/anim",{"_index":192,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["browseranimationsmodul",{"_index":191,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["browsermodul",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["btoa(`${username}:${password",{"_index":897,"title":{},"body":{"injectables/LogService.html":{}}}],["build",{"_index":1303,"title":{},"body":{"components/SettingsComponent.html":{},"index.html":{}}}],["builddeleteform",{"_index":1290,"title":{},"body":{"components/SettingsComponent.html":{}}}],["buildpsswdform",{"_index":1291,"title":{},"body":{"components/SettingsComponent.html":{}}}],["button",{"_index":413,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["c",{"_index":1365,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["call",{"_index":716,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["cancel",{"_index":1022,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["case",{"_index":345,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["cccccc",{"_index":498,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["certain",{"_index":566,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["chang",{"_index":416,"title":{},"body":{"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"index.html":{}}}],["changepassword",{"_index":1292,"title":{},"body":{"components/SettingsComponent.html":{}}}],["changepassword(passwd",{"_index":1306,"title":{},"body":{"components/SettingsComponent.html":{}}}],["chart",{"_index":459,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["chart('cloudsandwind",{"_index":487,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["chart('rainandsnow",{"_index":1207,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["chart('temperatur",{"_index":1374,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["chart.j",{"_index":472,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{},"dependencies.html":{}}}],["check",{"_index":1115,"title":{},"body":{"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"index.html":{}}}],["check_circl",{"_index":1153,"title":{},"body":{"components/NavigationComponent.html":{}}}],["checkandsav",{"_index":1396,"title":{},"body":{"classes/WeatherNow.html":{}}}],["checkandsave(text",{"_index":1413,"title":{},"body":{"classes/WeatherNow.html":{}}}],["checkerror",{"_index":968,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["citi",{"_index":58,"title":{},"body":{"components/AboutComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["cities.foreach(c",{"_index":354,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["cities.json",{"_index":771,"title":{},"body":{"components/InitialComponent.html":{}}}],["cities.length",{"_index":1134,"title":{},"body":{"components/NavigationComponent.html":{}}}],["cities.servic",{"_index":291,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["cities.service.t",{"_index":1212,"title":{},"body":{"injectables/SavedCitiesService.html":{},"coverage.html":{}}}],["cities.service.ts:15",{"_index":1226,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:16",{"_index":1227,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:17",{"_index":1214,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:23",{"_index":1220,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:28",{"_index":1219,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:45",{"_index":1223,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["cities.service.ts:59",{"_index":1215,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["citiesid",{"_index":224,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["citieslist",{"_index":225,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/UserServer.html":{}}}],["citieslist.foreach(c",{"_index":298,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["citieslist.split",{"_index":913,"title":{},"body":{"injectables/LogService.html":{}}}],["citieslisturl",{"_index":677,"title":{},"body":{"components/InitialComponent.html":{}}}],["citiesrespons",{"_index":213,"title":{"classes/CitiesResponse.html":{}},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/LogService.html":{},"classes/UserServer.html":{},"coverage.html":{}}}],["citiesresponseunit",{"_index":242,"title":{"classes/CitiesResponseUnit.html":{}},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{},"coverage.html":{}}}],["citiesserv",{"_index":692,"title":{},"body":{"components/InitialComponent.html":{}}}],["citiesserverservic",{"_index":245,"title":{"injectables/CitiesServerService.html":{}},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"coverage.html":{}}}],["citiessubscript",{"_index":1055,"title":{},"body":{"components/NavigationComponent.html":{}}}],["city'",{"_index":1391,"title":{},"body":{"classes/WeatherNow.html":{}}}],["city'},{'nam",{"_index":93,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["city.component.css",{"_index":363,"title":{},"body":{"components/CityComponent.html":{}}}],["city.component.html",{"_index":364,"title":{},"body":{"components/CityComponent.html":{}}}],["city.id",{"_index":1241,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["city.insertbody()).subscribe(rx",{"_index":300,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["city.nam",{"_index":310,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["city/:id/:nam",{"_index":200,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["city/city.compon",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["city/cod",{"_index":1111,"title":{},"body":{"components/NavigationComponent.html":{}}}],["city/data",{"_index":471,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{},"classes/WeatherNow.html":{}}}],["citycompon",{"_index":92,"title":{"components/CityComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["citymatch",{"_index":678,"title":{},"body":{"components/InitialComponent.html":{}}}],["citymatch.nam",{"_index":793,"title":{},"body":{"components/InitialComponent.html":{}}}],["citymatch.sys.countri",{"_index":794,"title":{},"body":{"components/InitialComponent.html":{}}}],["cityshown",{"_index":365,"title":{},"body":{"components/CityComponent.html":{}}}],["cityshown.nam",{"_index":452,"title":{},"body":{"components/CityComponent.html":{}}}],["citytosav",{"_index":1225,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["citytosave.id",{"_index":1242,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["class",{"_index":35,"title":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/PasswordValidation.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"overview.html":{}}}],["clean",{"_index":656,"title":{},"body":{"components/GraphsComponent.html":{}}}],["cli",{"_index":1600,"title":{},"body":{"index.html":{}}}],["click",{"_index":995,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["client",{"_index":52,"title":{},"body":{"components/AboutComponent.html":{}}}],["close",{"_index":849,"title":{},"body":{"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["closesess",{"_index":836,"title":{},"body":{"injectables/LogService.html":{}}}],["cloud",{"_index":460,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["cloudcolor",{"_index":611,"title":{},"body":{"components/GraphsComponent.html":{}}}],["cloudsandwind",{"_index":620,"title":{},"body":{"components/GraphsComponent.html":{}}}],["cloudsandwind/cloud",{"_index":649,"title":{},"body":{"components/GraphsComponent.html":{}}}],["cloudsandwindchart",{"_index":612,"title":{},"body":{"components/GraphsComponent.html":{}}}],["cloudsandwindservic",{"_index":456,"title":{"injectables/CloudsAndWindService.html":{}},"body":{"injectables/CloudsAndWindService.html":{},"components/GraphsComponent.html":{},"coverage.html":{}}}],["cluster_appmodul",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declar",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_import",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cod",{"_index":1395,"title":{},"body":{"classes/WeatherNow.html":{}}}],["code",{"_index":409,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"index.html":{}}}],["color",{"_index":627,"title":{},"body":{"components/GraphsComponent.html":{}}}],["column",{"_index":342,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["comment",{"_index":1239,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["commonmodul",{"_index":1024,"title":{},"body":{"modules/MaterialModule.html":{}}}],["commonurl",{"_index":248,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["compat",{"_index":752,"title":{},"body":{"components/InitialComponent.html":{}}}],["compil",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["complet",{"_index":392,"title":{},"body":{"components/CityComponent.html":{}}}],["complex",{"_index":265,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["complexsearch",{"_index":249,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["complexsearch(valu",{"_index":262,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["complexsearchid",{"_index":250,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["complexsearchid(valu",{"_index":268,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["complic",{"_index":928,"title":{},"body":{"injectables/LogService.html":{}}}],["compodoc/compodoc",{"_index":1583,"title":{},"body":{"dependencies.html":{}}}],["compon",{"_index":0,"title":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["component'",{"_index":1216,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["component_templ",{"_index":87,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["comprobamo",{"_index":328,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["confirm",{"_index":1095,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["consid",{"_index":344,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log",{"_index":778,"title":{},"body":{"components/InitialComponent.html":{}}}],["console.log(\"access",{"_index":922,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(\"complet",{"_index":780,"title":{},"body":{"components/InitialComponent.html":{}}}],["console.log(\"failur",{"_index":918,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(\"form",{"_index":1180,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["console.log(\"queri",{"_index":315,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log(\"rain",{"_index":559,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["console.log(\"snow",{"_index":563,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["console.log(\"someth",{"_index":944,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(\"there'",{"_index":892,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(\"tri",{"_index":308,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log(\"upload",{"_index":302,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log('thi",{"_index":1248,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["console.log(`there'",{"_index":924,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(bodi",{"_index":894,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(err",{"_index":326,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["console.log(r",{"_index":937,"title":{},"body":{"injectables/LogService.html":{}}}],["console.log(rx",{"_index":304,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["console.log(this.currentuser.display",{"_index":915,"title":{},"body":{"injectables/LogService.html":{}}}],["const",{"_index":36,"title":{},"body":{"components/AboutComponent.html":{},"modules/AppRoutingModule.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{}}}],["constructor",{"_index":21,"title":{},"body":{"components/AboutComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["constructor(auth",{"_index":806,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["constructor(dialogref",{"_index":971,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["constructor(el",{"_index":529,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["constructor(forecastvaluesservic",{"_index":622,"title":{},"body":{"components/GraphsComponent.html":{}}}],["constructor(formbuild",{"_index":1165,"title":{},"body":{"components/NewUserComponent.html":{}}}],["constructor(http",{"_index":255,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/WeatherService.html":{}}}],["constructor(log",{"_index":1300,"title":{},"body":{"components/SettingsComponent.html":{}}}],["constructor(nam",{"_index":1255,"title":{},"body":{"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["constructor(priv",{"_index":820,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/WeatherService.html":{}}}],["constructor(rout",{"_index":375,"title":{},"body":{"components/CityComponent.html":{},"components/NavigationComponent.html":{}}}],["constructor(savedcitiesservic",{"_index":845,"title":{},"body":{"injectables/LogService.html":{}}}],["constructor(weatherservic",{"_index":691,"title":{},"body":{"components/InitialComponent.html":{}}}],["consum",{"_index":754,"title":{},"body":{"components/InitialComponent.html":{}}}],["contain",{"_index":237,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"classes/RespuestaForecast.html":{},"classes/UserServer.html":{}}}],["content",{"_index":830,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["contenttyp",{"_index":834,"title":{},"body":{"injectables/LogService.html":{}}}],["context",{"_index":1570,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["coord",{"_index":1252,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["core",{"_index":1588,"title":{},"body":{"dependencies.html":{}}}],["correctli",{"_index":718,"title":{},"body":{"components/InitialComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["correspond",{"_index":652,"title":{},"body":{"components/GraphsComponent.html":{},"injectables/LogService.html":{}}}],["countri",{"_index":334,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{}}}],["coverag",{"_index":1527,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["crash",{"_index":717,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["creat",{"_index":51,"title":{},"body":{"components/AboutComponent.html":{},"injectables/LogService.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"classes/WeatherNow.html":{},"index.html":{}}}],["createus",{"_index":837,"title":{},"body":{"injectables/LogService.html":{}}}],["createuser(usernam",{"_index":850,"title":{},"body":{"injectables/LogService.html":{}}}],["creation",{"_index":996,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["current",{"_index":385,"title":{},"body":{"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{}}}],["currentus",{"_index":835,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["currentuser.usernam",{"_index":1348,"title":{},"body":{"components/SettingsComponent.html":{}}}],["data",{"_index":61,"title":{"classes/Data.html":{}},"body":{"components/AboutComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"coverage.html":{}}}],["data.password",{"_index":1150,"title":{},"body":{"components/NavigationComponent.html":{}}}],["data.usernam",{"_index":1149,"title":{},"body":{"components/NavigationComponent.html":{}}}],["databas",{"_index":267,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{}}}],["dataset",{"_index":490,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["datasourc",{"_index":366,"title":{},"body":{"components/CityComponent.html":{}}}],["date",{"_index":461,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["db",{"_index":236,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/LogService.html":{},"classes/ServedCity.html":{},"classes/UserServer.html":{}}}],["de",{"_index":1078,"title":{},"body":{"components/NavigationComponent.html":{}}}],["declar",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"overview.html":{}}}],["default",{"_index":120,"title":{},"body":{"components/AppComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"miscellaneous/variables.html":{}}}],["defin",{"_index":22,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["deg",{"_index":526,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["delaccnt",{"_index":1293,"title":{},"body":{"components/SettingsComponent.html":{}}}],["delet",{"_index":651,"title":{},"body":{"components/GraphsComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{}}}],["deleteaccount",{"_index":1284,"title":{},"body":{"components/SettingsComponent.html":{}}}],["deleteaccount1",{"_index":1285,"title":{},"body":{"components/SettingsComponent.html":{}}}],["deletebodi",{"_index":838,"title":{},"body":{"injectables/LogService.html":{}}}],["deletebody(usernam",{"_index":854,"title":{},"body":{"injectables/LogService.html":{}}}],["deletec",{"_index":1065,"title":{},"body":{"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["deleteus",{"_index":839,"title":{},"body":{"injectables/LogService.html":{}}}],["deleteuser(usernam",{"_index":856,"title":{},"body":{"injectables/LogService.html":{}}}],["demo",{"_index":852,"title":{},"body":{"injectables/LogService.html":{}}}],["demous",{"_index":853,"title":{},"body":{"injectables/LogService.html":{}}}],["deni",{"_index":923,"title":{},"body":{"injectables/LogService.html":{}}}],["depend",{"_index":125,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["descript",{"_index":525,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"components/LogginDialogComponent.html":{},"classes/PasswordValidation.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{}}}],["dev",{"_index":1605,"title":{},"body":{"index.html":{}}}],["develop",{"_index":47,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["dialog",{"_index":960,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["dialog'},{'nam",{"_index":102,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["dialog.compon",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"components/NavigationComponent.html":{}}}],["dialog.component.css",{"_index":961,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.html",{"_index":962,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.t",{"_index":959,"title":{},"body":{"components/LogginDialogComponent.html":{},"coverage.html":{}}}],["dialog.component.ts:18",{"_index":985,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:19",{"_index":983,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:20",{"_index":990,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:21",{"_index":988,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:22",{"_index":987,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:23",{"_index":986,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:24",{"_index":989,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:25",{"_index":973,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:32",{"_index":980,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:41",{"_index":981,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:48",{"_index":975,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog.component.ts:70",{"_index":979,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["dialog/loggin",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"coverage.html":{}}}],["dialogref",{"_index":974,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["differ",{"_index":207,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/InitialComponent.html":{},"components/SettingsComponent.html":{}}}],["direct",{"_index":85,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{}}}],["directive|pipe|service|class|guard|interface|enum|modul",{"_index":1610,"title":{},"body":{"index.html":{}}}],["directli",{"_index":349,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["directori",{"_index":1613,"title":{},"body":{"index.html":{}}}],["display",{"_index":226,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/SavedCity.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{}}}],["displayedcolumn",{"_index":367,"title":{},"body":{"components/CityComponent.html":{}}}],["displayvalu",{"_index":1397,"title":{},"body":{"classes/WeatherNow.html":{}}}],["dissapear",{"_index":670,"title":{},"body":{"components/GraphsComponent.html":{}}}],["dist",{"_index":1612,"title":{},"body":{"index.html":{}}}],["doc",{"_index":1628,"title":{},"body":{"index.html":{}}}],["document",{"_index":1528,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["document.getelementsbytagname(\"bodi",{"_index":38,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["don`t",{"_index":880,"title":{},"body":{"injectables/LogService.html":{}}}],["download",{"_index":704,"title":{},"body":{"components/InitialComponent.html":{}}}],["dt",{"_index":514,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["dt_txt",{"_index":515,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["durat",{"_index":450,"title":{},"body":{"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["dure",{"_index":78,"title":{},"body":{"components/AboutComponent.html":{}}}],["dynam",{"_index":1579,"title":{},"body":{"dependencies.html":{}}}],["e2",{"_index":1622,"title":{},"body":{"index.html":{}}}],["each",{"_index":211,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["econom",{"_index":74,"title":{},"body":{"components/AboutComponent.html":{}}}],["ee",{"_index":54,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{}}}],["el",{"_index":330,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/SavedCitiesService.html":{},"classes/WeatherNow.html":{}}}],["element",{"_index":84,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["element.cloud",{"_index":531,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.coord.lat",{"_index":750,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["element.coord.lon",{"_index":749,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["element.countri",{"_index":748,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["element.dt",{"_index":533,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.dt_txt",{"_index":535,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.id",{"_index":747,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["element.main.grnd_level",{"_index":537,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.humid",{"_index":538,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.pressur",{"_index":539,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.sea_level",{"_index":540,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.temp",{"_index":541,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.temp_kf",{"_index":542,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.temp_max",{"_index":543,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.main.temp_min",{"_index":544,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.name.includes(this.c",{"_index":775,"title":{},"body":{"components/InitialComponent.html":{}}}],["element.paramet",{"_index":454,"title":{},"body":{"components/CityComponent.html":{}}}],["element.rain",{"_index":558,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.rain[\"3h",{"_index":561,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.snow",{"_index":562,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.snow[\"3h",{"_index":565,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.valu",{"_index":455,"title":{},"body":{"components/CityComponent.html":{}}}],["element.weather.foreach((weath",{"_index":545,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.wind.deg",{"_index":557,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["element.wind.spe",{"_index":556,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["email",{"_index":935,"title":{},"body":{"injectables/LogService.html":{}}}],["emit",{"_index":1221,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["emmit",{"_index":1217,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["empti",{"_index":1218,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["emptylist",{"_index":1057,"title":{},"body":{"components/NavigationComponent.html":{}}}],["en",{"_index":1247,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["enabl",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"components/InitialComponent.html":{}}}],["end",{"_index":1621,"title":{},"body":{"index.html":{}}}],["engros",{"_index":1049,"title":{},"body":{"modules/MaterialModule.html":{}}}],["entrycompon",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["environ",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment.product",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["environments/environ",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["eras",{"_index":628,"title":{},"body":{"components/GraphsComponent.html":{}}}],["err",{"_index":325,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["err.statu",{"_index":919,"title":{},"body":{"injectables/LogService.html":{}}}],["error",{"_index":305,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/ServedCity.html":{}}}],["error.statu",{"_index":306,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["es",{"_index":332,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["event",{"_index":695,"title":{},"body":{"components/InitialComponent.html":{}}}],["event.key",{"_index":788,"title":{},"body":{"components/InitialComponent.html":{}}}],["everyth",{"_index":1238,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["execut",{"_index":1318,"title":{},"body":{"components/SettingsComponent.html":{},"index.html":{}}}],["exist",{"_index":309,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["expect",{"_index":1364,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["export",{"_index":34,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"overview.html":{}}}],["extract",{"_index":476,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjjcmvhdglvbi10aw1lijoxnti4nzk5mty4mzgxlcj1c2vybmftzsi6imrlbw8ifq.vwezijoag2icsn0uprts8jqre1ngzhcrg6fvkdh2",{"_index":930,"title":{},"body":{"injectables/LogService.html":{}}}],["fail",{"_index":324,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["fals",{"_index":296,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"injectables/RainAndSnowService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"miscellaneous/variables.html":{}}}],["favorit",{"_index":453,"title":{},"body":{"components/CityComponent.html":{}}}],["favourit",{"_index":353,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"classes/SavedCity.html":{}}}],["favouritec",{"_index":223,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["ff0000",{"_index":1376,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["ffffff",{"_index":1209,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["field",{"_index":759,"title":{},"body":{"components/InitialComponent.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"index.html":{}}}],["fill",{"_index":233,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{}}}],["filter",{"_index":337,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["flag",{"_index":1615,"title":{},"body":{"index.html":{}}}],["folder",{"_index":701,"title":{},"body":{"components/InitialComponent.html":{}}}],["forecast",{"_index":368,"title":{"classes/Forecast.html":{}},"body":{"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{},"coverage.html":{}}}],["forecast(el",{"_index":441,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["forecast.map(item",{"_index":475,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["forecastvalu",{"_index":581,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{}}}],["forecastvaluesservic",{"_index":378,"title":{"injectables/ForecastValuesService.html":{}},"body":{"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"coverage.html":{}}}],["forecastvaluesservice.getupdates().subscribe(valu",{"_index":655,"title":{},"body":{"components/GraphsComponent.html":{}}}],["forecastvaluesservice.getvalu",{"_index":653,"title":{},"body":{"components/GraphsComponent.html":{}}}],["form",{"_index":963,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["format",{"_index":473,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{},"classes/WeatherNow.html":{}}}],["formbuild",{"_index":1166,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["formcontrol",{"_index":991,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["formcontrol(this.password",{"_index":1002,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["formcontrol(this.usernam",{"_index":998,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["formdelet",{"_index":1286,"title":{},"body":{"components/SettingsComponent.html":{}}}],["formgroup",{"_index":984,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["formpassword",{"_index":1287,"title":{},"body":{"components/SettingsComponent.html":{}}}],["formsmodul",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":679,"title":{},"body":{"components/InitialComponent.html":{}}}],["found.nam",{"_index":798,"title":{},"body":{"components/InitialComponent.html":{}}}],["found.sys.countri",{"_index":799,"title":{},"body":{"components/InitialComponent.html":{}}}],["foundciti",{"_index":680,"title":{},"body":{"components/InitialComponent.html":{}}}],["framework",{"_index":50,"title":{},"body":{"components/AboutComponent.html":{}}}],["free",{"_index":65,"title":{},"body":{"components/AboutComponent.html":{},"injectables/WeatherService.html":{}}}],["full",{"_index":199,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["function",{"_index":706,"title":{},"body":{"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{}}}],["further",{"_index":1624,"title":{},"body":{"index.html":{}}}],["gener",{"_index":32,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["get",{"_index":383,"title":{"index.html":{}},"body":{"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{}}}],["getciti",{"_index":582,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["getcitieslist",{"_index":685,"title":{},"body":{"components/InitialComponent.html":{}}}],["getcityweath",{"_index":373,"title":{},"body":{"components/CityComponent.html":{}}}],["getcloudsandwindchart",{"_index":463,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["getcloudsandwindchart(forecast",{"_index":465,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["getforecast",{"_index":1506,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getforecast(id",{"_index":1510,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getlog",{"_index":1066,"title":{},"body":{"components/NavigationComponent.html":{}}}],["getrainandsnowchart",{"_index":1197,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["getrainandsnowchart(forecast",{"_index":1199,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["getsavedc",{"_index":1213,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["gettemperaturechart",{"_index":1356,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["gettemperaturechart(forecast",{"_index":1358,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["gettoken",{"_index":840,"title":{},"body":{"injectables/LogService.html":{}}}],["getupd",{"_index":583,"title":{},"body":{"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["getvalu",{"_index":584,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["getweath",{"_index":1507,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getweather(id",{"_index":1512,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getweatherbycitynam",{"_index":1508,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getweatherbycityname(nam",{"_index":1515,"title":{},"body":{"injectables/WeatherService.html":{}}}],["give",{"_index":1271,"title":{},"body":{"classes/ServedCity.html":{},"classes/WeatherNow.html":{}}}],["go",{"_index":953,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"index.html":{}}}],["graph",{"_index":201,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"classes/RespuestaForecast.html":{},"modules.html":{}}}],["graphs'},{'nam",{"_index":95,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["graphs.component.css",{"_index":609,"title":{},"body":{"components/GraphsComponent.html":{}}}],["graphs.component.html",{"_index":610,"title":{},"body":{"components/GraphsComponent.html":{}}}],["graphs/:id/:nam",{"_index":203,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["graphs/graphs.compon",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["graphscompon",{"_index":94,"title":{"components/GraphsComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["grnd_level",{"_index":517,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["ground",{"_index":1480,"title":{},"body":{"classes/WeatherNow.html":{}}}],["hammerj",{"_index":1591,"title":{},"body":{"dependencies.html":{}}}],["header",{"_index":899,"title":{},"body":{"injectables/LogService.html":{}}}],["heavi",{"_index":703,"title":{},"body":{"components/InitialComponent.html":{}}}],["help",{"_index":977,"title":{},"body":{"components/LogginDialogComponent.html":{},"index.html":{}}}],["here",{"_index":1046,"title":{},"body":{"modules/MaterialModule.html":{}}}],["hidden",{"_index":1112,"title":{},"body":{"components/NavigationComponent.html":{}}}],["hide",{"_index":976,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["hold",{"_index":875,"title":{},"body":{"injectables/LogService.html":{}}}],["home",{"_index":1152,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["host",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["hostlisten",{"_index":689,"title":{},"body":{"components/InitialComponent.html":{}}}],["hostlistener('window:keyup",{"_index":785,"title":{},"body":{"components/InitialComponent.html":{}}}],["hour",{"_index":567,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["html",{"_index":83,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["http",{"_index":261,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"injectables/WeatherService.html":{}}}],["http://localhost:4200",{"_index":1606,"title":{},"body":{"index.html":{}}}],["http://localhost:8080/citiesservic",{"_index":286,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["http_interceptor",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["httpclient",{"_index":256,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"injectables/WeatherService.html":{}}}],["httpclientmodul",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["httpevent",{"_index":815,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["httphandler",{"_index":813,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["httpheader",{"_index":874,"title":{},"body":{"injectables/LogService.html":{},"injectables/WeatherService.html":{}}}],["httpinterceptor",{"_index":801,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["httprequest",{"_index":811,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["httprequest(\"delet",{"_index":948,"title":{},"body":{"injectables/LogService.html":{}}}],["https://api.openweathermap.org/data/2.5/forecast?id=${id}&appid=888b7bb3ed5f95fb9894b5c33589e6a6",{"_index":1526,"title":{},"body":{"injectables/WeatherService.html":{}}}],["https://api.openweathermap.org/data/2.5/weather?id=${id}&appid=888b7bb3ed5f95fb9894b5c33589e6a6",{"_index":1523,"title":{},"body":{"injectables/WeatherService.html":{}}}],["https://api.openweathermap.org/data/2.5/weather?q=${name}&appid=888b7bb3ed5f95fb9894b5c33589e6a6",{"_index":1525,"title":{},"body":{"injectables/WeatherService.html":{}}}],["https://api.openweathermap.org/data/2.5/weather?q=vigo&appid=888b7bb3ed5f95fb9894b5c33589e6a6",{"_index":1520,"title":{},"body":{"injectables/WeatherService.html":{}}}],["humid",{"_index":518,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["icon",{"_index":72,"title":{},"body":{"components/AboutComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{}}}],["id",{"_index":231,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["id\")).subscribe(rx",{"_index":351,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["id\",\"country\",\"lat\",\"lon\",\"nam",{"_index":343,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["identifi",{"_index":1514,"title":{},"body":{"injectables/WeatherService.html":{},"coverage.html":{}}}],["imag",{"_index":44,"title":{},"body":{"components/AboutComponent.html":{},"components/NavigationComponent.html":{}}}],["imatia",{"_index":80,"title":{},"body":{"components/AboutComponent.html":{}}}],["implement",{"_index":9,"title":{},"body":{"components/AboutComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["import",{"_index":28,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["includ",{"_index":412,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["index",{"_index":18,"title":{"index.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["indic",{"_index":477,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["ineffici",{"_index":1084,"title":{},"body":{"components/NavigationComponent.html":{}}}],["info",{"_index":2,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["inform",{"_index":33,"title":{},"body":{"components/AboutComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/LogService.html":{},"classes/RespuestaForecast.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{}}}],["inici",{"_index":1113,"title":{},"body":{"components/NavigationComponent.html":{}}}],["initi",{"_index":197,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["initial'},{'nam",{"_index":97,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["initial.component.css",{"_index":674,"title":{},"body":{"components/InitialComponent.html":{}}}],["initial.component.html",{"_index":675,"title":{},"body":{"components/InitialComponent.html":{}}}],["initial/initial.compon",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["initialcompon",{"_index":96,"title":{"components/InitialComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["inject",{"_index":244,"title":{"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{}},"body":{"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"overview.html":{}}}],["innov",{"_index":81,"title":{},"body":{"components/AboutComponent.html":{}}}],["input",{"_index":688,"title":{},"body":{"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["insert",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"classes/SavedCity.html":{}}}],["insertbodi",{"_index":1254,"title":{},"body":{"classes/SavedCity.html":{}}}],["instruct",{"_index":1236,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["interact",{"_index":293,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["intercept",{"_index":805,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["intercept(request",{"_index":810,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["interceptor",{"_index":802,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["interceptor'},{'nam",{"_index":99,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["interceptor.component.css",{"_index":803,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["interceptor.component.html",{"_index":804,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["interceptor/interceptor.compon",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["interceptorcompon",{"_index":98,"title":{"components/InterceptorComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["intern",{"_index":347,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["internship",{"_index":79,"title":{},"body":{"components/AboutComponent.html":{}}}],["intervalcheck",{"_index":1058,"title":{},"body":{"components/NavigationComponent.html":{}}}],["introduc",{"_index":348,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["invalid",{"_index":876,"title":{},"body":{"injectables/LogService.html":{}}}],["islog",{"_index":1294,"title":{},"body":{"components/SettingsComponent.html":{}}}],["isn'n",{"_index":1314,"title":{},"body":{"components/SettingsComponent.html":{}}}],["isn't",{"_index":751,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["item.clouds.al",{"_index":479,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["item.countri",{"_index":321,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["item.dt_txt",{"_index":485,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["item.id).join",{"_index":241,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["item.id.tostr",{"_index":320,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["item.lat",{"_index":323,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["item.lon",{"_index":322,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["item.main.temp",{"_index":1366,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["item.main.temp_max",{"_index":1370,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["item.main.temp_min",{"_index":1373,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["item.rain",{"_index":1205,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["item.snow",{"_index":1206,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["item.wind.spe",{"_index":483,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["js",{"_index":1589,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":702,"title":{},"body":{"components/InitialComponent.html":{}}}],["json.parse(localstorage.getitem(\"favouritec",{"_index":1229,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["json.parse(localstorage.getitem(\"favouritecities\")).foreach(el",{"_index":1231,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["json.stringify(this.c",{"_index":1245,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["json.stringify(usernam",{"_index":909,"title":{},"body":{"injectables/LogService.html":{}}}],["karma",{"_index":1620,"title":{},"body":{"index.html":{}}}],["key",{"_index":279,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["keyadmin",{"_index":681,"title":{},"body":{"components/InitialComponent.html":{}}}],["keyboard",{"_index":782,"title":{},"body":{"components/InitialComponent.html":{}}}],["keyboardev",{"_index":697,"title":{},"body":{"components/InitialComponent.html":{}}}],["keyevent(ev",{"_index":786,"title":{},"body":{"components/InitialComponent.html":{}}}],["km/h",{"_index":482,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["l/m^2",{"_index":1204,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["label",{"_index":489,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["last",{"_index":1489,"title":{},"body":{"classes/WeatherNow.html":{}}}],["lat",{"_index":335,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{}}}],["launch",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/SavedCitiesService.html":{}}}],["launchform",{"_index":1164,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["lead",{"_index":1517,"title":{},"body":{"injectables/WeatherService.html":{}}}],["leakag",{"_index":772,"title":{},"body":{"components/InitialComponent.html":{}}}],["legend",{"_index":82,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"injectables/RainAndSnowService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"overview.html":{}}}],["let'",{"_index":1351,"title":{},"body":{"components/SettingsComponent.html":{}}}],["let\\'",{"_index":1353,"title":{},"body":{"components/SettingsComponent.html":{}}}],["level",{"_index":1478,"title":{},"body":{"classes/WeatherNow.html":{}}}],["limit",{"_index":67,"title":{},"body":{"components/AboutComponent.html":{}}}],["line",{"_index":495,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/TemperatureService.html":{}}}],["link",{"_index":1110,"title":{},"body":{"components/NavigationComponent.html":{},"classes/SavedCity.html":{}}}],["list",{"_index":568,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/UserServer.html":{}}}],["list.map(item",{"_index":240,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["listen",{"_index":415,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["liter",{"_index":571,"title":{},"body":{"classes/Forecast.html":{},"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["litr",{"_index":1491,"title":{},"body":{"classes/WeatherNow.html":{}}}],["load",{"_index":682,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["loadfavourit",{"_index":251,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["loadfavourites(c",{"_index":271,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["local",{"_index":273,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["localhost",{"_index":394,"title":{},"body":{"components/CityComponent.html":{},"components/NavigationComponent.html":{}}}],["localstorag",{"_index":352,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["localstorage.getitem(\"sess",{"_index":927,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["localstorage.getitem(\"token",{"_index":829,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["localstorage.removeitem(\"favouritec",{"_index":1249,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["localstorage.removeitem(\"sess",{"_index":887,"title":{},"body":{"injectables/LogService.html":{}}}],["localstorage.removeitem(\"token",{"_index":888,"title":{},"body":{"injectables/LogService.html":{}}}],["localstorage.setitem(\"favouritec",{"_index":1244,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["localstorage.setitem(\"sess",{"_index":908,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["localstorage.setitem(\"token",{"_index":901,"title":{},"body":{"injectables/LogService.html":{}}}],["locat",{"_index":1519,"title":{},"body":{"injectables/WeatherService.html":{}}}],["log",{"_index":861,"title":{},"body":{"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["log.servic",{"_index":816,"title":{},"body":{"components/InterceptorComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["loggin",{"_index":101,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["loggindialogcompon",{"_index":100,"title":{"components/LogginDialogComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":841,"title":{},"body":{"injectables/LogService.html":{}}}],["login(usernam",{"_index":862,"title":{},"body":{"injectables/LogService.html":{}}}],["logrefresh",{"_index":842,"title":{},"body":{"injectables/LogService.html":{}}}],["logservic",{"_index":807,"title":{"injectables/LogService.html":{}},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"coverage.html":{}}}],["logsubscript",{"_index":1059,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["logsubscription2",{"_index":1060,"title":{},"body":{"components/NavigationComponent.html":{}}}],["lon",{"_index":336,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{}}}],["long",{"_index":1020,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["look",{"_index":707,"title":{},"body":{"components/InitialComponent.html":{}}}],["lop",{"_index":339,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["ls",{"_index":1232,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["main",{"_index":516,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{}}}],["make",{"_index":669,"title":{},"body":{"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"classes/SavedCity.html":{},"injectables/WeatherService.html":{}}}],["manag",{"_index":218,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/UserServer.html":{}}}],["mat",{"_index":434,"title":{},"body":{"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["matautocompletemodul",{"_index":1043,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matbuttonmodul",{"_index":193,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["matcardmodul",{"_index":1029,"title":{},"body":{"modules/MaterialModule.html":{}}}],["match",{"_index":111,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["matcheckboxmodul",{"_index":194,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["matchipsmodul",{"_index":1040,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matchpassword",{"_index":1192,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["matchpassword(ac",{"_index":1184,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["matdialog",{"_index":1074,"title":{},"body":{"components/NavigationComponent.html":{}}}],["matdialogmodul",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{}}}],["matdialogref",{"_index":972,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["materi",{"_index":1047,"title":{},"body":{"modules/MaterialModule.html":{}}}],["material/fab",{"_index":1585,"title":{},"body":{"dependencies.html":{}}}],["material/material.modul",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["materialmodul",{"_index":133,"title":{"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["matexpansionmodul",{"_index":1042,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matgridlistmodul",{"_index":1030,"title":{},"body":{"modules/MaterialModule.html":{}}}],["math.max(...this.wind",{"_index":507,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["maticonmodul",{"_index":1028,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matinputmodul",{"_index":1034,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matlistmodul",{"_index":1038,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matmenumodul",{"_index":1026,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matprogressspinnermodul",{"_index":1039,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matradiomodul",{"_index":1037,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matselectmodul",{"_index":1035,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matsidenavmodul",{"_index":1031,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matslidermodul",{"_index":1036,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matslidetogglemodul",{"_index":1045,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matsnackbar",{"_index":380,"title":{},"body":{"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["matsnackbarmodul",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["matsortmodul",{"_index":1032,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattabl",{"_index":513,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["mattabledatasourc",{"_index":404,"title":{},"body":{"components/CityComponent.html":{}}}],["mattabledatasource(this.valuesdisplay",{"_index":436,"title":{},"body":{"components/CityComponent.html":{}}}],["mattablemodul",{"_index":1033,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattabsmodul",{"_index":1044,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matter",{"_index":954,"title":{},"body":{"injectables/LogService.html":{}}}],["mattoolbarmodul",{"_index":1027,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattooltipmodul",{"_index":1041,"title":{},"body":{"modules/MaterialModule.html":{}}}],["max",{"_index":506,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/TemperatureService.html":{}}}],["maximum",{"_index":1369,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["maxlengtherror",{"_index":964,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["mb",{"_index":797,"title":{},"body":{"components/InitialComponent.html":{}}}],["meant",{"_index":732,"title":{},"body":{"components/InitialComponent.html":{}}}],["memori",{"_index":756,"title":{},"body":{"components/InitialComponent.html":{},"injectables/LogService.html":{}}}],["menu",{"_index":1114,"title":{},"body":{"components/NavigationComponent.html":{}}}],["messag",{"_index":978,"title":{},"body":{"components/LogginDialogComponent.html":{},"classes/WeatherNow.html":{}}}],["metadata",{"_index":11,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["metemo",{"_index":1246,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["method",{"_index":19,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["microservic",{"_index":407,"title":{},"body":{"components/CityComponent.html":{}}}],["min",{"_index":504,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/TemperatureService.html":{}}}],["minimum",{"_index":1372,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["minlengtherror",{"_index":965,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["minut",{"_index":71,"title":{},"body":{"components/AboutComponent.html":{}}}],["miscellan",{"_index":1636,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["missunderstand",{"_index":1518,"title":{},"body":{"injectables/WeatherService.html":{}}}],["modifi",{"_index":1228,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["modul",{"_index":123,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":603,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["more",{"_index":1625,"title":{},"body":{"index.html":{}}}],["more_vert",{"_index":1154,"title":{},"body":{"components/NavigationComponent.html":{}}}],["much",{"_index":755,"title":{},"body":{"components/InitialComponent.html":{},"modules/MaterialModule.html":{}}}],["multi",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["mw",{"_index":931,"title":{},"body":{"injectables/LogService.html":{}}}],["name",{"_index":88,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"index.html":{}}}],["name\")).subscribe(rx",{"_index":313,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["navig",{"_index":206,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{},"index.html":{}}}],["navigation'},{'nam",{"_index":104,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["navigation.component.css",{"_index":1053,"title":{},"body":{"components/NavigationComponent.html":{}}}],["navigation.component.html",{"_index":1054,"title":{},"body":{"components/NavigationComponent.html":{}}}],["navigation/navigation.compon",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["navigationcompon",{"_index":103,"title":{"components/NavigationComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["nciti",{"_index":230,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["necessari",{"_index":739,"title":{},"body":{"components/InitialComponent.html":{},"modules/MaterialModule.html":{}}}],["never",{"_index":1234,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["new",{"_index":106,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/WeatherNow.html":{},"coverage.html":{},"index.html":{}}}],["newus",{"_index":969,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["newusercompon",{"_index":105,"title":{"components/NewUserComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["next",{"_index":812,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["next.handle(request",{"_index":822,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["ng",{"_index":1603,"title":{},"body":{"index.html":{}}}],["ngmodul",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["ngondestroy",{"_index":1067,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["ngoninit",{"_index":20,"title":{},"body":{"components/AboutComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["nif",{"_index":936,"title":{},"body":{"injectables/LogService.html":{}}}],["non",{"_index":1224,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["none",{"_index":727,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["notempti",{"_index":1061,"title":{},"body":{"components/NavigationComponent.html":{}}}],["notsur",{"_index":1068,"title":{},"body":{"components/NavigationComponent.html":{}}}],["npassword",{"_index":228,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["npm",{"_index":1627,"title":{},"body":{"index.html":{}}}],["null",{"_index":1011,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/SavedCitiesService.html":{},"classes/WeatherNow.html":{}}}],["number",{"_index":269,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{}}}],["nvm",{"_index":1593,"title":{},"body":{"dependencies.html":{}}}],["object",{"_index":386,"title":{},"body":{"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"miscellaneous/variables.html":{}}}],["observ",{"_index":590,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"injectables/WeatherService.html":{}}}],["obtain",{"_index":62,"title":{},"body":{"components/AboutComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{}}}],["ok",{"_index":297,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{}}}],["on",{"_index":210,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["ondestroy",{"_index":1052,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["oninit",{"_index":10,"title":{},"body":{"components/AboutComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["ontim",{"_index":53,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{}}}],["op",{"_index":340,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["open",{"_index":1073,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["openweath",{"_index":1521,"title":{},"body":{"injectables/WeatherService.html":{}}}],["openweathermap",{"_index":64,"title":{},"body":{"components/AboutComponent.html":{},"injectables/WeatherService.html":{}}}],["optimum",{"_index":753,"title":{},"body":{"components/InitialComponent.html":{}}}],["option",{"_index":260,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["order",{"_index":1048,"title":{},"body":{"modules/MaterialModule.html":{}}}],["out",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"components/NavigationComponent.html":{},"index.html":{},"overview.html":{}}}],["outgo",{"_index":817,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["overview",{"_index":1633,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p1",{"_index":1185,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["p1.valu",{"_index":1189,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["p2",{"_index":1187,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["p2.valu",{"_index":1190,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["packag",{"_index":1572,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["para",{"_index":1425,"title":{},"body":{"classes/WeatherNow.html":{}}}],["param",{"_index":263,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["paramet",{"_index":259,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["parámetro",{"_index":331,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["passwd",{"_index":1295,"title":{},"body":{"components/SettingsComponent.html":{}}}],["password",{"_index":222,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"classes/UserServer.html":{}}}],["password2",{"_index":1163,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["passwordrequirederror",{"_index":966,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["passwordvalid",{"_index":1182,"title":{"classes/PasswordValidation.html":{}},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"coverage.html":{}}}],["passwordvalidation.matchpassword",{"_index":1177,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["password}\"}`).subscrib",{"_index":956,"title":{},"body":{"injectables/LogService.html":{}}}],["path",{"_index":195,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{}}}],["pathmatch",{"_index":198,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["per",{"_index":70,"title":{},"body":{"components/AboutComponent.html":{}}}],["percentag",{"_index":478,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/WeatherNow.html":{}}}],["perform",{"_index":277,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/SettingsComponent.html":{}}}],["perman",{"_index":1350,"title":{},"body":{"components/SettingsComponent.html":{}}}],["pick",{"_index":1109,"title":{},"body":{"components/NavigationComponent.html":{}}}],["pop",{"_index":992,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["popstateev",{"_index":419,"title":{},"body":{"components/CityComponent.html":{}}}],["possibl",{"_index":410,"title":{},"body":{"components/CityComponent.html":{}}}],["prepar",{"_index":387,"title":{},"body":{"components/CityComponent.html":{},"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["present",{"_index":496,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"components/NavigationComponent.html":{}}}],["pressur",{"_index":519,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["primari",{"_index":278,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/GraphsComponent.html":{}}}],["primero",{"_index":327,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["privat",{"_index":294,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"injectables/WeatherService.html":{}}}],["problem",{"_index":925,"title":{},"body":{"injectables/LogService.html":{}}}],["process",{"_index":926,"title":{},"body":{"injectables/LogService.html":{}}}],["prod",{"_index":1614,"title":{},"body":{"index.html":{}}}],["produc",{"_index":709,"title":{},"body":{"components/InitialComponent.html":{}}}],["product",{"_index":1616,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["proffit",{"_index":75,"title":{},"body":{"components/AboutComponent.html":{}}}],["profil",{"_index":1062,"title":{},"body":{"components/NavigationComponent.html":{}}}],["project",{"_index":73,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["properti",{"_index":116,"title":{},"body":{"components/AppComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["protractor",{"_index":1623,"title":{},"body":{"index.html":{}}}],["provid",{"_index":55,"title":{},"body":{"components/AboutComponent.html":{},"modules/AppModule.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"overview.html":{}}}],["providedin",{"_index":292,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{}}}],["public",{"_index":1056,"title":{},"body":{"components/NavigationComponent.html":{}}}],["purpos",{"_index":76,"title":{},"body":{"components/AboutComponent.html":{}}}],["push",{"_index":1417,"title":{},"body":{"classes/WeatherNow.html":{}}}],["put",{"_index":427,"title":{},"body":{"components/CityComponent.html":{}}}],["pwd",{"_index":1288,"title":{},"body":{"components/SettingsComponent.html":{}}}],["que",{"_index":329,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["queri",{"_index":69,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{}}}],["rain",{"_index":527,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["rainandsnow",{"_index":621,"title":{},"body":{"components/GraphsComponent.html":{}}}],["rainandsnow/rain",{"_index":647,"title":{},"body":{"components/GraphsComponent.html":{}}}],["rainandsnowchart",{"_index":613,"title":{},"body":{"components/GraphsComponent.html":{}}}],["rainandsnowservic",{"_index":624,"title":{"injectables/RainAndSnowService.html":{}},"body":{"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"coverage.html":{}}}],["raincolor",{"_index":614,"title":{},"body":{"components/GraphsComponent.html":{}}}],["raind",{"_index":631,"title":{},"body":{"components/GraphsComponent.html":{}}}],["reach",{"_index":1235,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["reactiveformsmodul",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["readm",{"_index":1626,"title":{},"body":{"index.html":{}}}],["receiv",{"_index":428,"title":{},"body":{"components/CityComponent.html":{},"classes/WeatherNow.html":{}}}],["recomend",{"_index":737,"title":{},"body":{"components/InitialComponent.html":{}}}],["redirect",{"_index":208,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/SettingsComponent.html":{}}}],["redirectto",{"_index":196,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["ref",{"_index":1144,"title":{},"body":{"components/NavigationComponent.html":{}}}],["refresh",{"_index":417,"title":{},"body":{"components/CityComponent.html":{}}}],["reload",{"_index":1608,"title":{},"body":{"index.html":{}}}],["relog",{"_index":1069,"title":{},"body":{"components/NavigationComponent.html":{}}}],["remov",{"_index":885,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["repeat",{"_index":1181,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["repres",{"_index":433,"title":{},"body":{"components/CityComponent.html":{}}}],["request",{"_index":303,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"injectables/WeatherService.html":{}}}],["request.clon",{"_index":826,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["request.method",{"_index":821,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["request.url.includes(`http://localhost:8080/citiesservic",{"_index":823,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["requir",{"_index":795,"title":{},"body":{"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":1640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res.headers.get('x",{"_index":903,"title":{},"body":{"injectables/LogService.html":{}}}],["reset",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"components/SettingsComponent.html":{},"overview.html":{}}}],["respons",{"_index":205,"title":{},"body":{"modules/AppRoutingModule.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["response.data[0].c",{"_index":906,"title":{},"body":{"injectables/LogService.html":{}}}],["respuestaforecast",{"_index":405,"title":{"classes/RespuestaForecast.html":{}},"body":{"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"classes/RespuestaForecast.html":{},"coverage.html":{}}}],["restor",{"_index":1089,"title":{},"body":{"components/NavigationComponent.html":{}}}],["result",{"_index":110,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":25,"title":{},"body":{"components/AboutComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["right",{"_index":209,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["root",{"_index":113,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/RainAndSnowService.html":{},"injectables/SavedCitiesService.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{}}}],["root'},{'nam",{"_index":91,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["rop",{"_index":341,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rout",{"_index":189,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/LogginDialogComponent.html":{},"overview.html":{},"routes.html":{}}}],["router",{"_index":846,"title":{},"body":{"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["router.events.subscrib",{"_index":1116,"title":{},"body":{"components/NavigationComponent.html":{}}}],["routermodul",{"_index":188,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(rout",{"_index":204,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routesubscript",{"_index":1063,"title":{},"body":{"components/NavigationComponent.html":{}}}],["routing.modul",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.t",{"_index":187,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["run",{"_index":1093,"title":{},"body":{"components/NavigationComponent.html":{},"index.html":{}}}],["rx",{"_index":369,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"classes/WeatherNow.html":{}}}],["rx.base",{"_index":1432,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.clouds.al",{"_index":1442,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.cod",{"_index":1457,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.coord.lat",{"_index":1427,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.coord.lon",{"_index":1426,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.data.foreach(item",{"_index":317,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.data.length",{"_index":314,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.data[0].countri",{"_index":359,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.data[0].id.tostr",{"_index":358,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.data[0].lat",{"_index":361,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.data[0].lon",{"_index":360,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["rx.dt",{"_index":1447,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.id",{"_index":1454,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.grnd_level",{"_index":1439,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.humid",{"_index":1435,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.pressur",{"_index":1434,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.sea_level",{"_index":1438,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.temp",{"_index":1433,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.temp_max",{"_index":1437,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.main.temp_min",{"_index":1436,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.name",{"_index":1455,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.rain",{"_index":1443,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.rain[\"3h",{"_index":1444,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.snow",{"_index":1445,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.snow[\"3h",{"_index":1446,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.countri",{"_index":1451,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.id",{"_index":1449,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.messag",{"_index":1450,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.sunris",{"_index":1452,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.sunset",{"_index":1453,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.sys.typ",{"_index":1448,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.weather.foreach((w",{"_index":1428,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.wind.deg",{"_index":1441,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rx.wind.spe",{"_index":1440,"title":{},"body":{"classes/WeatherNow.html":{}}}],["rxciti",{"_index":683,"title":{},"body":{"components/InitialComponent.html":{}}}],["rxj",{"_index":600,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/WeatherService.html":{},"dependencies.html":{}}}],["save",{"_index":290,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{}}}],["save(citytosav",{"_index":1222,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["savec",{"_index":374,"title":{},"body":{"components/CityComponent.html":{}}}],["savedc",{"_index":217,"title":{"classes/SavedCity.html":{}},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/UserServer.html":{},"coverage.html":{}}}],["savedcitiesservic",{"_index":257,"title":{"injectables/SavedCitiesService.html":{}},"body":{"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"coverage.html":{}}}],["savedcity(element.nam",{"_index":746,"title":{},"body":{"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["savedcity(item.nam",{"_index":319,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["savedcity(nam",{"_index":424,"title":{},"body":{"components/CityComponent.html":{}}}],["savedcity(rx.data[0].nam",{"_index":357,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["savedcity(this.rxcity.nam",{"_index":766,"title":{},"body":{"components/InitialComponent.html":{}}}],["savedcity.nam",{"_index":1155,"title":{},"body":{"components/NavigationComponent.html":{}}}],["scaffold",{"_index":1609,"title":{},"body":{"index.html":{}}}],["scale",{"_index":500,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["sea",{"_index":1477,"title":{},"body":{"classes/WeatherNow.html":{}}}],["sea_level",{"_index":520,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["search",{"_index":266,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"classes/SavedCity.html":{},"injectables/WeatherService.html":{}}}],["searchbyid",{"_index":252,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["searchbyid(c",{"_index":275,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["searchbynam",{"_index":253,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["searchbyname(nam",{"_index":280,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["selector",{"_index":12,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["send",{"_index":569,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"injectables/LogService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{}}}],["serv",{"_index":1604,"title":{},"body":{"index.html":{}}}],["servedc",{"_index":289,"title":{"classes/ServedCity.html":{}},"body":{"injectables/CitiesServerService.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"coverage.html":{}}}],["server",{"_index":274,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/WeatherNow.html":{},"index.html":{}}}],["server.servic",{"_index":731,"title":{},"body":{"components/InitialComponent.html":{},"injectables/LogService.html":{}}}],["server.service.t",{"_index":247,"title":{},"body":{"injectables/CitiesServerService.html":{},"coverage.html":{}}}],["server.service.ts:113",{"_index":276,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:129",{"_index":272,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:17",{"_index":285,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:19",{"_index":258,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:27",{"_index":283,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:51",{"_index":281,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:75",{"_index":264,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server.service.ts:94",{"_index":270,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server/services/rest",{"_index":825,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{}}}],["server/services/rest/cities/c",{"_index":287,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["server/services/rest/users/login",{"_index":824,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["serverrespons",{"_index":288,"title":{"classes/ServerResponse.html":{}},"body":{"injectables/CitiesServerService.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"coverage.html":{}}}],["servic",{"_index":59,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"injectables/WeatherService.html":{}}}],["service'",{"_index":1148,"title":{},"body":{"components/NavigationComponent.html":{}}}],["serviceworkermodul",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["serviceworkermodule.register('/ngsw",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["session",{"_index":56,"title":{},"body":{"components/AboutComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["set",{"_index":41,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{}}}],["set(rx",{"_index":1420,"title":{},"body":{"classes/WeatherNow.html":{}}}],["setciti",{"_index":585,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["setcity(c",{"_index":592,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["setcurrentus",{"_index":1296,"title":{},"body":{"components/SettingsComponent.html":{}}}],["setfromlist",{"_index":1377,"title":{},"body":{"classes/UserServer.html":{}}}],["setfromlist(list",{"_index":238,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["sethead",{"_index":827,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["settings.component.css",{"_index":1282,"title":{},"body":{"components/SettingsComponent.html":{}}}],["settings.component.html",{"_index":1283,"title":{},"body":{"components/SettingsComponent.html":{}}}],["settings/settings.compon",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["settingscompon",{"_index":108,"title":{"components/SettingsComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["setvalu",{"_index":586,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["setvalues(valu",{"_index":594,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["sever",{"_index":414,"title":{},"body":{"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["share",{"_index":602,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["short",{"_index":1019,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["shouldn't",{"_index":1352,"title":{},"body":{"components/SettingsComponent.html":{}}}],["shouldn\\'t",{"_index":1354,"title":{},"body":{"components/SettingsComponent.html":{}}}],["show",{"_index":30,"title":{},"body":{"components/AboutComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["show/hid",{"_index":714,"title":{},"body":{"components/InitialComponent.html":{}}}],["showdelet",{"_index":1297,"title":{},"body":{"components/SettingsComponent.html":{}}}],["showforecast",{"_index":370,"title":{},"body":{"components/CityComponent.html":{}}}],["showlin",{"_index":499,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["shown",{"_index":1139,"title":{},"body":{"components/NavigationComponent.html":{}}}],["sidenav",{"_index":1091,"title":{},"body":{"components/NavigationComponent.html":{}}}],["sign",{"_index":994,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["simpli",{"_index":601,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["snackbar",{"_index":379,"title":{},"body":{"components/CityComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["snow",{"_index":528,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["snow.servic",{"_index":648,"title":{},"body":{"components/GraphsComponent.html":{}}}],["snow.service.t",{"_index":1196,"title":{},"body":{"injectables/RainAndSnowService.html":{},"coverage.html":{}}}],["snow.service.ts:12",{"_index":1201,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["snow.service.ts:13",{"_index":1202,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["snow.service.ts:14",{"_index":1203,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["snow.service.ts:15",{"_index":1198,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["snow.service.ts:19",{"_index":1200,"title":{},"body":{"injectables/RainAndSnowService.html":{}}}],["someon",{"_index":860,"title":{},"body":{"injectables/LogService.html":{}}}],["somw",{"_index":31,"title":{},"body":{"components/AboutComponent.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"modules/MaterialModule.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"index.html":{}}}],["spec\\.t",{"_index":1641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["speed",{"_index":481,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["src/.../environment.prod.t",{"_index":1638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.t",{"_index":1639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../test.t",{"_index":1637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/about/about.component.t",{"_index":8,"title":{},"body":{"components/AboutComponent.html":{},"coverage.html":{}}}],["src/app/about/about.component.ts:13",{"_index":24,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/about/about.component.ts:9",{"_index":23,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/app",{"_index":186,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.t",{"_index":112,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:9",{"_index":122,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.t",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/citi",{"_index":246,"title":{},"body":{"injectables/CitiesServerService.html":{},"coverage.html":{}}}],["src/app/city/city.component.t",{"_index":362,"title":{},"body":{"components/CityComponent.html":{},"coverage.html":{}}}],["src/app/city/city.component.ts:35",{"_index":395,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:36",{"_index":401,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:37",{"_index":399,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:38",{"_index":400,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:39",{"_index":396,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:40",{"_index":397,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:41",{"_index":398,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:42",{"_index":381,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:57",{"_index":390,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:60",{"_index":382,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/city.component.ts:95",{"_index":391,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/city/data.t",{"_index":509,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"coverage.html":{}}}],["src/app/city/data.ts:14",{"_index":572,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:15",{"_index":573,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:16",{"_index":574,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:18",{"_index":575,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:29",{"_index":577,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:37",{"_index":578,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:42",{"_index":576,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:43",{"_index":570,"title":{},"body":{"classes/Forecast.html":{}}}],["src/app/city/data.ts:5",{"_index":511,"title":{},"body":{"classes/Data.html":{}}}],["src/app/city/data.ts:6",{"_index":510,"title":{},"body":{"classes/Data.html":{}}}],["src/app/city/data.ts:96",{"_index":1210,"title":{},"body":{"classes/RespuestaForecast.html":{}}}],["src/app/forecast",{"_index":579,"title":{},"body":{"injectables/ForecastValuesService.html":{},"coverage.html":{}}}],["src/app/graphs/cloudsandwind/cloud",{"_index":457,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"coverage.html":{}}}],["src/app/graphs/graphs.component.t",{"_index":608,"title":{},"body":{"components/GraphsComponent.html":{},"coverage.html":{}}}],["src/app/graphs/graphs.component.ts:102",{"_index":630,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:122",{"_index":626,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:19",{"_index":636,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:20",{"_index":643,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:21",{"_index":644,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:22",{"_index":645,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:23",{"_index":637,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:24",{"_index":640,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:25",{"_index":635,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:26",{"_index":641,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:27",{"_index":638,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:28",{"_index":634,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:29",{"_index":633,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:30",{"_index":642,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:31",{"_index":639,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:32",{"_index":625,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:61",{"_index":629,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/graphs.component.ts:81",{"_index":632,"title":{},"body":{"components/GraphsComponent.html":{}}}],["src/app/graphs/rainandsnow/rain",{"_index":1195,"title":{},"body":{"injectables/RainAndSnowService.html":{},"coverage.html":{}}}],["src/app/graphs/temperature/temperature.service.t",{"_index":1355,"title":{},"body":{"injectables/TemperatureService.html":{},"coverage.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:12",{"_index":1360,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:13",{"_index":1361,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:14",{"_index":1362,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:15",{"_index":1363,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:16",{"_index":1357,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/graphs/temperature/temperature.service.ts:21",{"_index":1359,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["src/app/initial/initial.component.t",{"_index":673,"title":{},"body":{"components/InitialComponent.html":{},"coverage.html":{}}}],["src/app/initial/initial.component.ts:102",{"_index":711,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:125",{"_index":715,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:135",{"_index":713,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:141",{"_index":698,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:33",{"_index":729,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:34",{"_index":723,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:35",{"_index":724,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:36",{"_index":728,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:37",{"_index":730,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:38",{"_index":722,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:39",{"_index":720,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:40",{"_index":725,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:41",{"_index":719,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:42",{"_index":726,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:44",{"_index":693,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:55",{"_index":708,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:61",{"_index":699,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/initial/initial.component.ts:76",{"_index":705,"title":{},"body":{"components/InitialComponent.html":{}}}],["src/app/interceptor/interceptor.component.t",{"_index":800,"title":{},"body":{"components/InterceptorComponent.html":{},"coverage.html":{}}}],["src/app/interceptor/interceptor.component.ts:12",{"_index":808,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["src/app/interceptor/interceptor.component.ts:16",{"_index":814,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["src/app/log.service.t",{"_index":833,"title":{},"body":{"injectables/LogService.html":{},"coverage.html":{}}}],["src/app/log.service.ts:139",{"_index":864,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:166",{"_index":851,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:19",{"_index":869,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:20",{"_index":873,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:203",{"_index":857,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:21",{"_index":872,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:22",{"_index":871,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:223",{"_index":855,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:232",{"_index":867,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:24",{"_index":870,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:25",{"_index":847,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:36",{"_index":858,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:41",{"_index":859,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:46",{"_index":848,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:69",{"_index":868,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/log.service.ts:81",{"_index":863,"title":{},"body":{"injectables/LogService.html":{}}}],["src/app/loggin",{"_index":958,"title":{},"body":{"components/LogginDialogComponent.html":{},"coverage.html":{}}}],["src/app/material/material.module.t",{"_index":1023,"title":{},"body":{"modules/MaterialModule.html":{}}}],["src/app/navigation/navigation.component.t",{"_index":1051,"title":{},"body":{"components/NavigationComponent.html":{},"coverage.html":{}}}],["src/app/navigation/navigation.component.ts:111",{"_index":1090,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:127",{"_index":1077,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:137",{"_index":1094,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:142",{"_index":1087,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:147",{"_index":1092,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:23",{"_index":1107,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:24",{"_index":1106,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:25",{"_index":1096,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:26",{"_index":1102,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:27",{"_index":1103,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:28",{"_index":1076,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:29",{"_index":1104,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:30",{"_index":1099,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:31",{"_index":1098,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:32",{"_index":1101,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:33",{"_index":1105,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:34",{"_index":1100,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:35",{"_index":1075,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:41",{"_index":1097,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:55",{"_index":1085,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:63",{"_index":1081,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:70",{"_index":1088,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:81",{"_index":1080,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/navigation/navigation.component.ts:96",{"_index":1079,"title":{},"body":{"components/NavigationComponent.html":{}}}],["src/app/new",{"_index":1159,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"coverage.html":{}}}],["src/app/sav",{"_index":1211,"title":{},"body":{"injectables/SavedCitiesService.html":{},"coverage.html":{}}}],["src/app/savedcity.t",{"_index":1251,"title":{},"body":{"classes/SavedCity.html":{},"coverage.html":{}}}],["src/app/savedcity.ts:10",{"_index":1256,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:26",{"_index":1262,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:3",{"_index":1260,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:4",{"_index":1259,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:5",{"_index":1261,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:6",{"_index":1258,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/savedcity.ts:7",{"_index":1257,"title":{},"body":{"classes/SavedCity.html":{}}}],["src/app/servedcity.t",{"_index":1270,"title":{},"body":{"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"coverage.html":{}}}],["src/app/servedcity.ts:21",{"_index":1280,"title":{},"body":{"classes/ServerResponse.html":{}}}],["src/app/servedcity.ts:3",{"_index":1276,"title":{},"body":{"classes/ServedCity.html":{}}}],["src/app/servedcity.ts:4",{"_index":1274,"title":{},"body":{"classes/ServedCity.html":{}}}],["src/app/servedcity.ts:5",{"_index":1273,"title":{},"body":{"classes/ServedCity.html":{}}}],["src/app/servedcity.ts:6",{"_index":1275,"title":{},"body":{"classes/ServedCity.html":{}}}],["src/app/servedcity.ts:7",{"_index":1272,"title":{},"body":{"classes/ServedCity.html":{}}}],["src/app/settings/settings.component.t",{"_index":1281,"title":{},"body":{"components/SettingsComponent.html":{},"coverage.html":{}}}],["src/app/settings/settings.component.ts:100",{"_index":1316,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:111",{"_index":1312,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:118",{"_index":1308,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:125",{"_index":1315,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:19",{"_index":1319,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:20",{"_index":1323,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:21",{"_index":1324,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:22",{"_index":1322,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:23",{"_index":1321,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:24",{"_index":1327,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:25",{"_index":1325,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:26",{"_index":1320,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:27",{"_index":1301,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:37",{"_index":1311,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:43",{"_index":1310,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:48",{"_index":1313,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:60",{"_index":1305,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:70",{"_index":1302,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:77",{"_index":1309,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:86",{"_index":1307,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:91",{"_index":1317,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/userserver.t",{"_index":214,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{},"coverage.html":{}}}],["src/app/userserver.ts:13",{"_index":1383,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:17",{"_index":1384,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:23",{"_index":216,"title":{},"body":{"classes/CitiesResponse.html":{}}}],["src/app/userserver.ts:27",{"_index":243,"title":{},"body":{"classes/CitiesResponseUnit.html":{}}}],["src/app/userserver.ts:4",{"_index":1382,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:5",{"_index":1381,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:6",{"_index":1380,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:7",{"_index":1379,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/userserver.ts:8",{"_index":1378,"title":{},"body":{"classes/UserServer.html":{}}}],["src/app/weather.service.t",{"_index":1504,"title":{},"body":{"injectables/WeatherService.html":{},"coverage.html":{}}}],["src/app/weather.service.ts:13",{"_index":1509,"title":{},"body":{"injectables/WeatherService.html":{}}}],["src/app/weather.service.ts:20",{"_index":1513,"title":{},"body":{"injectables/WeatherService.html":{}}}],["src/app/weather.service.ts:26",{"_index":1516,"title":{},"body":{"injectables/WeatherService.html":{}}}],["src/app/weather.service.ts:32",{"_index":1511,"title":{},"body":{"injectables/WeatherService.html":{}}}],["src/app/weather.t",{"_index":1385,"title":{},"body":{"classes/Weather.html":{},"coverage.html":{}}}],["src/app/weather.ts:3",{"_index":1388,"title":{},"body":{"classes/Weather.html":{}}}],["src/app/weather.ts:4",{"_index":1389,"title":{},"body":{"classes/Weather.html":{}}}],["src/app/weather.ts:5",{"_index":1387,"title":{},"body":{"classes/Weather.html":{}}}],["src/app/weather.ts:6",{"_index":1386,"title":{},"body":{"classes/Weather.html":{}}}],["src/app/weathernow.t",{"_index":1390,"title":{},"body":{"classes/WeatherNow.html":{},"coverage.html":{}}}],["src/app/weathernow.ts:106",{"_index":1419,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:16",{"_index":1399,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:17",{"_index":1405,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:179",{"_index":1416,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:18",{"_index":1412,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:19",{"_index":1400,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:20",{"_index":1407,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:21",{"_index":1409,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:22",{"_index":1403,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:23",{"_index":1410,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:24",{"_index":1404,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:25",{"_index":1406,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:26",{"_index":1401,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:30",{"_index":1408,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:31",{"_index":1398,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:38",{"_index":1421,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:8",{"_index":1402,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/app/weathernow.ts:9",{"_index":1411,"title":{},"body":{"classes/WeatherNow.html":{}}}],["src/environments/environment.prod.t",{"_index":1566,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.t",{"_index":1568,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test.t",{"_index":1569,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":1598,"title":{"index.html":{}},"body":{}}],["statement",{"_index":1529,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1183,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["storag",{"_index":411,"title":{},"body":{"components/CityComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["store",{"_index":235,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{},"index.html":{}}}],["string",{"_index":118,"title":{},"body":{"components/AppComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{}}}],["styles.css",{"_index":45,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{}}}],["styleurl",{"_index":14,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["subject",{"_index":598,"title":{},"body":{"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["submit",{"_index":970,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["submitdelet",{"_index":1298,"title":{},"body":{"components/SettingsComponent.html":{}}}],["submitpassword",{"_index":1299,"title":{},"body":{"components/SettingsComponent.html":{}}}],["subscrib",{"_index":301,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["subscribe(r",{"_index":900,"title":{},"body":{"injectables/LogService.html":{}}}],["subscribe(respons",{"_index":905,"title":{},"body":{"injectables/LogService.html":{}}}],["subscript",{"_index":66,"title":{},"body":{"components/AboutComponent.html":{},"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["successfulli",{"_index":939,"title":{},"body":{"injectables/LogService.html":{}}}],["such",{"_index":1328,"title":{},"body":{"components/SettingsComponent.html":{}}}],["suggest",{"_index":57,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{}}}],["sunris",{"_index":1423,"title":{},"body":{"classes/WeatherNow.html":{}}}],["sunset",{"_index":1424,"title":{},"body":{"classes/WeatherNow.html":{}}}],["support",{"_index":1630,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":1157,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["surnam",{"_index":934,"title":{},"body":{"injectables/LogService.html":{}}}],["surpridingli",{"_index":1237,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["svg",{"_index":1631,"title":{},"body":{"modules.html":{}}}],["sy",{"_index":1253,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["tabl",{"_index":388,"title":{},"body":{"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":1571,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":1086,"title":{},"body":{"components/NavigationComponent.html":{}}}],["tbe",{"_index":42,"title":{},"body":{"components/AboutComponent.html":{}}}],["tell",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["temp",{"_index":521,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["temp_kf",{"_index":522,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["temp_max",{"_index":523,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["temp_min",{"_index":524,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["temperatur",{"_index":617,"title":{},"body":{"components/GraphsComponent.html":{},"injectables/TemperatureService.html":{},"classes/WeatherNow.html":{}}}],["temperature/temperature.servic",{"_index":646,"title":{},"body":{"components/GraphsComponent.html":{}}}],["temperaturechart",{"_index":615,"title":{},"body":{"components/GraphsComponent.html":{}}}],["temperaturecolor",{"_index":616,"title":{},"body":{"components/GraphsComponent.html":{}}}],["temperatureservic",{"_index":623,"title":{"injectables/TemperatureService.html":{}},"body":{"components/GraphsComponent.html":{},"injectables/TemperatureService.html":{},"coverage.html":{}}}],["temperaturesmax",{"_index":618,"title":{},"body":{"components/GraphsComponent.html":{},"injectables/TemperatureService.html":{}}}],["temperaturesmin",{"_index":619,"title":{},"body":{"components/GraphsComponent.html":{},"injectables/TemperatureService.html":{}}}],["templat",{"_index":4,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["templateurl",{"_index":16,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["test",{"_index":1618,"title":{},"body":{"index.html":{}}}],["text",{"_index":1418,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.admin",{"_index":781,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.aux",{"_index":1502,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.bas",{"_index":1431,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.builddeleteform",{"_index":1332,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.buildpsswdform",{"_index":1331,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.changepassword(this.formpassword.value.password",{"_index":1340,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.chart",{"_index":486,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["this.checkandsave('bas",{"_index":1466,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('cloud",{"_index":1485,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('cod",{"_index":1501,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('descript",{"_index":1464,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('dt",{"_index":1493,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('humid",{"_index":1471,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('icon",{"_index":1465,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('id",{"_index":1462,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('latitud",{"_index":1460,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('longitud",{"_index":1459,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('main",{"_index":1463,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('maximum",{"_index":1475,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('minimum",{"_index":1473,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('nam",{"_index":1500,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('pressur",{"_index":1469,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('rain",{"_index":1487,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('si",{"_index":1494,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('snow",{"_index":1492,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('temperatur",{"_index":1467,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkandsave('wind",{"_index":1482,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.checkerror",{"_index":1003,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.citi",{"_index":607,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["this.cities.find(c",{"_index":1240,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["this.cities.push(citytosav",{"_index":1243,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["this.cities.push(this.c",{"_index":1233,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["this.citiesid",{"_index":232,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["this.citieslist",{"_index":741,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citieslist.filter(el",{"_index":774,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citieslist.push(new",{"_index":745,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citiesserver.log",{"_index":777,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citiesserver.searchbyname(this.c",{"_index":776,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citiesserver.upload(>this.citieslist",{"_index":779,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citiesserverservice.loadfavourites(citieslist.split",{"_index":907,"title":{},"body":{"injectables/LogService.html":{}}}],["this.citiesserverservice.upload(this.currentuser.citieslist",{"_index":883,"title":{},"body":{"injectables/LogService.html":{}}}],["this.citiessubscription.unsubscrib",{"_index":1122,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.city.length",{"_index":758,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.citymatch",{"_index":765,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.cityshown",{"_index":423,"title":{},"body":{"components/CityComponent.html":{}}}],["this.cityshown.coord",{"_index":446,"title":{},"body":{"components/CityComponent.html":{}}}],["this.cityshown.countri",{"_index":444,"title":{},"body":{"components/CityComponent.html":{}}}],["this.cloud",{"_index":474,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.cloudcolor",{"_index":665,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.clouds.al",{"_index":1486,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.cloudsandwindchart",{"_index":659,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.cloudsandwindservice.getcloudsandwindchart(this.forecastvalu",{"_index":672,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.cod",{"_index":1456,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.commonurl}/users/us",{"_index":949,"title":{},"body":{"injectables/LogService.html":{}}}],["this.complexsearch(nam",{"_index":312,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.complexsearchid(c",{"_index":350,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.complexsearchid(parseint(c",{"_index":355,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.coord",{"_index":1266,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["this.coord.lat",{"_index":1268,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["this.coord.lon",{"_index":1269,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["this.countri",{"_index":1277,"title":{},"body":{"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["this.currentus",{"_index":877,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["this.currentuser.citiesid",{"_index":912,"title":{},"body":{"injectables/LogService.html":{}}}],["this.currentuser.citieslist",{"_index":881,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["this.currentuser.favouritec",{"_index":889,"title":{},"body":{"injectables/LogService.html":{}}}],["this.currentuser.password",{"_index":911,"title":{},"body":{"injectables/LogService.html":{}}}],["this.currentuser.setfromlist(this.savedcitiesservice.getsavedc",{"_index":879,"title":{},"body":{"injectables/LogService.html":{}}}],["this.currentuser.usernam",{"_index":910,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["this.dat",{"_index":484,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["this.datasourc",{"_index":435,"title":{},"body":{"components/CityComponent.html":{}}}],["this.deleteaccount",{"_index":1346,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.deleteaccount1",{"_index":1347,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.deletebody(usernam",{"_index":946,"title":{},"body":{"injectables/LogService.html":{}}}],["this.deletec",{"_index":1143,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.dialog.open(loggindialogcompon",{"_index":1146,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.dialogref",{"_index":1145,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.dialogref.afterclosed().subscribe(data",{"_index":1147,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.dialogref.clos",{"_index":1017,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.dialogref.close(this.form.valu",{"_index":1005,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.dt",{"_index":532,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.dt_txt",{"_index":534,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["this.emptylist",{"_index":1136,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.favouritec",{"_index":239,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["this.forecast",{"_index":438,"title":{},"body":{"components/CityComponent.html":{}}}],["this.forecast.push(new",{"_index":440,"title":{},"body":{"components/CityComponent.html":{}}}],["this.forecastvalu",{"_index":605,"title":{},"body":{"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{}}}],["this.forecastvalues.push(new",{"_index":661,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.forecastvaluesservice.getvalu",{"_index":667,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.forecastvaluesservice.setcity(this.cityshown",{"_index":443,"title":{},"body":{"components/CityComponent.html":{}}}],["this.forecastvaluesservice.setvalues(this.forecast",{"_index":442,"title":{},"body":{"components/CityComponent.html":{}}}],["this.forecastvaluesservice.setvalues(this.forecastvalu",{"_index":662,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.form",{"_index":997,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["this.form.get('password').error",{"_index":1015,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.form.get('password').errors.requir",{"_index":1016,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.form.get('username').error",{"_index":1010,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.form.get('username').errors.maxlength",{"_index":1013,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.form.get('username').errors.minlength",{"_index":1012,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.form.get('username').errors.requir",{"_index":1014,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.form.valid",{"_index":1004,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["this.form.value.password",{"_index":1179,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["this.formbuilder.group",{"_index":1174,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["this.formdelet",{"_index":1336,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.formdelete.valid",{"_index":1341,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.formdelete.value.password",{"_index":1344,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.formpassword",{"_index":1335,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.formpassword.valid",{"_index":1339,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.found",{"_index":769,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.foundc",{"_index":773,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.getc",{"_index":770,"title":{},"body":{"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["this.getcityweath",{"_index":420,"title":{},"body":{"components/CityComponent.html":{}}}],["this.getlog",{"_index":1120,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.getsavedc",{"_index":1250,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["this.http.get(this.weatherurl",{"_index":1524,"title":{},"body":{"injectables/WeatherService.html":{}}}],["this.http.get>(this.citieslisturl).subscribe(rx",{"_index":742,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.http.post(`${this.commonurl}/fav/queri",{"_index":904,"title":{},"body":{"injectables/LogService.html":{}}}],["this.http.post(`${this.commonurl}/fav/upd",{"_index":890,"title":{},"body":{"injectables/LogService.html":{}}}],["this.http.post(`${this.commonurl}/users/login",{"_index":898,"title":{},"body":{"injectables/LogService.html":{}}}],["this.http.post(`${this.commonurl}/users/updatepassword",{"_index":955,"title":{},"body":{"injectables/LogService.html":{}}}],["this.http.post(`${this.commonurl}/users/us",{"_index":932,"title":{},"body":{"injectables/LogService.html":{}}}],["this.http.post(this.commonurl",{"_index":299,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.http.request(new",{"_index":947,"title":{},"body":{"injectables/LogService.html":{}}}],["this.id",{"_index":1264,"title":{},"body":{"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{}}}],["this.islog",{"_index":1330,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.keyadmin",{"_index":787,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.keyadmin.substr",{"_index":789,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.lat",{"_index":1279,"title":{},"body":{"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["this.launchform",{"_index":1173,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["this.load",{"_index":760,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.log",{"_index":1129,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.log.closesess",{"_index":1342,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.log.currentus",{"_index":1333,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.log.deleteuser(usernam",{"_index":1343,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.log.getupdates().subscribe(log",{"_index":1337,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.log.updatepassword(passwd",{"_index":1338,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.login(usernam",{"_index":941,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logservice.closesess",{"_index":1142,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logservice.createuser(this.form.value.usernam",{"_index":1178,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["this.logservice.currentus",{"_index":1130,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logservice.currentuser.username.replace(/['\"]+/g",{"_index":1131,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logservice.getupdates().subscribe(log",{"_index":1128,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logservice.login(data.usernam",{"_index":1151,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logservice.logrefresh",{"_index":1126,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.logsubscript",{"_index":1127,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["this.logsubscription.unsubscrib",{"_index":1123,"title":{},"body":{"components/NavigationComponent.html":{},"components/SettingsComponent.html":{}}}],["this.lon",{"_index":1278,"title":{},"body":{"classes/ServedCity.html":{},"classes/ServerResponse.html":{}}}],["this.main",{"_index":536,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.main.grnd_level",{"_index":1481,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.humid",{"_index":1472,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.pressur",{"_index":1470,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.sea_level",{"_index":1479,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.temp",{"_index":1468,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.temp_max",{"_index":1476,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.main.temp_min",{"_index":1474,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.maxlengtherror",{"_index":1007,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.minlengtherror",{"_index":1006,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.nam",{"_index":1263,"title":{},"body":{"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"classes/WeatherNow.html":{}}}],["this.notempti",{"_index":1135,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.open",{"_index":1138,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.password",{"_index":229,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["this.passwordrequirederror",{"_index":1008,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.profil",{"_index":1124,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.profile.replace(/['\"]+/g",{"_index":1125,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.pwd",{"_index":1345,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.rain",{"_index":560,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.rainandsnowchart",{"_index":658,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.rainandsnowservice.getrainandsnowchart(this.forecastvalu",{"_index":671,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.raincolor",{"_index":666,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.relog",{"_index":1119,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.result",{"_index":1458,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.result.push(this.aux",{"_index":1503,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.route.params.subscribe((valu",{"_index":418,"title":{},"body":{"components/CityComponent.html":{}}}],["this.route.snapshot.parammap.get('id",{"_index":421,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["this.route.snapshot.parammap.get('nam",{"_index":422,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["this.router.navigate(['/initi",{"_index":951,"title":{},"body":{"injectables/LogService.html":{}}}],["this.router.navigate(['initi",{"_index":1334,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.router.navigate(['us",{"_index":1018,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.router.url.includes(`/initi",{"_index":1117,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.routesubscription.unsubscrib",{"_index":1121,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.rx",{"_index":426,"title":{},"body":{"components/CityComponent.html":{}}}],["this.rxciti",{"_index":764,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.rxcity.id",{"_index":767,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.rxcity.sys.countri",{"_index":768,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.savedc",{"_index":1133,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.savedcities.length",{"_index":1132,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.savedcitiesservice.deletec",{"_index":886,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["this.savedcitiesservice.getsavedc",{"_index":882,"title":{},"body":{"injectables/LogService.html":{},"components/SettingsComponent.html":{}}}],["this.savedcitiesservice.save(new",{"_index":356,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["this.savedcitiesservice.save(this.cityshown",{"_index":448,"title":{},"body":{"components/CityComponent.html":{}}}],["this.setcurrentus",{"_index":1329,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.si",{"_index":1265,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["this.snackbar.open(\"favourit",{"_index":1140,"title":{},"body":{"components/NavigationComponent.html":{}}}],["this.snackbar.open(\"log",{"_index":916,"title":{},"body":{"injectables/LogService.html":{}}}],["this.snackbar.open(\"thi",{"_index":942,"title":{},"body":{"injectables/LogService.html":{}}}],["this.snackbar.open(\"wrong",{"_index":921,"title":{},"body":{"injectables/LogService.html":{}}}],["this.snackbar.open(`${this.cityshown.nam",{"_index":449,"title":{},"body":{"components/CityComponent.html":{}}}],["this.snackbar.open(`password",{"_index":957,"title":{},"body":{"injectables/LogService.html":{}}}],["this.snackbar.open(`th",{"_index":950,"title":{},"body":{"injectables/LogService.html":{}}}],["this.snackbar.open(`us",{"_index":938,"title":{},"body":{"injectables/LogService.html":{}}}],["this.snow",{"_index":564,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.sys.countri",{"_index":1267,"title":{},"body":{"classes/SavedCity.html":{},"classes/WeatherNow.html":{}}}],["this.sys.id",{"_index":1496,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.sys.messag",{"_index":1497,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.sys.sunris",{"_index":1498,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.sys.sunset",{"_index":1499,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.sys.typ",{"_index":1495,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.temperatur",{"_index":663,"title":{},"body":{"components/GraphsComponent.html":{},"injectables/TemperatureService.html":{}}}],["this.temperaturechart",{"_index":657,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.temperaturecolor",{"_index":664,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.temperatureservice.gettemperaturechart(this.forecastvalu",{"_index":668,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.temperaturesmax",{"_index":1368,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["this.temperaturesmin",{"_index":1371,"title":{},"body":{"injectables/TemperatureService.html":{}}}],["this.toggleadmin",{"_index":791,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.updated.asobserv",{"_index":604,"title":{},"body":{"injectables/ForecastValuesService.html":{},"injectables/LogService.html":{},"injectables/SavedCitiesService.html":{}}}],["this.updated.next(fals",{"_index":878,"title":{},"body":{"injectables/LogService.html":{}}}],["this.updated.next(this.c",{"_index":1230,"title":{},"body":{"injectables/SavedCitiesService.html":{}}}],["this.updated.next(this.forecastvalu",{"_index":606,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["this.updated.next(tru",{"_index":914,"title":{},"body":{"injectables/LogService.html":{}}}],["this.updateuserc",{"_index":884,"title":{},"body":{"injectables/LogService.html":{}}}],["this.usernam",{"_index":227,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{}}}],["this.usernamerequirederror",{"_index":1009,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["this.valuesdisplay",{"_index":431,"title":{},"body":{"components/CityComponent.html":{}}}],["this.wasfound",{"_index":762,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.weath",{"_index":530,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.weather.foreach(w",{"_index":1461,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.weather.push(w",{"_index":555,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["this.weather.push(wthr",{"_index":1430,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.weathernow",{"_index":429,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weathernow.coord",{"_index":447,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weathernow.displayvalu",{"_index":432,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weathernow.set(rx",{"_index":430,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weathernow.sys.countri",{"_index":445,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weatherservice.getforecast(id).subscribe((rx",{"_index":660,"title":{},"body":{"components/GraphsComponent.html":{}}}],["this.weatherservice.getforecast(this.cityshown.id).subscribe((rx",{"_index":437,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weatherservice.getweather(this.cityshown.id).subscribe(rx",{"_index":425,"title":{},"body":{"components/CityComponent.html":{}}}],["this.weatherservice.getweatherbycityname(this.city).subscribe(rx",{"_index":763,"title":{},"body":{"components/InitialComponent.html":{}}}],["this.weatherurl",{"_index":1522,"title":{},"body":{"injectables/WeatherService.html":{}}}],["this.wind",{"_index":480,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["this.wind.deg",{"_index":1484,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.wind.spe",{"_index":1483,"title":{},"body":{"classes/WeatherNow.html":{}}}],["this.yousurebutton",{"_index":1137,"title":{},"body":{"components/NavigationComponent.html":{}}}],["through",{"_index":408,"title":{},"body":{"components/CityComponent.html":{},"components/InitialComponent.html":{},"injectables/SavedCitiesService.html":{}}}],["tick",{"_index":503,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["time",{"_index":654,"title":{},"body":{"components/GraphsComponent.html":{}}}],["titl",{"_index":117,"title":{},"body":{"components/AppComponent.html":{}}}],["toggleadmin",{"_index":686,"title":{},"body":{"components/InitialComponent.html":{}}}],["togglefavourit",{"_index":1070,"title":{},"body":{"components/NavigationComponent.html":{}}}],["togglesess",{"_index":1071,"title":{},"body":{"components/NavigationComponent.html":{}}}],["token",{"_index":819,"title":{},"body":{"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["train",{"_index":77,"title":{},"body":{"components/AboutComponent.html":{}}}],["transfer",{"_index":512,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["tri",{"_index":893,"title":{},"body":{"injectables/LogService.html":{},"components/NavigationComponent.html":{}}}],["trigger",{"_index":783,"title":{},"body":{"components/InitialComponent.html":{}}}],["true",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"injectables/CitiesServerService.html":{},"injectables/CloudsAndWindService.html":{},"components/InitialComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"miscellaneous/variables.html":{}}}],["two",{"_index":735,"title":{},"body":{"components/InitialComponent.html":{}}}],["type",{"_index":119,"title":{},"body":{"components/AppComponent.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"classes/SavedCity.html":{},"classes/ServedCity.html":{},"classes/ServerResponse.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/UserServer.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["undefin",{"_index":295,"title":{},"body":{"injectables/CitiesServerService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{}}}],["uniqu",{"_index":234,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"classes/UserServer.html":{},"injectables/WeatherService.html":{}}}],["unit",{"_index":1617,"title":{},"body":{"index.html":{}}}],["unsubscrib",{"_index":1082,"title":{},"body":{"components/NavigationComponent.html":{}}}],["up",{"_index":993,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["updat",{"_index":389,"title":{},"body":{"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"injectables/LogService.html":{},"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{}}}],["updatepassword",{"_index":843,"title":{},"body":{"injectables/LogService.html":{}}}],["updatepassword(password",{"_index":866,"title":{},"body":{"injectables/LogService.html":{}}}],["updateuserc",{"_index":844,"title":{},"body":{"injectables/LogService.html":{}}}],["upload",{"_index":254,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/InitialComponent.html":{}}}],["upload(citieslist",{"_index":282,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["uploadal",{"_index":687,"title":{},"body":{"components/InitialComponent.html":{}}}],["uppercas",{"_index":792,"title":{},"body":{"components/InitialComponent.html":{}}}],["url",{"_index":212,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/CityComponent.html":{},"components/NavigationComponent.html":{}}}],["us",{"_index":48,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"classes/RespuestaForecast.html":{},"classes/SavedCity.html":{},"injectables/WeatherService.html":{},"index.html":{}}}],["useclass",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":202,"title":{},"body":{"modules/AppRoutingModule.html":{},"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/CitiesServerService.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"classes/UserServer.html":{}}}],["user'",{"_index":219,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/LogService.html":{},"classes/UserServer.html":{}}}],["user'},{'nam",{"_index":107,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["user.compon",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/SettingsComponent.html":{}}}],["user.component.css",{"_index":1161,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["user.component.html",{"_index":1162,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["user.component.t",{"_index":1160,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"coverage.html":{}}}],["user.component.ts:15",{"_index":1171,"title":{},"body":{"components/NewUserComponent.html":{}}}],["user.component.ts:16",{"_index":1167,"title":{},"body":{"components/NewUserComponent.html":{}}}],["user.component.ts:23",{"_index":1169,"title":{},"body":{"components/NewUserComponent.html":{}}}],["user.component.ts:28",{"_index":1168,"title":{},"body":{"components/NewUserComponent.html":{}}}],["user.component.ts:39",{"_index":1170,"title":{},"body":{"components/NewUserComponent.html":{}}}],["user.component.ts:52",{"_index":1193,"title":{},"body":{"classes/PasswordValidation.html":{}}}],["user/new",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"coverage.html":{}}}],["user_",{"_index":933,"title":{},"body":{"injectables/LogService.html":{}}}],["usernam",{"_index":221,"title":{},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{},"classes/UserServer.html":{}}}],["usernamerequirederror",{"_index":967,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["userserv",{"_index":220,"title":{"classes/UserServer.html":{}},"body":{"classes/CitiesResponse.html":{},"classes/CitiesResponseUnit.html":{},"injectables/LogService.html":{},"components/SettingsComponent.html":{},"classes/UserServer.html":{},"coverage.html":{}}}],["ussernam",{"_index":1021,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["util",{"_index":733,"title":{},"body":{"components/InitialComponent.html":{}}}],["valid",{"_index":982,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["validators.compose([validators.minlength(5",{"_index":1175,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["validators.maxlength(20",{"_index":1000,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{}}}],["validators.maxlength(25",{"_index":1176,"title":{},"body":{"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["validators.minlength(4",{"_index":999,"title":{},"body":{"components/LogginDialogComponent.html":{}}}],["validators.requir",{"_index":1001,"title":{},"body":{"components/LogginDialogComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"components/SettingsComponent.html":{}}}],["valu",{"_index":121,"title":{},"body":{"components/AppComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"classes/PasswordValidation.html":{},"injectables/RainAndSnowService.html":{},"classes/RespuestaForecast.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"injectables/TemperatureService.html":{},"classes/WeatherNow.html":{},"injectables/WeatherService.html":{},"miscellaneous/variables.html":{}}}],["values.servic",{"_index":403,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{}}}],["values.service.t",{"_index":580,"title":{},"body":{"injectables/ForecastValuesService.html":{},"coverage.html":{}}}],["values.service.ts:13",{"_index":597,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:14",{"_index":599,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:15",{"_index":596,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:18",{"_index":589,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:23",{"_index":595,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:29",{"_index":591,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:34",{"_index":593,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:38",{"_index":588,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["values.service.ts:40",{"_index":587,"title":{},"body":{"injectables/ForecastValuesService.html":{}}}],["valuesdisplay",{"_index":371,"title":{},"body":{"components/CityComponent.html":{}}}],["valuetim",{"_index":1289,"title":{},"body":{"components/SettingsComponent.html":{}}}],["var",{"_index":86,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"components/InterceptorComponent.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"components/SettingsComponent.html":{}}}],["variabl",{"_index":1414,"title":{"miscellaneous/variables.html":{}},"body":{"classes/WeatherNow.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":1601,"title":{},"body":{"index.html":{}}}],["via",{"_index":1619,"title":{},"body":{"index.html":{}}}],["view",{"_index":40,"title":{},"body":{"components/AboutComponent.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{}}}],["void",{"_index":27,"title":{},"body":{"components/AboutComponent.html":{},"injectables/CitiesServerService.html":{},"components/CityComponent.html":{},"injectables/ForecastValuesService.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/LogService.html":{},"components/LogginDialogComponent.html":{},"components/NavigationComponent.html":{},"components/NewUserComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"classes/UserServer.html":{},"classes/WeatherNow.html":{}}}],["volum",{"_index":1488,"title":{},"body":{"classes/WeatherNow.html":{}}}],["válido",{"_index":333,"title":{},"body":{"injectables/CitiesServerService.html":{}}}],["w",{"_index":546,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["w.descript",{"_index":553,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["w.icon",{"_index":551,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["w.id",{"_index":549,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["w.main",{"_index":547,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["wallpap",{"_index":710,"title":{},"body":{"components/InitialComponent.html":{}}}],["want",{"_index":1349,"title":{},"body":{"components/SettingsComponent.html":{}}}],["wasfound",{"_index":684,"title":{},"body":{"components/InitialComponent.html":{}}}],["weather",{"_index":60,"title":{"classes/Weather.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CityComponent.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/InitialComponent.html":{},"components/NavigationComponent.html":{},"classes/RespuestaForecast.html":{},"classes/Weather.html":{},"classes/WeatherNow.html":{},"coverage.html":{},"index.html":{}}}],["weather.descript",{"_index":554,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["weather.icon",{"_index":552,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["weather.id",{"_index":550,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["weather.main",{"_index":548,"title":{},"body":{"classes/Data.html":{},"classes/Forecast.html":{},"classes/RespuestaForecast.html":{}}}],["weather.servic",{"_index":402,"title":{},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{}}}],["weatherangular",{"_index":1599,"title":{},"body":{"index.html":{}}}],["weathernow",{"_index":372,"title":{"classes/WeatherNow.html":{}},"body":{"components/CityComponent.html":{},"classes/WeatherNow.html":{},"coverage.html":{}}}],["weatherservic",{"_index":377,"title":{"injectables/WeatherService.html":{}},"body":{"components/CityComponent.html":{},"components/GraphsComponent.html":{},"components/InitialComponent.html":{},"injectables/WeatherService.html":{},"coverage.html":{}}}],["weatherurl",{"_index":1505,"title":{},"body":{"injectables/WeatherService.html":{}}}],["web",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["went",{"_index":945,"title":{},"body":{"injectables/LogService.html":{}}}],["wind",{"_index":462,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"classes/Data.html":{},"classes/Forecast.html":{},"components/GraphsComponent.html":{},"classes/RespuestaForecast.html":{},"classes/WeatherNow.html":{}}}],["wind.servic",{"_index":650,"title":{},"body":{"components/GraphsComponent.html":{}}}],["wind.service.t",{"_index":458,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"coverage.html":{}}}],["wind.service.ts:12",{"_index":467,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["wind.service.ts:13",{"_index":470,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["wind.service.ts:14",{"_index":468,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["wind.service.ts:15",{"_index":469,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["wind.service.ts:18",{"_index":466,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["wind.service.ts:89",{"_index":464,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["window:keyup",{"_index":690,"title":{},"body":{"components/InitialComponent.html":{}}}],["window:keyup(ev",{"_index":696,"title":{},"body":{"components/InitialComponent.html":{}}}],["without",{"_index":316,"title":{},"body":{"injectables/CitiesServerService.html":{},"components/NavigationComponent.html":{}}}],["work",{"_index":832,"title":{},"body":{"components/InterceptorComponent.html":{}}}],["worker",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["worker.j",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["written",{"_index":784,"title":{},"body":{"components/InitialComponent.html":{}}}],["wrong",{"_index":346,"title":{},"body":{"injectables/CitiesServerService.html":{},"injectables/LogService.html":{}}}],["wthr",{"_index":1429,"title":{},"body":{"classes/WeatherNow.html":{}}}],["xax",{"_index":501,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["yax",{"_index":502,"title":{},"body":{"injectables/CloudsAndWindService.html":{},"injectables/RainAndSnowService.html":{},"injectables/TemperatureService.html":{}}}],["yaxisid",{"_index":497,"title":{},"body":{"injectables/CloudsAndWindService.html":{}}}],["ye",{"_index":1158,"title":{},"body":{"components/NavigationComponent.html":{},"injectables/SavedCitiesService.html":{},"components/SettingsComponent.html":{},"classes/WeatherNow.html":{}}}],["yor",{"_index":1156,"title":{},"body":{"components/NavigationComponent.html":{}}}],["yousur",{"_index":1072,"title":{},"body":{"components/NavigationComponent.html":{}}}],["yousurebutton",{"_index":1064,"title":{},"body":{"components/NavigationComponent.html":{}}}],["zone.j",{"_index":1596,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AboutComponent.html":{"url":"components/AboutComponent.html","title":"component - AboutComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AboutComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/about/about.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-about\n            \n\n            \n                styleUrls\n                about.component.css\n            \n\n\n\n            \n                templateUrl\n                ./about.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/about/about.component.ts:9\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/about/about.component.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css']\n})\n/**This component shows somw general information about the app */\nexport class AboutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n    const body = document.getElementsByTagName(\"body\");\n    body[0].classList.add(\"initial-view\"); //Sets tbe background image in the styles.css\n  }\n\n}\n\n    \n\n    \n        \n  \n    This application has been developed using\n    Angular as the framework to create the client and\n    Ontimize EE to provide session and suggested cities service.\n  \n  \n  \n    The weather data is obtained from the API of\n    OpenWeatherMap in a free subscription limited to 60 queries per minute.\n  \n  \n  \n    Every images and icons have been obtained from free sources and this project generates no economical proffits. The purpose\n    of this app was training me as a developer during a internship in\n    Imatia Innovation.\n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      This application has been developed using    Angular as the framework to create the client and    Ontimize EE to provide session and suggested cities service.          The weather data is obtained from the API of    OpenWeatherMap in a free subscription limited to 60 queries per minute.          Every images and icons have been obtained from free sources and this project generates no economical proffits. The purpose    of this app was training me as a developer during a internship in    Imatia Innovation.  '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AboutComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                app.component.css\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        title:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Weather-Angular'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Weather-Angular';\n}\n\n    \n\n    \n        \n\n\n\n\n\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n  Modules\n  AppModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAboutComponent\n\nAboutComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAboutComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nCityComponent\n\nCityComponent\n\nAppModule -->\n\nCityComponent->AppModule\n\n\n\n\n\nGraphsComponent\n\nGraphsComponent\n\nAppModule -->\n\nGraphsComponent->AppModule\n\n\n\n\n\nInitialComponent\n\nInitialComponent\n\nAppModule -->\n\nInitialComponent->AppModule\n\n\n\n\n\nInterceptorComponent\n\nInterceptorComponent\n\nAppModule -->\n\nInterceptorComponent->AppModule\n\n\n\n\n\nLogginDialogComponent\n\nLogginDialogComponent\n\nAppModule -->\n\nLogginDialogComponent->AppModule\n\n\n\n\n\nNavigationComponent\n\nNavigationComponent\n\nAppModule -->\n\nNavigationComponent->AppModule\n\n\n\n\n\nNewUserComponent\n\nNewUserComponent\n\nAppModule -->\n\nNewUserComponent->AppModule\n\n\n\n\n\nSettingsComponent\n\nSettingsComponent\n\nAppModule -->\n\nSettingsComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                AboutComponent\n                            \n                            \n                                AppComponent\n                            \n                            \n                                CityComponent\n                            \n                            \n                                GraphsComponent\n                            \n                            \n                                InitialComponent\n                            \n                            \n                                InterceptorComponent\n                            \n                            \n                                LogginDialogComponent\n                            \n                            \n                                NavigationComponent\n                            \n                            \n                                NewUserComponent\n                            \n                            \n                                SettingsComponent\n                            \n                    \n                \n                \n                    EntryComponents\n                    \n                            \n                                LogginDialogComponent\n                            \n                    \n                \n                \n                    Imports\n                    \n                            \n                                    AppRoutingModule\n                            \n                            \n                                    MaterialModule\n                            \n                    \n                \n                \n                    Bootstrap\n                    \n                            \n                                AppComponent\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { InitialComponent } from './initial/initial.component';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './/app-routing.module';\nimport { CityComponent } from './city/city.component';\nimport { NavigationComponent } from './navigation/navigation.component';\n\nimport { MaterialModule } from './material/material.module';\nimport { GraphsComponent } from './graphs/graphs.component';\n\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\nimport { LogginDialogComponent } from './loggin-dialog/loggin-dialog.component';\nimport { MatDialogModule, MatSnackBarModule } from '@angular/material';\nimport { ReactiveFormsModule} from '@angular/forms';\nimport { NewUserComponent } from './new-user/new-user.component';\nimport { SettingsComponent } from './settings/settings.component';\nimport { AboutComponent } from './about/about.component';\nimport { InterceptorComponent } from './interceptor/interceptor.component';\nimport {HTTP_INTERCEPTORS} from '@angular/common/http';\n\n\n\n@NgModule({ //Tells how to compile and launch the application\n  declarations: [\n    AppComponent,\n    InitialComponent,\n    CityComponent,\n    NavigationComponent,\n    GraphsComponent,\n    LogginDialogComponent,\n    NewUserComponent,\n    SettingsComponent,\n    AboutComponent,\n    InterceptorComponent,\n  ],\n  imports: [\n    BrowserModule,\n    MaterialModule,\n    FormsModule,\n    HttpClientModule,\n    AppRoutingModule,\n    ServiceWorkerModule.register('/ngsw-worker.js', { enabled: environment.production }),\n    MatDialogModule,\n    ReactiveFormsModule,\n    MatSnackBarModule\n  ],\n  providers: [{\n    provide: HTTP_INTERCEPTORS,\n    useClass: InterceptorComponent,\n    multi: true,\n  }],\n  bootstrap: [AppComponent], //root component that Angular inserts into the index.html host web page\n  entryComponents: [LogginDialogComponent]\n})\nexport class AppModule { }\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n  Modules\n  AppRoutingModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n        \n\n        \n            \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { InitialComponent } from './initial/initial.component';\nimport { CityComponent } from './city/city.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatButtonModule, MatCheckboxModule } from '@angular/material';\nimport { GraphsComponent } from './graphs/graphs.component';\nimport { NewUserComponent } from './new-user/new-user.component';\nimport { SettingsComponent } from './settings/settings.component';\nimport { AboutComponent } from './about/about.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/initial', pathMatch: 'full' },\n  { path: 'initial', component: InitialComponent },\n  { path: 'city/:id/:name', component: CityComponent },\n  { path: 'graph', component: GraphsComponent },\n  { path: 'user', component: NewUserComponent },\n  { path: 'settings', component: SettingsComponent },\n  { path: 'about', component: AboutComponent },\n  { path: 'graphs/:id/:name', component: GraphsComponent }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes),\n    BrowserAnimationsModule,\n    MatButtonModule,\n    MatCheckboxModule\n  ],\n  exports: [RouterModule]\n})\n/**This is the routing module. It is responsible for the navigation across the different components, redirecting the application to the right one for each URL.*/\nexport class AppRoutingModule { }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CitiesResponse.html":{"url":"classes/CitiesResponse.html","title":"class - CitiesResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  CitiesResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/userServer.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        data:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:23\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SavedCity } from \"./savedCity\";\n/**This is a class to manage User's information */\nexport class UserServer {\n    username: string;\n    password: string;\n    favouriteCities: string;\n    citiesId: Array;\n    citiesList: Array;\n\n    constructor() { }\n\n    /**Returns a string displaying the user information */\n    display(): string {\n        return \"Username: \" + this.username + \"\\nPassword: \" + this.password + \"\\nCities ids: \" + this.citiesId;\n    }\n    /**Fills from a unique string (as stored in DB) an Array of strings containing IDs */\n    setFromList(list: Array) {\n        this.favouriteCities = list.map(item => item.id).join(',');\n    }\n}\n\nexport class CitiesResponse {\n    data: Array;\n}\n\nexport class CitiesResponseUnit {\n    CITIES: string;\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CitiesResponseUnit.html":{"url":"classes/CitiesResponseUnit.html","title":"class - CitiesResponseUnit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  CitiesResponseUnit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/userServer.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                CITIES\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CITIES\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        CITIES:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SavedCity } from \"./savedCity\";\n/**This is a class to manage User's information */\nexport class UserServer {\n    username: string;\n    password: string;\n    favouriteCities: string;\n    citiesId: Array;\n    citiesList: Array;\n\n    constructor() { }\n\n    /**Returns a string displaying the user information */\n    display(): string {\n        return \"Username: \" + this.username + \"\\nPassword: \" + this.password + \"\\nCities ids: \" + this.citiesId;\n    }\n    /**Fills from a unique string (as stored in DB) an Array of strings containing IDs */\n    setFromList(list: Array) {\n        this.favouriteCities = list.map(item => item.id).join(',');\n    }\n}\n\nexport class CitiesResponse {\n    data: Array;\n}\n\nexport class CitiesResponseUnit {\n    CITIES: string;\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CitiesServerService.html":{"url":"injectables/CitiesServerService.html","title":"injectable - CitiesServerService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  CitiesServerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/cities-server.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                citiesList\n                            \n                            \n                                commonUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                complexSearch\n                            \n                            \n                                complexSearchId\n                            \n                            \n                                loadFavourites\n                            \n                            \n                                searchById\n                            \n                            \n                                searchByName\n                            \n                            \n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, savedCitiesService: SavedCitiesService)\n                    \n                \n                        \n                            \n                                Defined in src/app/cities-server.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        savedCitiesService\n                                                  \n                                                        \n                                                                    SavedCitiesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            complexSearch\n                            \n                            \n                        \n                    \n                \n                \n                    \ncomplexSearch(value: string, param: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:75\n                            \n                        \n\n\n                \n                    \n                            Returns a complex search body using any parameter and its value in the city database \n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        param\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            complexSearchId\n                            \n                            \n                        \n                    \n                \n                \n                    \ncomplexSearchId(value: number, param: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:94\n                            \n                        \n\n\n                \n                    \n                            Returns a complex search body using ID and its value in the city database \n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        param\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadFavourites\n                            \n                            \n                        \n                    \n                \n                \n                    \nloadFavourites(cities: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:129\n                            \n                        \n\n\n                \n                    \n                            Fills local array of cities after querying by IDs to the server \n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cities\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            searchById\n                            \n                            \n                        \n                    \n                \n                \n                    \nsearchById(city: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:113\n                            \n                        \n\n\n                \n                    \n                            Performs a city search by ID (primary key) in the database \n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        city\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     SavedCity\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            searchByName\n                            \n                            \n                        \n                    \n                \n                \n                    \nsearchByName(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:51\n                            \n                        \n\n\n                \n                    \n                            Searches cities by name in the database and returns an Array of them \n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            upload\n                            \n                            \n                        \n                    \n                \n                \n                    \nupload(citiesList: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:27\n                            \n                        \n\n\n                \n                    \n                            Inserts a new city to the database \n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        citiesList\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesList:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            commonUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        commonUrl:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"http://localhost:8080/citiesservice-server/services/rest/cities/city\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/cities-server.service.ts:19\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { SavedCity } from './savedCity';\n\nimport { HttpClient } from '@angular/common/http';\n\nimport { ServerResponse } from './servedCity'\nimport { SavedCitiesService } from './saved-cities.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n/* This service interacts with the server Ontimize, with the service of cities */\nexport class CitiesServerService {\n\n  citiesList: Array;\n\n  commonUrl = \"http://localhost:8080/citiesservice-server/services/rest/cities/city\";\n  \n  constructor(\n    private http: HttpClient,\n    private savedCitiesService: SavedCitiesService\n  ) { }\n\n  /**Inserts a new city to the database */\n  upload(citiesList: Array): Boolean {\n    //Used to fill in the database\n    if (citiesList === undefined) {\n      return false;\n    }\n\n    let ok = true;\n\n    citiesList.forEach(city => {\n      this.http.post(this.commonUrl, city.insertBody()).subscribe(rx => {\n        //We subscribe for the insert results\n        console.log(\"Upload request results\");\n        console.log(rx);\n      },\n        error => {\n          if (error.status === 500)\n            console.log(\"Tried to upload an existing city: \" + city.name);\n          ok = false;\n        });\n    });\n    return ok;\n  }\n\n  /**Searches cities by name in the database and returns an Array of them */\n  searchByName(name: string): Array {\n    const ans = new Array();\n\n    this.http.post(this.commonUrl + \"/search\", this.complexSearch(name, \"NAME\")).subscribe(rx => {\n      //We subscribe for the search results\n      if (rx.data.length === undefined) {\n        console.log(\"Query without results\");\n        return ans;\n      }\n      rx.data.forEach(item => {\n        ans.push(\n          new SavedCity(item.NAME, item.ID.toString(), item.COUNTRY, item.LON, item.LAT)\n        );\n      }, error => {\n        console.log(\"Query to city dataBase failed\");\n      });\n    }, err => {\n      console.log(err);\n    });\n\n    return ans;\n  }\n\n/**Returns a complex search body using any parameter and its value in the city database */\n  complexSearch(value: string, param: string): string {\n    //primero comprobamos que el parámetro es válido\n    if (param !== \"NAME\" && param !== \"ID\" && param !== \"COUNTRY\" && param !== \"LAT\" && param !== \"LON\") {\n      param = \"NAME\";\n    }\n\n    return `{\n      \"filter\": {\n        \"@basic_expression\":{\n          \"lop\" : \"` + param + `\",\n          \"op\" : \"LIKE\",\n          \"rop\" : \"%` + value + `%\"\n        }\n      },\n      \"columns\":[ \"ID\",\"COUNTRY\",\"LAT\",\"LON\",\"NAME\"]\n     }`;\n  }\n\n/**Returns a complex search body using ID and its value in the city database */\n  complexSearchId(value: number, param: string): string {\n    //primero comprobamos que el parámetro es válido\n    if (param !== \"NAME\" && param !== \"ID\" && param !== \"COUNTRY\" && param !== \"LAT\" && param !== \"LON\") {\n      param = \"NAME\";\n    }\n\n    return `{\n      \"filter\": {\n        \"@basic_expression\":{\n          \"lop\" : \"` + param + `\",\n          \"op\" : \"=\",\n          \"rop\" : ` + value + `\n        }\n      },\n      \"columns\":[ \"ID\",\"COUNTRY\",\"LAT\",\"LON\",\"NAME\"]\n     }`;\n  }\n\n  /**Performs a city search by ID (primary key) in the database */\n  searchById(city: number): SavedCity {\n    //It is not considered the case of a wrong id as it is internally managed and the user cannot introduce its value directly\n    let ans: SavedCity;\n\n    this.http.post(this.commonUrl + \"/search\", this.complexSearchId(city, \"ID\")).subscribe(rx => {\n      //We subscribe for the search results\n      console.log(rx);\n      rx.data.forEach(item => {\n        ans = new SavedCity(item.NAME, item.ID.toString(), item.COUNTRY, item.LON, item.LAT);\n      });\n    });\n\n    return ans;\n  }\n\n  /**Fills local array of cities after querying by IDs to the server */\n  loadFavourites(cities: Array) {\n    //Queries every city by id in the user and stores it in localStorage as favourites\n\n    cities.forEach(city => {\n      this.http.post(this.commonUrl + \"/search\", this.complexSearchId(parseInt(city), \"ID\")).subscribe(rx =>\n        this.savedCitiesService.save(new SavedCity(rx.data[0].NAME, rx.data[0].ID.toString(), rx.data[0].COUNTRY, rx.data[0].LON, rx.data[0].LAT))\n      );\n    });\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CityComponent.html":{"url":"components/CityComponent.html","title":"component - CityComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CityComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/city/city.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-city\n            \n\n            \n                styleUrls\n                city.component.css\n            \n\n\n\n            \n                templateUrl\n                ./city.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cityShown\n                            \n                            \n                                dataSource\n                            \n                            \n                                displayedColumns\n                            \n                            \n                                forecast\n                            \n                            \n                                rx\n                            \n                            \n                                showForecast\n                            \n                            \n                                valuesDisplayed\n                            \n                            \n                                weatherNow\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCityWeather\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                saveCity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(route: ActivatedRoute, weatherService: WeatherService, savedCitiesService: SavedCitiesService, forecastValuesService: ForecastValuesService, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/city/city.component.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        weatherService\n                                                  \n                                                        \n                                                                    WeatherService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        savedCitiesService\n                                                  \n                                                        \n                                                                    SavedCitiesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        forecastValuesService\n                                                  \n                                                        \n                                                                    ForecastValuesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCityWeather\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCityWeather()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/city/city.component.ts:60\n                            \n                        \n\n\n                \n                    \n                            Gets id from URL and asks weather service for the current weather and forecast storing it in Objects and preparing table data. Updates forecast service Data \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/city/city.component.ts:57\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saveCity\n                            \n                            \n                        \n                    \n                \n                \n                    \nsaveCity()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/city/city.component.ts:95\n                            \n                        \n\n\n                \n                    \n                            Completes the cityShown info before storing it to localhost (Favourites) \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cityShown\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cityShown:     SavedCity\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dataSource\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dataSource:     \n\n                    \n                \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            displayedColumns\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        displayedColumns:     []\n\n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['parameter', 'value']\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            forecast\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        forecast:     \n\n                    \n                \n                    \n                        \n                            Default value : new Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rx\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rx:     Object\n\n                    \n                \n                    \n                        \n                            Type :     Object\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            showForecast\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        showForecast:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valuesDisplayed\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        valuesDisplayed:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            weatherNow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        weatherNow:     WeatherNow\n\n                    \n                \n                    \n                        \n                            Type :     WeatherNow\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/city.component.ts:36\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { SavedCity } from '../savedCity';\nimport { WeatherService } from '../weather.service';\nimport { WeatherNow } from '../weatherNow';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { SavedCitiesService } from '../saved-cities.service';\nimport { ForecastValuesService } from '../forecast-values.service';\n\nimport { MatTableDataSource } from '@angular/material';\n\nimport { Data, Forecast, RespuestaForecast } from './data';\n\nimport { MatSnackBar } from '@angular/material'\n\n\n@Component({\n  selector: 'app-city',\n  templateUrl: './city.component.html',\n  styleUrls: ['./city.component.css']\n})\n\n\n/* \nThis component shows the information adquired from the microservice through the weather service. It gets the city code from the URL.\n\nFrom this component it is possible to save a new city to the local storage.\n\nAsks for a WeatherNow object with the city weather info to\n\nIncludes in its template a button that routes to the GraphsComponent, which shows several forecast graphs.\n*/\nexport class CityComponent implements OnInit {\n\n  cityShown: SavedCity;\n  weatherNow: WeatherNow;\n  rx: Object;\n  valuesDisplayed: Array;\n  dataSource;\n  displayedColumns = ['parameter', 'value'];\n  forecast = new Array();\n  showForecast = false;\n\n  constructor(\n    private route: ActivatedRoute,\n    private weatherService: WeatherService,\n    private savedCitiesService: SavedCitiesService,\n    private forecastValuesService: ForecastValuesService,\n    private snackBar: MatSnackBar\n  ) {\n    //listen to a change in the path to refresh info\n    this.route.params.subscribe((value: PopStateEvent) => {\n      this.getCityWeather();\n    });\n  }\n\n  ngOnInit() { }\n\n  /**Gets id from URL and asks weather service for the current weather and forecast storing it in Objects and preparing table data. Updates forecast service Data */\n  getCityWeather() {\n\n    //Get the parameters from the URL\n    const id = this.route.snapshot.paramMap.get('id');\n    const name = this.route.snapshot.paramMap.get('name');\n\n    this.cityShown = new SavedCity(name, id);\n\n    this.weatherService.getWeather(this.cityShown.id).subscribe(rx => {\n      this.rx = rx\n      //Put the values received in the object weatherNow\n      this.weatherNow = new WeatherNow();\n      this.weatherNow.set(rx);\n\n      //Display the values\n      this.valuesDisplayed = this.weatherNow.displayValues();\n      //dataSource is used to represent the data in the mat table\n      this.dataSource = new MatTableDataSource(this.valuesDisplayed);\n    });\n\n    this.weatherService.getForecast(this.cityShown.id).subscribe((rx: RespuestaForecast) => {\n\n      this.forecast = [];\n\n      Array.from(rx.list).forEach(element => {\n        this.forecast.push(new Forecast(element));\n      });\n      //Updates the service with the current city forecasted values\n      this.forecastValuesService.setValues(this.forecast);\n      this.forecastValuesService.setCity(this.cityShown);\n\n    });\n  }\n\n  /**Completes the cityShown info before storing it to localhost (Favourites) */\n  saveCity() {\n    this.cityShown.country = this.weatherNow.sys.country;\n    this.cityShown.coord = this.weatherNow.coord;\n    this.savedCitiesService.save(this.cityShown);\n\n    this.snackBar.open(`${this.cityShown.name} saved to favourites`, `Ok`, { duration: 3000 });\n  }\n\n\n}\n    \n\n    \n        \n\n\n  This is the current weather data in {{cityShown.name}}:\n\n\n  Show forecast\n\n\n\n\n\n  favorite\n\n\n\n\n\n\n  \n    \n       Parameter \n       {{element.parameter}} \n    \n\n    \n       Value \n       {{element.value}} \n    \n\n    \n    \n  \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  This is the current weather data in {{cityShown.name}}:  Show forecast  favorite             Parameter        {{element.parameter}}                Value        {{element.value}}               '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CityComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudsAndWindService.html":{"url":"injectables/CloudsAndWindService.html","title":"injectable - CloudsAndWindService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  CloudsAndWindService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                chart\n                            \n                            \n                                clouds\n                            \n                            \n                                dates\n                            \n                            \n                                wind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCloudsAndWindChart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:89\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCloudsAndWindChart\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCloudsAndWindChart(forecast: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:18\n                            \n                        \n\n\n                \n                    \n                            Returns a chart with Clouds and Wind data \n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        forecast\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Chart\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        chart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clouds\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        clouds:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dates\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dates:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        wind:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts:13\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Forecast } from '../../city/data';\nimport { Chart } from 'chart.js';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n/** This service gets the forecast values formated and returns a clouds and wind chart*/\nexport class CloudsAndWindService {\n\n  chart: Chart;\n  wind: number[];\n  clouds: number[];\n  dates: string[];\n\n  /**Returns a chart with Clouds and Wind data */\n  getCloudsAndWindChart(forecast: Array): Chart {\n\n    this.clouds = forecast.map(item => {\n      //extracts a Array with numbers indicating the clouds percentage\n      return item.clouds.all;\n    });\n\n    this.wind = forecast.map(item => {\n      //extracts a Array with numbers indicating wind speed km/h\n      return item.wind.speed;\n    });\n\n    this.dates = forecast.map(item => {\n      //extracts a Array with strings indicating dates\n      return item.dt_txt;\n    });\n\n    this.chart = new Chart('cloudsAndWind', {\n      type: 'bar',\n      data: {\n        labels: this.dates,\n        datasets: [\n\n          {\n            label: 'Wind speed km/h',\n            data: this.wind,\n            borderColor: \"#BADA55\",\n            fill: false,\n            backgroundColor: \"#aaaaaa\",\n            type: 'line', //The wind is not presented in bars\n            yAxisID: 'Wind'\n          }, {\n            label: 'Clouds percentage %',\n            data: this.clouds,\n            borderColor: \"#cccccc\",\n            fill: false,\n            showLine: true,\n            backgroundColor: \"#cccccc\",\n            yAxisID: 'Clouds'\n          }\n        ]\n      },\n      options: {\n\n        legend: {\n          display: true\n        },\n        scales: {\n          xAxes: [{\n            display: true\n          }],\n          yAxes: [{\n            id: 'Wind',\n            display: true,\n            ticks: {\n              min: 0,\n              max: Math.max(...this.wind)\n            }\n          }, {\n            id: 'Clouds',\n            display: true,\n            ticks: {\n              min: 0,\n              max: 100\n            }\n          }],\n        }\n      }\n    });\n\n    return this.chart;\n  }\n\n  constructor() { }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Data.html":{"url":"classes/Data.html","title":"class - Data","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Data\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/city/data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                parameter\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/city/data.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            parameter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        parameter:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        value:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Weather } from '../weather'\n\n\nexport class Data {\n    parameter: string;\n    value: string;\n\n    constructor() { }\n}\n/* Data is used to transfer information as an array of Data to the MatTable in city */\n\nexport class Forecast {\n\n    clouds: { all: number };\n    dt: number;\n    dt_txt: string;\n\n    main: {\n        grnd_level: number,\n        humidity: number,\n        pressure: number,\n        sea_level: number,\n        temp: number,\n        temp_kf: number,\n        temp_max: number,\n        temp_min: number\n    };\n\n    weather: Array;\n    /*\n        id\n        main\n        description\n        icon\n    */\n\n    wind: {\n        speed: number,\n        deg: number\n    }\n\n    rain: number;\n    snow: number;\n    constructor(element: Forecast) {\n        this.weather = new Array();\n\n        this.clouds = element.clouds;\n        this.dt = element.dt;\n        this.dt_txt = element.dt_txt;\n\n        this.main = {\n            grnd_level: element.main.grnd_level,\n            humidity: element.main.humidity,\n            pressure: element.main.pressure,\n            sea_level: element.main.sea_level,\n            temp: element.main.temp,\n            temp_kf: element.main.temp_kf,\n            temp_max: element.main.temp_max,\n            temp_min: element.main.temp_min\n        };\n\n\n        element.weather.forEach((weather: Weather) => {\n            const w = new Weather();\n            w.main = weather.main;\n            w.id = weather.id;\n            w.icon = weather.icon;\n            w.description = weather.description;\n\n            this.weather.push(w);\n        });\n\n        this.wind = {\n            speed: element.wind.speed,\n            deg: element.wind.deg\n        };\n\n        if (element.rain == undefined) {\n            //console.log(\"rain undefined\");\n        } else {\n            this.rain = element.rain[\"3h\"];\n        }\n\n        if (element.snow == undefined) {\n            //console.log(\"snow undefined\");\n        } else {\n            this.snow = element.snow[\"3h\"];\n        }\n\n    }\n}\n/* The object Forecast stores all the information about the weather provided by the service for a certain hour */\n\nexport class RespuestaForecast {\n\n    list: Array;\n\n    constructor() { }\n}\n\n/* \nData types used for sending data to the mat-table, Graph services and managing a server response containing the forecast for several hours.\n*/\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Forecast.html":{"url":"classes/Forecast.html","title":"class - Forecast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Forecast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/city/data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                clouds\n                            \n                            \n                                dt\n                            \n                            \n                                dt_txt\n                            \n                            \n                                main\n                            \n                            \n                                rain\n                            \n                            \n                                snow\n                            \n                            \n                                weather\n                            \n                            \n                                wind\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(element: Forecast)\n                    \n                \n                        \n                            \n                                Defined in src/app/city/data.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                    Forecast\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clouds\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        clouds:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dt:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dt_txt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dt_txt:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            main\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        main:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rain\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rain:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        snow:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            weather\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        weather:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        wind:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:37\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Weather } from '../weather'\n\n\nexport class Data {\n    parameter: string;\n    value: string;\n\n    constructor() { }\n}\n/* Data is used to transfer information as an array of Data to the MatTable in city */\n\nexport class Forecast {\n\n    clouds: { all: number };\n    dt: number;\n    dt_txt: string;\n\n    main: {\n        grnd_level: number,\n        humidity: number,\n        pressure: number,\n        sea_level: number,\n        temp: number,\n        temp_kf: number,\n        temp_max: number,\n        temp_min: number\n    };\n\n    weather: Array;\n    /*\n        id\n        main\n        description\n        icon\n    */\n\n    wind: {\n        speed: number,\n        deg: number\n    }\n\n    rain: number;\n    snow: number;\n    constructor(element: Forecast) {\n        this.weather = new Array();\n\n        this.clouds = element.clouds;\n        this.dt = element.dt;\n        this.dt_txt = element.dt_txt;\n\n        this.main = {\n            grnd_level: element.main.grnd_level,\n            humidity: element.main.humidity,\n            pressure: element.main.pressure,\n            sea_level: element.main.sea_level,\n            temp: element.main.temp,\n            temp_kf: element.main.temp_kf,\n            temp_max: element.main.temp_max,\n            temp_min: element.main.temp_min\n        };\n\n\n        element.weather.forEach((weather: Weather) => {\n            const w = new Weather();\n            w.main = weather.main;\n            w.id = weather.id;\n            w.icon = weather.icon;\n            w.description = weather.description;\n\n            this.weather.push(w);\n        });\n\n        this.wind = {\n            speed: element.wind.speed,\n            deg: element.wind.deg\n        };\n\n        if (element.rain == undefined) {\n            //console.log(\"rain undefined\");\n        } else {\n            this.rain = element.rain[\"3h\"];\n        }\n\n        if (element.snow == undefined) {\n            //console.log(\"snow undefined\");\n        } else {\n            this.snow = element.snow[\"3h\"];\n        }\n\n    }\n}\n/* The object Forecast stores all the information about the weather provided by the service for a certain hour */\n\nexport class RespuestaForecast {\n\n    list: Array;\n\n    constructor() { }\n}\n\n/* \nData types used for sending data to the mat-table, Graph services and managing a server response containing the forecast for several hours.\n*/\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ForecastValuesService.html":{"url":"injectables/ForecastValuesService.html","title":"injectable - ForecastValuesService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  ForecastValuesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/forecast-values.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                            \n                                forecastValues\n                            \n                            \n                                updated\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCity\n                            \n                            \n                                getUpdates\n                            \n                            \n                                getValues\n                            \n                            \n                                setCity\n                            \n                            \n                                setValues\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/forecast-values.service.ts:40\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCity\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCity()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:38\n                            \n                        \n\n\n                \n                    \n                            Returns the current city \n\n\n                            \n                                Returns :     SavedCity\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getUpdates\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetUpdates()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:18\n                            \n                        \n\n\n                \n                    \n                            Returns an Observable to get changes in the current forecast values \n\n\n                            \n                                Returns :     Observable>\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getValues\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetValues()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:29\n                            \n                        \n\n\n                \n                    \n                            Returns the current forecast values \n\n\n                            \n                                Returns :     Array\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setCity\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetCity(city: SavedCity)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:34\n                            \n                        \n\n\n                \n                    \n                            Sets the current city (may not be used in the app)\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        city\n                                                        \n                                                                    SavedCity\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setValues\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetValues(values: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:23\n                            \n                        \n\n\n                \n                    \n                            Sets the current forecast values \n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            city\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        city:     SavedCity\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            forecastValues\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        forecastValues:     \n\n                    \n                \n                    \n                        \n                            Default value : Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        updated:     \n\n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/forecast-values.service.ts:14\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Forecast } from './city/data';\nimport { Observable, Subject } from 'rxjs';\nimport { SavedCity } from './savedCity';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n/**Simply stores and shares updates of the forecast values used in the current moment in the application*/\nexport class ForecastValuesService {\n\n  forecastValues = Array();\n  updated = new Subject();\n  city: SavedCity;\n\n  /**Returns an Observable to get changes in the current forecast values */\n  getUpdates(): Observable> {\n    return >>this.updated.asObservable();\n  }\n\n  /**Sets the current forecast values */\n  setValues(values: Array) {\n    this.forecastValues = values;\n    this.updated.next(this.forecastValues);\n  }\n\n  /**Returns the current forecast values */\n  getValues(): Array {\n    return this.forecastValues;\n  }\n\n  /**Sets the current city (may not be used in the app)*/\n  setCity(city: SavedCity) {\n    this.city = city;\n  }\n  /**Returns the current city */\n  getCity(): SavedCity {\n    return this.city;\n  }\n\n  constructor() { }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GraphsComponent.html":{"url":"components/GraphsComponent.html","title":"component - GraphsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GraphsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/graphs/graphs.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-graphs\n            \n\n            \n                styleUrls\n                graphs.component.css\n            \n\n\n\n            \n                templateUrl\n                ./graphs.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                            \n                                cloudColor\n                            \n                            \n                                cloudsAndWindChart\n                            \n                            \n                                dates\n                            \n                            \n                                forecastValues\n                            \n                            \n                                rain\n                            \n                            \n                                rainAndSnowChart\n                            \n                            \n                                rainColor\n                            \n                            \n                                snow\n                            \n                            \n                                temperatureChart\n                            \n                            \n                                temperatureColor\n                            \n                            \n                                temperatures\n                            \n                            \n                                temperaturesMax\n                            \n                            \n                                temperaturesMin\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cloudsAndWind\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                rainAndSnow\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(forecastValuesService: ForecastValuesService, temperatureService: TemperatureService, rainAndSnowService: RainAndSnowService, cloudsAndWindService: CloudsAndWindService, weatherService: WeatherService, route: ActivatedRoute)\n                    \n                \n                        \n                            \n                                Defined in src/app/graphs/graphs.component.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        forecastValuesService\n                                                  \n                                                        \n                                                                    ForecastValuesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        temperatureService\n                                                  \n                                                        \n                                                                    TemperatureService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        rainAndSnowService\n                                                  \n                                                        \n                                                                    RainAndSnowService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        cloudsAndWindService\n                                                  \n                                                        \n                                                                    CloudsAndWindService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        weatherService\n                                                  \n                                                        \n                                                                    WeatherService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cloudsAndWind\n                            \n                            \n                        \n                    \n                \n                \n                    \ncloudsAndWind()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:122\n                            \n                        \n\n\n                \n                    \n                            Changes button color to displayed and erases the other charts to show clouds and wind chart or erases clouds and wind chart \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:61\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rainAndSnow\n                            \n                            \n                        \n                    \n                \n                \n                    \nrainAndSnow()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:102\n                            \n                        \n\n\n                \n                    \n                            Changes button color to displayed and erases the other charts to show raind and snow chart or erases raind and snow chart \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperature\n                            \n                            \n                        \n                    \n                \n                \n                    \ntemperature()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:81\n                            \n                        \n\n\n                \n                    \n                            Changes button color to displayed and erases the other charts to show temperatures chart or erases temperatures chart \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            city\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        city:     \n\n                    \n                \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cloudColor\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cloudColor:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cloudsAndWindChart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cloudsAndWindChart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dates\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dates:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            forecastValues\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        forecastValues:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rain\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rain:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rainAndSnowChart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rainAndSnowChart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rainColor\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rainColor:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        snow:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperatureChart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperatureChart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperatureColor\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperatureColor:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperatures\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperatures:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperaturesMax\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperaturesMax:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperaturesMin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperaturesMin:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/graphs.component.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { ForecastValuesService } from '../forecast-values.service';\nimport { Forecast, RespuestaForecast } from '../city/data';\nimport { TemperatureService } from './temperature/temperature.service';\nimport { RainAndSnowService } from './rainAndSnow/rain-and-snow.service';\nimport { CloudsAndWindService } from './cloudsAndWind/clouds-and-wind.service';\nimport { WeatherService } from '../weather.service';\nimport { ActivatedRoute, Route } from '@angular/router';\n\n@Component({\n  selector: 'app-graphs',\n  templateUrl: './graphs.component.html',\n  styleUrls: ['./graphs.component.css']\n})\n\n/* This component shows and deletes the charts and obtains them from the corresponding services */\nexport class GraphsComponent implements OnInit {\n\n  forecastValues: Array;\n  temperatures: number[];\n  temperaturesMax: number[];\n  temperaturesMin: number[];\n  rain: number[];\n  snow: number[];\n  dates: string[];\n  temperatureChart: Chart;\n  rainAndSnowChart: Chart;\n  cloudsAndWindChart: Chart;\n  city;\n  temperatureColor = \"\";\n  rainColor = \"\";\n  cloudColor = \"\";\n\n  constructor(\n    private forecastValuesService: ForecastValuesService,\n    private temperatureService: TemperatureService,\n    private rainAndSnowService: RainAndSnowService,\n    private cloudsAndWindService: CloudsAndWindService,\n    private weatherService: WeatherService,\n    private route: ActivatedRoute\n  ) {\n    //Updates values from the service\n    this.forecastValues = forecastValuesService.getValues();\n    //Updates the chart every time values change\n    forecastValuesService.getUpdates().subscribe(values => {\n      this.forecastValues = values;\n      //If the city changes, charts do so\n      //Clean charts\n      if (this.temperatureChart) {\n        this.temperatureChart = undefined;\n      }\n      if (this.rainAndSnowChart) {\n        this.rainAndSnowChart = undefined;\n      }\n      if (this.cloudsAndWindChart) {\n        this.cloudsAndWindChart = undefined;\n      }\n    });\n  }\n\n  ngOnInit() {\n\n    this.city = this.route.snapshot.paramMap.get('name');\n    const id = this.route.snapshot.paramMap.get('id');\n\n    this.weatherService.getForecast(id).subscribe((rx: RespuestaForecast) => {\n\n      this.forecastValues = [];\n\n      Array.from(rx.list).forEach(element => {\n        this.forecastValues.push(new Forecast(element));\n      });\n      //Updates the service with the current city forecasted values\n      this.forecastValuesService.setValues(this.forecastValues);\n\n      this.temperature();\n    });\n  }\n\n  /**Changes button color to displayed and erases the other charts to show temperatures chart or erases temperatures chart */\n  temperature() {\n    if (this.temperatureChart === undefined) {\n      this.temperatureColor = \"primary\";\n      this.cloudColor = \"\";\n      this.rainColor = \"\";\n      this.cloudsAndWindChart = undefined;\n      this.rainAndSnowChart = undefined;\n\n      this.forecastValues = this.forecastValuesService.getValues();\n\n      this.temperatureChart = this.temperatureService.getTemperatureChart(this.forecastValues);\n    } else {\n      //Makes the chart dissapear\n      this.temperatureChart = undefined;\n      this.temperatureColor = \"\";\n    }\n\n  }\n\n\n  /**Changes button color to displayed and erases the other charts to show raind and snow chart or erases raind and snow chart */\n  rainAndSnow() {\n    if (this.rainAndSnowChart === undefined) {\n      this.rainColor = \"primary\";\n      this.temperatureColor = \"\";\n      this.cloudColor = \"\";\n      this.temperatureChart = undefined;\n      this.cloudsAndWindChart = undefined;\n\n      this.forecastValues = this.forecastValuesService.getValues();\n\n      this.rainAndSnowChart = this.rainAndSnowService.getRainAndSnowChart(this.forecastValues);\n    } else {\n      //Makes the chart dissapear\n      this.rainAndSnowChart = undefined;\n      this.rainColor = \"\";\n    }\n  }\n\n\n  /**Changes button color to displayed and erases the other charts to show clouds and wind chart or erases clouds and wind chart */\n  cloudsAndWind() {\n    if (this.cloudsAndWindChart === undefined) {\n      this.cloudColor = \"primary\";\n      this.temperatureColor = \"\";\n      this.rainColor = \"\";\n      this.temperatureChart = undefined;\n      this.rainAndSnowChart = undefined;\n\n      this.forecastValues = this.forecastValuesService.getValues();\n\n      this.cloudsAndWindChart = this.cloudsAndWindService.getCloudsAndWindChart(this.forecastValues);\n    } else {\n      //Makes the chart dissapear\n      this.cloudsAndWindChart = undefined;\n      this.cloudColor = \"\";\n    }\n  }\n\n}\n    \n\n    \n        {{city}}\n\n\n\n  \n    \n      Temperature\n    \n    \n    \n      Rain and Snow\n    \n    \n    \n      Clouds and Wind\n    \n  \n\n  \n    \n      {{ temperatureChart }}\n    \n    \n      {{ rainAndSnowChart }}\n    \n    \n      {{ cloudsAndWindChart }}\n    \n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{city}}            Temperature                  Rain and Snow                  Clouds and Wind                  {{ temperatureChart }}              {{ rainAndSnowChart }}              {{ cloudsAndWindChart }}      '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GraphsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/InitialComponent.html":{"url":"components/InitialComponent.html","title":"component - InitialComponent","body":"\n                   \n\n\n\n\n\n  Components\n  InitialComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/initial/initial.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-initial\n            \n\n            \n                styleUrls\n                initial.component.css\n            \n\n\n\n            \n                templateUrl\n                ./initial.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admin\n                            \n                            \n                                citiesList\n                            \n                            \n                                citiesListURL\n                            \n                            \n                                cityMatch\n                            \n                            \n                                found\n                            \n                            \n                                foundCities\n                            \n                            \n                                keyAdmin\n                            \n                            \n                                loading\n                            \n                            \n                                rxCity\n                            \n                            \n                                wasFound\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCitiesList\n                            \n                            \n                                getCity\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                search\n                            \n                            \n                                toggleAdmin\n                            \n                            \n                                uploadAll\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:keyup\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(weatherService: WeatherService, http: HttpClient, citiesServer: CitiesServerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/initial/initial.component.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        weatherService\n                                                  \n                                                        \n                                                                    WeatherService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        citiesServer\n                                                  \n                                                        \n                                                                    CitiesServerService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        city\n                    \n                    \n                            \n                            Type:    string\n\n                            \n                        \n                            Default value: ''\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:44\n                            \n                        \n            \n        \n\n\n\n    \n    HostListeners        \n            \n                \n                    \n                        \n                        \n                            \n                            window:keyup\n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Arguments : '$event' \n                        \n                    \n                \n                    \nwindow:keyup(event: KeyboardEvent)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:141\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCitiesList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCitiesList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:61\n                            \n                        \n\n\n                \n                    \n                            Requests to the assets folder the JSON with all the cities. Heavy download\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCity\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCity()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:76\n                            \n                        \n\n\n                \n                    \n                            This function looks for a service response searching with a city name\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:55\n                            \n                        \n\n\n                \n                    \n                            The code includes a class in the body that produces from styles.css the display of a wallpaper \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            search\n                            \n                            \n                        \n                    \n                \n                \n                    \nsearch()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:102\n                            \n                        \n\n\n                \n                    \n                            If there exist a local list it is used to search, but if not available asks the API for results through getCity and the API for suggestions \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleAdmin\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoggleAdmin()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:135\n                            \n                        \n\n\n                \n                    \n                            Show/Hide admin options\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            uploadAll\n                            \n                            \n                        \n                    \n                \n                \n                    \nuploadAll()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:125\n                            \n                        \n\n\n                \n                    \n                            This function should not be called because it makes the app crash. However, it has been able to make all the inserts correctly in the dataBase.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            admin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        admin:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesList:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesListURL\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesListURL:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '../../assets/city.list.json'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cityMatch\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cityMatch:     SavedCity\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            found\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        found:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            foundCities\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        foundCities:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            keyAdmin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        keyAdmin:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loading\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        loading:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'none'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rxCity\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rxCity:     SavedCity\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wasFound\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        wasFound:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'none'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/initial/initial.component.ts:37\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, Input, HostListener } from '@angular/core';\n\nimport { WeatherService } from '../weather.service';\n\nimport { SavedCity } from '../savedCity';\n\nimport { HttpClient } from '@angular/common/http';\n\nimport { CitiesServerService } from '../cities-server.service';\n\n\n\n@Component({\n  selector: 'app-initial',\n  templateUrl: './initial.component.html',\n  styleUrls: ['./initial.component.css']\n})\n/*\nThis component is meant to show an initial view of the application.\n\nIt has got a search utility with which new cities can be accessed\n\nDisplays two answers from two different sources:\n\n  An answer obtained searching by city name in the API\n\n  An answer obtained searching in the Ontimize EE database through the server OR searching in a local list of cities downloaded from assets\n\nAlso display not recomended actions that may be necessary to perform when administrating the app\n*/\nexport class InitialComponent implements OnInit {\n\n  rxCity: SavedCity;\n  cityMatch: SavedCity;\n  found = false;\n  loading = 'none';\n  wasFound = 'none';\n  citiesListURL = '../../assets/city.list.json';\n  citiesList: Array;\n  foundCities: Array;\n  admin = false;\n  keyAdmin = \"\";\n\n  @Input() city: string = '';\n\n  constructor(\n    private weatherService: WeatherService,\n    private http: HttpClient,\n    private citiesServer: CitiesServerService\n  ) {\n\n  }\n\n  /**The code includes a class in the body that produces from styles.css the display of a wallpaper */\n  ngOnInit() {\n    const body = document.getElementsByTagName(\"body\");\n    body[0].classList.add(\"initial-view\");\n  }\n\n  /**Requests to the assets folder the JSON with all the cities. Heavy download*/\n  getCitiesList() {\n    this.citiesList = new Array();\n    this.http.get>(this.citiesListURL).subscribe(rx => {\n      //Stores every city in the cities List were searches will be accomplished\n      Array.from(rx).forEach(element => {\n        this.citiesList.push(new SavedCity(element.name, element.id, element.country, element.coord.lon, element.coord.lat));\n      });\n    }\n\n    );\n    //This method isn't compatible with a optimum performance of the application as it consumes too much memory and bandwidth\n  }\n\n\n  /**This function looks for a service response searching with a city name*/\n  getCity() {\n    if (this.city.length == 0) {\n      //If the city field has no value the search is not launched\n      return;\n    }\n\n    this.loading = 'block';\n    this.wasFound = 'none';\n\n    this.weatherService.getWeatherByCityName(this.city).subscribe(rx => {\n      //We subscribe for the search results\n      this.rxCity = rx;\n      this.cityMatch = new SavedCity(this.rxCity.name, this.rxCity.id, this.rxCity.sys.country);\n      this.found = true;\n      this.loading = 'none';\n    },\n      error => {\n        this.found = false;\n        this.loading = 'none';\n        this.wasFound = 'block';\n      });\n\n  }\n\n\n  /**If there exist a local list it is used to search, but if not available asks the API for results through getCity and the API for suggestions */\n  search(): void {\n    if (this.city.length == 0) {\n      //If the city field has no value the search is not launched\n      return;\n    }\n\n    this.getCity(); //Asks the API\n\n    //Search in the cities.JSON is enabled. It produces a performance leakage\n    if ((this.city.length > 0) && (this.citiesList !== undefined)) {\n      this.foundCities = this.citiesList.filter(element => {\n\n        return (element.name.includes(this.city));\n      });\n    }\n\n\n    //Search in the dataBase through the server Ontimize EE\n    this.foundCities = this.citiesServer.searchByName(this.city);\n\n  }\n\n  /**This function should not be called because it makes the app crash. However, it has been able to make all the inserts correctly in the dataBase.*/\n  uploadAll() {\n    this.citiesServer.log();\n    console.log(\n      this.citiesServer.upload(>this.citiesList)\n    );\n\n    console.log(\"complete upload of citiesList to the dataBase\");\n  }\n\n  /**Show/Hide admin options*/\n  toggleAdmin() {\n    this.admin = !this.admin;\n  }\n\n  //Listens to the keyboard and triggers a function to show admin options when \"admin\" is written\n  @HostListener('window:keyup', ['$event'])\n  keyEvent(event: KeyboardEvent) {\n\n    this.keyAdmin = this.keyAdmin + event.key;\n    if (this.keyAdmin.substr(-5) === \"admin\") {\n      this.toggleAdmin();\n      this.keyAdmin = \"\";\n    }\n\n  }\n\n}\n    \n\n    \n        \n  \n\n    Look for a city: {{ city | uppercase }}\n\n    \n\n      \n        \n      \n      Searching...\n\n    \n  \n\n\n  Search with Weather-Angular!\n\n  \n    {{cityMatch.name}} ({{cityMatch.sys.country}})\n  \n\n  \n    \n    Enable suggestions (may require a 4.2 MB download)\n    Fill in the local dataBase\n  \n  The city searched was not found\n\n  Suggested results: \n  \n     {{found.name}} ({{found.sys.country}}) \n  \n\n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Look for a city: {{ city | uppercase }}                              Searching...        Search with Weather-Angular!      {{cityMatch.name}} ({{cityMatch.sys.country}})            Enable suggestions (may require a 4.2 MB download)    Fill in the local dataBase    The city searched was not found  Suggested results:        {{found.name}} ({{found.sys.country}})     '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'InitialComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/InterceptorComponent.html":{"url":"components/InterceptorComponent.html","title":"component - InterceptorComponent","body":"\n                   \n\n\n\n\n\n  Components\n  InterceptorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/interceptor/interceptor.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                HttpInterceptor\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-interceptor\n            \n\n            \n                styleUrls\n                interceptor.component.css\n            \n\n\n\n            \n                templateUrl\n                ./interceptor.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: LogService)\n                    \n                \n                        \n                            \n                                Defined in src/app/interceptor/interceptor.component.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                    LogService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intercept\n                            \n                            \n                        \n                    \n                \n                \n                    \nintercept(request: HttpRequest, next: HttpHandler)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/interceptor/interceptor.component.ts:16\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                        \n                                                                    HttpRequest\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        next\n                                                        \n                                                                    HttpHandler\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable>\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { LogService } from '../log.service'\n\n@Component({\n  selector: 'app-interceptor',\n  templateUrl: './interceptor.component.html',\n  styleUrls: ['./interceptor.component.css']\n})\n/**This component intercepts every outgoing http requests and filters them to perform changes. The most important, adding the current token. */\nexport class InterceptorComponent implements HttpInterceptor {\n\n  constructor(private auth: LogService) { }\n\n  intercept(request: HttpRequest, next: HttpHandler): Observable> {\n    if (request.method === \"DELETE\") {\n      return next.handle(request);\n    }\n    if (request.url.includes(`http://localhost:8080/citiesservice-server/services/rest/users/login`)) {\n      return next.handle(request);\n    }\n\n    if (request.url.includes(`http://localhost:8080/citiesservice-server/services/rest`)) {\n      request = request.clone({\n        setHeaders: {\n          'Authorization': `${localStorage.getItem(\"Token\")}`,\n          'Content-Type': `application/json`\n        }\n      });\n    }\n\n\n    return next.handle(request);\n  }\n\n}\n    \n\n    \n        \n  interceptor works!\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  interceptor works!'\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'InterceptorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogService.html":{"url":"injectables/LogService.html","title":"injectable - LogService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  LogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/log.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cities\n                            \n                            \n                                commonUrl\n                            \n                            \n                                contentType\n                            \n                            \n                                currentUser\n                            \n                            \n                                exists\n                            \n                            \n                                updated\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeSession\n                            \n                            \n                                createUser\n                            \n                            \n                                deleteBody\n                            \n                            \n                                deleteUser\n                            \n                            \n                                getToken\n                            \n                            \n                                getUpdates\n                            \n                            \n                                logIn\n                            \n                            \n                                logRefresh\n                            \n                            \n                                updatePassword\n                            \n                            \n                                updateUserCities\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(savedCitiesService: SavedCitiesService, http: HttpClient, citiesServerService: CitiesServerService, router: Router, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/log.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        savedCitiesService\n                                                  \n                                                        \n                                                                    SavedCitiesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        citiesServerService\n                                                  \n                                                        \n                                                                    CitiesServerService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            closeSession\n                            \n                            \n                        \n                    \n                \n                \n                    \ncloseSession()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:46\n                            \n                        \n\n\n                \n                    \n                            Saves the cities to the server and closes session \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createUser\n                            \n                            \n                        \n                    \n                \n                \n                    \ncreateUser(username: string, password: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:166\n                            \n                        \n\n\n                \n                    \n                            Creates a new user using demo demouser token \n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        username\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        password\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteBody\n                            \n                            \n                        \n                    \n                \n                \n                    \ndeleteBody(username: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:223\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        username\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteUser\n                            \n                            \n                        \n                    \n                \n                \n                    \ndeleteUser(username: string, password: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:203\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        username\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        password\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getToken\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetToken()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:36\n                            \n                        \n\n\n                \n                    \n                            Returns the Token from localStorage \n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getUpdates\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetUpdates()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:41\n                            \n                        \n\n\n                \n                    \n                            Observable indicating if someone is logged in\n\n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logIn\n                            \n                            \n                        \n                    \n                \n                \n                    \nlogIn(username: string, password: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:81\n                            \n                        \n\n\n                \n                    \n                            Asks the server for the user information and stores it to the app memory (currentUser and localStorage) \n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        username\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        password\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logRefresh\n                            \n                            \n                        \n                    \n                \n                \n                    \nlogRefresh()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:139\n                            \n                        \n\n\n                \n                    \n                            Gets back user info in case it is available (the session has not been closed) \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatePassword\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdatePassword(password: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:232\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        password\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updateUserCities\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdateUserCities()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/log.service.ts:69\n                            \n                        \n\n\n                \n                    \n                            Returns the cities update request body and sends it \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cities\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cities:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            commonUrl\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        commonUrl:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"http://localhost:8080/citiesservice-server/services/rest\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contentType\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        contentType:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'application/json'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUser\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        currentUser:     UserServer\n\n                    \n                \n                    \n                        \n                            Type :     UserServer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exists\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        exists:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        updated:     \n\n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/log.service.ts:20\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { SavedCitiesService } from './saved-cities.service';\nimport { SavedCity } from './savedCity';\nimport { Observable, Subject } from 'rxjs';\nimport { HttpClient, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { UserServer, CitiesResponse } from './userServer';\nimport { CitiesServerService } from './cities-server.service';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n/** This service interacts with the Ontimize Server, with the service of users*/\nexport class LogService {\n\n\n  cities: Array;\n  updated = new Subject();\n  exists: Subject;\n  currentUser: UserServer; //Holds the info of the current logged user\n\n  commonUrl = \"http://localhost:8080/citiesservice-server/services/rest\";\n  contentType = 'application/json';\n\n  constructor(\n    private savedCitiesService: SavedCitiesService,\n    private http: HttpClient,\n    private citiesServerService: CitiesServerService,\n    private router: Router,\n    private snackBar: MatSnackBar\n  ) { }\n\n  /**Returns the Token from localStorage */\n  getToken(): string {\n    return `${localStorage.getItem(\"Token\")}`;\n  }\n\n  /**Observable indicating if someone is logged in*/\n  getUpdates(): Observable {\n    return >this.updated.asObservable();\n  }\n\n  /**Saves the cities to the server and closes session */\n  closeSession() {\n    //Should invalidate the token in the server, yet to do\n    if (this.currentUser === undefined) {\n      this.updated.next(false);\n      return;\n    }\n\n    //save to string favourite cities\n    this.currentUser.setFromList(this.savedCitiesService.getSavedCities());\n    //save the cities that don`t exist yet in the server\n    this.currentUser.citiesList = this.savedCitiesService.getSavedCities();\n    this.citiesServerService.upload(this.currentUser.citiesList);\n\n    this.updateUserCities() //creates the request body and sends it\n    //Remove session data\n    this.savedCitiesService.deleteCities();\n    localStorage.removeItem(\"session\");\n    localStorage.removeItem(\"Token\");\n    this.updated.next(false);\n    this.currentUser = undefined;\n  }\n\n  /**Returns the cities update request body and sends it */\n  updateUserCities() {\n    const body = `{\n      \"CITIES\" : \"` + this.currentUser.favouriteCities + `\"\n    }`;\n\n    this.http.post(`${this.commonUrl}/fav/update`, body).subscribe(() => { }, err => {\n      console.log(\"There's been an error trying to update user's list of cities in the db\");\n      console.log(body);\n    });\n  }\n\n  /**Asks the server for the user information and stores it to the app memory (currentUser and localStorage) */\n  logIn(username: string, password: string) {\n    let citiesList = \"\";\n    //base64 coded\n    let auth = \"Basic \" + btoa(`${username}:${password}`);\n\n\n    this.http.post(`${this.commonUrl}/users/login`, \"\", {\n      headers: new HttpHeaders({\n        'Authorization': auth\n      }),\n      observe: 'response'\n    }).subscribe(res => {\n      //Set the token\n      localStorage.setItem(\"Token\", \"Bearer \" + res.headers.get('X-Auth-Token'));\n\n      //Get the favourite cities\n      this.http.post(`${this.commonUrl}/fav/query`, \"\").subscribe(response => {\n\n        citiesList = response.data[0].CITIES;\n        //Fill in the cities server service\n        if (citiesList !== \"\") {\n          this.citiesServerService.loadFavourites(citiesList.split(','));\n        }\n\n        localStorage.setItem(\"session\", JSON.stringify(username));\n        this.currentUser = new UserServer();\n\n        this.currentUser.username = username;\n        this.currentUser.password = `Bearer ${res.headers.get('X-Auth-Token')}`;\n        this.currentUser.favouriteCities = citiesList;\n        this.currentUser.citiesId = citiesList.split(',');\n        this.currentUser.citiesList = this.savedCitiesService.getSavedCities();\n\n        this.updated.next(true);\n        //console.log(this.currentUser.display())\n        this.snackBar.open(\"Logged as \" + this.currentUser.username, \"Ok\", {\n          duration: 1500\n        });\n      }, error => {\n        console.log(\"Failure trying to obtain saved cities from the server\");\n      });\n\n\n\n    }, err => {\n      if (err.status === 401) {\n        this.snackBar.open(\"Wrong password or username\", \"Ok\", {\n          duration: 1500\n        });\n        console.log(\"Access denied\");\n      } else {\n        console.log(`There's been a problem with your log in process.`);\n        console.log(err);\n      }\n    });\n  }\n\n  /**Gets back user info in case it is available (the session has not been closed) */\n  logRefresh() {\n    let citiesList = \"\";\n    this.http.post(`${this.commonUrl}/fav/query`, \"\").subscribe(response => {\n\n      citiesList = response.data[0].CITIES;\n      //Fill in the cities server service\n      if (citiesList !== \"\") {\n        this.citiesServerService.loadFavourites(citiesList.split(','));\n      }\n\n      let username = localStorage.getItem(\"session\");\n      this.currentUser = new UserServer();\n\n      this.currentUser.username = username;\n      this.currentUser.password = localStorage.getItem(\"Token\");;\n      this.currentUser.favouriteCities = citiesList;\n      this.currentUser.citiesId = citiesList.split(',');\n      this.currentUser.citiesList = this.savedCitiesService.getSavedCities();\n\n      this.updated.next(true);\n      this.snackBar.open(\"Logged as \" + this.currentUser.username, \"Ok\", {\n        duration: 1500\n      });\n    });\n  }\n\n  /**Creates a new user using demo demouser token */\n  createUser(username: string, password: string) {\n    //Default Token for demo demouser. Don`t delete the demouser in the db because it would be complicated to create any other user afterwards\n    localStorage.setItem(\"Token\", \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGlvbi10aW1lIjoxNTI4Nzk5MTY4MzgxLCJ1c2VybmFtZSI6ImRlbW8ifQ.vwEZijOag2iCSN0UPRTS8jqre1NGzHCrg6fVkDH2-mw\")\n    this.http.post(`${this.commonUrl}/users/user`, `\n    {\n      \"data\": {\n        \"USER_\": \"${username}\",\n        \"PASSWORD\": \"${password}\",\n        \"NAME\": \"\",\n        \"SURNAME\": \"\",\n        \"EMAIL\": \"\",\n        \"NIF\" : \"\"\n      }\n      \n     }\n    `).subscribe(res => {\n        //console.log(res)\n        this.snackBar.open(`User ${username} successfully created`, \"Ok\", {\n          duration: 2500\n        });\n        this.logIn(username, password);\n      }, err => {\n        if (err.status === 500) {\n          this.snackBar.open(\"This username is already in use\", \"Ok\", {\n            duration: 2500\n          });\n        } else {\n          console.log(\"Something went wrong when creating the user\");\n        }\n      });\n  }\n\n\n\n\n\n\n  deleteUser(username: string, password: string) {\n    /**Asks the server to delete the user corresponding to the username and password in the input */\n    let deleteBody = this.deleteBody(username);\n    let basic = 'Basic ' + btoa(`${username}:${password}`);\n\n    this.http.request(new HttpRequest(\"DELETE\", `${this.commonUrl}/users/user`, deleteBody, {\n      headers: new HttpHeaders({\n        'Content-Type': \"application/json\",\n        'Authorization': basic\n      })\n    })).subscribe(() => {\n      this.snackBar.open(`The user has been deleted`, \"Ok\", {\n        duration: 2500\n      });\n      this.router.navigate(['/initial']);\n    });\n\n\n  }\n\n  deleteBody(username: string): string {\n    /**The service is always going to delete the current logged in user, no matter what the body contains*/\n    return `{\n       \"filter\": {\n         \"USER_\": \"` + username + `\"\n       }\n      }`;\n  }\n\n  updatePassword(password: string) {\n    /**Updates current user password */\n    this.http.post(`${this.commonUrl}/users/updatePassword`, `{ \"PASSWORD\" : \"${password}\"}`).subscribe(() => {\n      this.snackBar.open(`Password changed`, \"Ok\", {\n        duration: 2500\n      });\n    }, () => {\n      console.log(\"Something went wrong when changing the password\");\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LogginDialogComponent.html":{"url":"components/LogginDialogComponent.html","title":"component - LogginDialogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LogginDialogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/loggin-dialog/loggin-dialog.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-loggin-dialog\n            \n\n            \n                styleUrls\n                loggin-dialog.component.css\n            \n\n\n\n            \n                templateUrl\n                ./loggin-dialog.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                form\n                            \n                            \n                                maxLengthError\n                            \n                            \n                                minLengthError\n                            \n                            \n                                password\n                            \n                            \n                                passwordRequiredError\n                            \n                            \n                                username\n                            \n                            \n                                usernameRequiredError\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkErrors\n                            \n                            \n                                newUser\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                submit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialogRef: MatDialogRef, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/loggin-dialog/loggin-dialog.component.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                    MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            checkErrors\n                            \n                            \n                        \n                    \n                \n                \n                    \ncheckErrors()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:48\n                            \n                        \n\n\n                \n                    \n                            Shows or hides input help messages \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            newUser\n                            \n                            \n                        \n                    \n                \n                \n                    \nnewUser()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:70\n                            \n                        \n\n\n                \n                    \n                            Closes the dialog component and navigates to the user component \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:32\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submit\n                            \n                            \n                        \n                    \n                \n                \n                    \nsubmit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:41\n                            \n                        \n\n\n                \n                    \n                            If the validation is Ok returns the data and closes the dialog component \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        description:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            form\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        form:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxLengthError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        maxLengthError:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            minLengthError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        minLengthError:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        password:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            passwordRequiredError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        passwordRequiredError:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        username:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            usernameRequiredError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        usernameRequiredError:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/loggin-dialog/loggin-dialog.component.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nimport { MatDialogRef } from \"@angular/material\";\nimport { Router } from \"@angular/router\";\n\n@Component({\n  selector: 'app-loggin-dialog',\n  templateUrl: './loggin-dialog.component.html',\n  styleUrls: ['./loggin-dialog.component.css']\n})\n/** This log-in dialog pops up when the sign-in button in the navigation bar is clicked.\n\nIt just launches a form, validates it and returns the data when closed.\n\nAlso, contains a button that routes to the user creation functionality*/\nexport class LogginDialogComponent implements OnInit {\n\n  form: FormGroup;\n  description: string;\n  username: string;\n  password: string;\n  minLengthError = false;\n  maxLengthError = false;\n  passwordRequiredError = false;\n  usernameRequiredError = false;\n\n  constructor(\n    private dialogRef: MatDialogRef,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      username: new FormControl(this.username, [Validators.minLength(4), Validators.maxLength(20), Validators.required]),\n      password: new FormControl(this.password, [Validators.required])\n    });\n\n  }\n\n  /**If the validation is Ok returns the data and closes the dialog component */\n  submit() {\n    this.checkErrors();\n    if (!this.form.valid) { return; }\n    this.dialogRef.close(this.form.value);\n  }\n\n  /**Shows or hides input help messages */\n  checkErrors() {\n    this.minLengthError = this.maxLengthError = this.passwordRequiredError = this.usernameRequiredError = false;\n    if (this.form.get('username').errors !== null) {\n      if (this.form.get('username').errors.minlength !== undefined) {\n        this.minLengthError = true;\n      }\n      if (this.form.get('username').errors.maxLength !== undefined) {\n        this.maxLengthError = true;\n      }\n      if (this.form.get('username').errors.required !== undefined) {\n        this.usernameRequiredError = true;\n      }\n    }\n\n    if (this.form.get('password').errors !== null) {\n      if (this.form.get('password').errors.required !== undefined) {\n        this.passwordRequiredError = true;\n      }\n    }\n  }\n\n  /**Closes the dialog component and navigates to the user component */\n  newUser() {\n    this.dialogRef.close();\n    this.router.navigate(['user']);\n  }\n}\n\n    \n\n    \n        \n\n    Log In\n\n    \n        \n            \n                \n                    \n                \n                Username is too short\n                Username is too long\n                Ussername is required\n            \n            \n                \n                    \n                \n                Password is required\n            \n\n        \n    \n\n    \n        Cancel\n        \n        Log in\n        \n        Sign up\n    \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Log In                                                                                            Username is too short                Username is too long                Ussername is required                                                                                            Password is required                                    Cancel                Log in                Sign up    '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LogginDialogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MaterialModule.html":{"url":"modules/MaterialModule.html","title":"module - MaterialModule","body":"\n                   \n\n\n\n\n  Modules\n  MaterialModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/material/material.module.ts\n        \n\n\n        \n\n        \n            \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  MatButtonModule,\n  MatMenuModule,\n  MatToolbarModule,\n  MatIconModule,\n  MatCardModule,\n  MatGridListModule,\n  MatSidenavModule,\n  MatSortModule,\n  MatTableModule,\n  MatInputModule,\n  MatSelectModule,\n  MatSliderModule,\n  MatRadioModule,\n  MatListModule,\n  MatProgressSpinnerModule,\n  MatChipsModule,\n  MatTooltipModule,\n  MatExpansionModule,\n  MatDialogModule,\n  MatAutocompleteModule,\n  MatTabsModule,\n  MatSlideToggleModule\n} from '@angular/material';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatMenuModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatCardModule,\n    MatGridListModule,\n    MatSidenavModule,\n    MatSortModule,\n    MatTableModule,\n    MatInputModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatRadioModule,\n    MatListModule,\n    MatProgressSpinnerModule,\n    MatChipsModule,\n    MatTooltipModule,\n    MatExpansionModule,\n    MatDialogModule,\n    MatAutocompleteModule,\n    MatTabsModule,\n    MatSlideToggleModule\n  ],\n  exports: [\n    MatButtonModule,\n    MatMenuModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatCardModule,\n    MatGridListModule,\n    MatSidenavModule,\n    MatSortModule,\n    MatTableModule,\n    MatInputModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatRadioModule,\n    MatListModule,\n    MatProgressSpinnerModule,\n    MatChipsModule,\n    MatTooltipModule,\n    MatExpansionModule,\n    MatDialogModule,\n    MatAutocompleteModule,\n    MatTabsModule,\n    MatSlideToggleModule\n  ],\n  declarations: []\n})\n\n/** Here components from material are imported and exported in order to not engrose the app.module (just imports MaterialModule )too much and get only the necessary elements */\nexport class MaterialModule { }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavigationComponent.html":{"url":"components/NavigationComponent.html","title":"component - NavigationComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NavigationComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/navigation/navigation.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-navigation\n            \n\n            \n                styleUrls\n                navigation.component.css\n            \n\n\n\n            \n                templateUrl\n                ./navigation.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                citiesSubscription\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                dialogRef\n                            \n                            \n                                emptyList\n                            \n                            \n                                intervalCheck\n                            \n                            \n                                logged\n                            \n                            \n                                logSubscription\n                            \n                            \n                                logSubscription2\n                            \n                            \n                                notEmpty\n                            \n                            \n                                profile\n                            \n                            \n                                routeSubscription\n                            \n                            \n                                savedCities\n                            \n                            \n                                youSureButton\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteCities\n                            \n                            \n                                getCities\n                            \n                            \n                                getLog\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                notSure\n                            \n                            \n                                relog\n                            \n                            \n                                toggleFavourites\n                            \n                            \n                                toggleSession\n                            \n                            \n                                youSure\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                opened\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, savedCitiesService: SavedCitiesService, logService: LogService, dialog: MatDialog, snackBar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/navigation/navigation.component.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        savedCitiesService\n                                                  \n                                                        \n                                                                    SavedCitiesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        logService\n                                                  \n                                                        \n                                                                    LogService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        opened\n                    \n                    \n                            \n                            Type:    boolean\n\n                            \n                        \n                            Default value: false\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:28\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteCities\n                            \n                            \n                        \n                    \n                \n                \n                    \ndeleteCities()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:127\n                            \n                        \n\n\n                \n                    \n                            Asks cities service to delete de list and updates its own \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCities\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCities()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:96\n                            \n                        \n\n\n                \n                    \n                            Asks the savedCities service to load the cities in the localhost and updates the saved cities list\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getLog\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetLog()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:81\n                            \n                        \n\n\n                \n                    \n                            Subscribes to changes in the current user from the log service observable \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:63\n                            \n                        \n\n\n                \n                    \n                            Unsubscribe from Observables to avoid inefficiency\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:55\n                            \n                        \n\n\n                \n                    \n                            Initial tasks \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notSure\n                            \n                            \n                        \n                    \n                \n                \n                    \nnotSure()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:142\n                            \n                        \n\n\n                \n                    \n                            Cancels deletion of cities list \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            relog\n                            \n                            \n                        \n                    \n                \n                \n                    \nrelog()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:70\n                            \n                        \n\n\n                \n                    \n                            If there is a available token tries to restore session \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleFavourites\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoggleFavourites()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:111\n                            \n                        \n\n\n                \n                    \n                            Shows (if available) or hides the favourites sidenav \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleSession\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoggleSession()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:147\n                            \n                        \n\n\n                \n                    \n                            Closes session if logged in, shows dialog component to log in if there isn't a current running session\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            youSure\n                            \n                            \n                        \n                    \n                \n                \n                    \nyouSure()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:137\n                            \n                        \n\n\n                \n                    \n                            Shows the confirmation option to delete the cities list \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dialog\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dialog:     MatDialog\n\n                    \n                \n                    \n                        \n                            Type :     MatDialog\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dialogRef\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dialogRef:     MatDialogRef\n\n                    \n                \n                    \n                        \n                            Type :     MatDialogRef\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            emptyList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        emptyList:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'none'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intervalCheck\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        intervalCheck:     \n\n                    \n                \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logged\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        logged:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        logSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logSubscription2\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        logSubscription2:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notEmpty\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        notEmpty:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            profile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        profile:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            routeSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        routeSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            savedCities\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        savedCities:     SavedCity[]\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            youSureButton\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        youSureButton:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/navigation/navigation.component.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { SavedCitiesService } from '../saved-cities.service';\nimport { SavedCity } from '../savedCity';\nimport { Subscription } from 'rxjs';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { LogginDialogComponent } from '../loggin-dialog/loggin-dialog.component';\nimport { LogService } from '../log.service';\nimport { MatSnackBar } from '@angular/material';\n\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-navigation',\n  templateUrl: './navigation.component.html',\n  styleUrls: ['./navigation.component.css']\n})\n/**This component picks the saved cities from the SavedCitiesService and displays the links to city/cod in a sidenav that can be hidden\n\nAlso, presents a link to the inicial view and a menu with the options to log in, settings and about.\n\nLogged in indicator (Check icon).*/\nexport class NavigationComponent implements OnInit, OnDestroy {\n\n  savedCities: SavedCity[];\n  routeSubscription: Subscription;\n  citiesSubscription: Subscription;\n  logSubscription: Subscription;\n  logSubscription2: Subscription;\n  @Input() opened: boolean = false;\n  notEmpty = false;\n  emptyList = 'none';\n  dialogRef: MatDialogRef;\n  logged = false;\n  profile: string = \"\";\n  intervalCheck;\n  youSureButton = false;\n\n  constructor(\n    private router: Router,\n    private savedCitiesService: SavedCitiesService,\n    private logService: LogService,\n    public dialog: MatDialog,\n    private snackBar: MatSnackBar\n  ) {\n    //listening to changes in the url to remove background image\n    router.events.subscribe(() => {\n      if (!(this.router.url.includes(`/initial`))) {\n        const body = document.getElementsByTagName(\"body\");\n        body[0].classList.remove(\"initial-view\");\n      }\n    });\n  }\n\n\n  /**Initial tasks */\n  ngOnInit() {\n    this.relog();\n    this.getCities();\n    this.getLog();\n  }\n\n\n  /**Unsubscribe from Observables to avoid inefficiency*/\n  ngOnDestroy() {\n    this.routeSubscription.unsubscribe();\n    this.citiesSubscription.unsubscribe();\n    this.logSubscription.unsubscribe();\n  }\n\n  /**If there is a available token tries to restore session */\n  relog() {\n    let token = localStorage.getItem(\"Token\");\n    this.profile = localStorage.getItem(\"session\");\n    if ((token !== null) && (this.profile != null)) {\n      this.profile = this.profile.replace(/['\"]+/g, '');\n      localStorage.setItem(\"session\", this.profile);\n      this.logService.logRefresh();\n    }\n  }\n\n  /**Subscribes to changes in the current user from the log service observable */\n  getLog() {\n    this.logSubscription = this.logService.getUpdates().subscribe(logged => {\n      this.logged = logged;\n      if (this.logService.currentUser === undefined) {\n        this.profile = \"USER\";\n      } else {\n        this.profile = this.logService.currentUser.username.replace(/['\"]+/g, ''); //For showing settings\n      }\n      if ((this.savedCities.length  {\n\n      this.savedCities = cities;\n      if (cities.length > 0) {\n        this.notEmpty = true;\n        this.emptyList = 'none';\n      } else {\n        this.notEmpty = false;\n      }\n    });\n  }\n\n  /**Shows (if available) or hides the favourites sidenav */\n  toggleFavourites() {\n    if (this.youSureButton) {\n      //Hides confirming deleted button\n      this.youSureButton = false;\n    }\n    if (this.notEmpty) {\n      this.opened = !this.opened;\n      this.emptyList = 'none';\n    } else {\n      //Not shown without cities\n      this.opened = false;\n      this.emptyList = 'block';\n    }\n  }\n\n  /**Asks cities service to delete de list and updates its own */\n  deleteCities() {\n    this.youSureButton = false;\n    this.savedCitiesService.deleteCities();\n    this.getCities();\n    this.opened = false;\n    this.notEmpty = false;\n    this.snackBar.open(\"Favourite cities have been deleted\", \"Ok\", { duration: 3000 });\n  }\n\n  /**Shows the confirmation option to delete the cities list */\n  youSure() {\n    this.youSureButton = true; //Activates the button to deleteCities()\n  }\n\n  /**Cancels deletion of cities list */\n  notSure() {\n    this.youSureButton = false;\n  }\n\n  /**Closes session if logged in, shows dialog component to log in if there isn't a current running session*/\n  toggleSession() {\n    if (this.logged) {\n      this.logService.closeSession();\n      this.deleteCities();\n      return;\n    }\n\n    //Opens a dialog ref with a form to log in\n    this.dialogRef = this.dialog.open(LogginDialogComponent);\n\n    this.dialogRef.afterClosed().subscribe(data => {\n      //when dialog is closed we try the session with the service's method\n      if (data !== undefined) {\n        if (data.username !== undefined || data.password !== undefined) {\n          this.logService.logIn(data.username, data.password); //Call the log service\n        }\n      }\n    });\n\n  }\n\n\n}\n    \n\n    \n        \n\n  \n  \n    \n      Weather Angular\n      Home\n      Favourites\n\n      \n\n      \n        {{profile}}\n      \n\n      \n        Log in\n      \n\n      \n\n      check_circle\n\n\n      \n        more_vert\n      \n      \n\n        \n          Log in\n        \n\n        \n          Settings\n        \n\n        \n          Log out\n        \n\n        \n          About\n        \n\n\n      \n    \n  \n\n\n  There are no cities saved to favourites-->\n\n  \n    \n      \n        \n           {{savedCity.name}} \n        \n        Delete all\n\n      \n\n      \n        \n        \n        \n      \n    \n    \n      \n        This is going to delete all yor favourite cities when you log out. Are you sure? \n        \n          Yes\n          No\n        \n      \n    \n  \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '              Weather Angular      Home      Favourites                    {{profile}}                    Log in                  check_circle              more_vert                              Log in                          Settings                          Log out                          About                      There are no cities saved to favourites-->                               {{savedCity.name}}                 Delete all                                                                This is going to delete all yor favourite cities when you log out. Are you sure?                   Yes          No                    '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NavigationComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NewUserComponent.html":{"url":"components/NewUserComponent.html","title":"component - NewUserComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NewUserComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/new-user/new-user.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-new-user\n            \n\n            \n                styleUrls\n                new-user.component.css\n            \n\n\n\n            \n                templateUrl\n                ./new-user.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                form\n                            \n                            \n                                password2\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                launchForm\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                submit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(formBuilder: FormBuilder, logService: LogService)\n                    \n                \n                        \n                            \n                                Defined in src/app/new-user/new-user.component.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        logService\n                                                  \n                                                        \n                                                                    LogService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            launchForm\n                            \n                            \n                        \n                    \n                \n                \n                    \nlaunchForm()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:28\n                            \n                        \n\n\n                \n                    \n                            Creates the form with its Validators\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:23\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submit\n                            \n                            \n                        \n                    \n                \n                \n                    \nsubmit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:39\n                            \n                        \n\n\n                \n                    \n                            Checks if the form is valid and asks the log service to create a new user \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            form\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        form:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password2\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        password2:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:15\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Router } from \"@angular/router\";\nimport { FormGroup, FormBuilder, Validators, AbstractControl } from '@angular/forms';\nimport { LogService } from '../log.service';\n\n@Component({\n  selector: 'app-new-user',\n  templateUrl: './new-user.component.html',\n  styleUrls: ['./new-user.component.css']\n})\n/** This component simply launches a form to ask the log service to create a new user with the info adquired in the form */\nexport class NewUserComponent implements OnInit {\n\n\n  password2: string;\n  form: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private logService: LogService\n  ) { }\n\n  ngOnInit() {\n    this.launchForm();\n  }\n\n  /**Creates the form with its Validators*/\n  launchForm() {\n    this.form = this.formBuilder.group({\n      username: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(20), Validators.required])],\n      password: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])],\n      password2: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])]\n    }, {\n        validator: PasswordValidation.MatchPassword\n      });\n  }\n\n  /**Checks if the form is valid and asks the log service to create a new user */\n  submit() {\n    if (this.form.valid) {\n\n      this.logService.createUser(this.form.value.username, this.form.value.password);\n\n    } else {\n      console.log(\"Form values not valid\");\n    }\n  }\n}\n\n/**Validates that the password has been repeated correctly*/\nexport class PasswordValidation {\n  static MatchPassword(AC: AbstractControl) {\n    let p1 = AC.get('password');\n    let p2 = AC.get('password2');\n    if (p1.value != p2.value) {\n      AC.get('password2').setErrors({ MatchPassword: true })\n    } else {\n      return null\n    }\n\n  }\n}\n    \n\n    \n        \n  \n    \n      \n        \n          \n        \n      \n      \n        \n          \n        \n      \n      \n        \n          \n        \n      \n      \n        Go!\n      \n    \n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                      Go!            '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NewUserComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordValidation.html":{"url":"classes/PasswordValidation.html","title":"class - PasswordValidation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordValidation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/new-user/new-user.component.ts\n        \n\n            \n                Description\n            \n            \n                Validates that the password has been repeated correctly\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                MatchPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            MatchPassword\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        MatchPassword(AC: AbstractControl)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/new-user/new-user.component.ts:52\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        AC\n                                                        \n                                                                    AbstractControl\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Router } from \"@angular/router\";\nimport { FormGroup, FormBuilder, Validators, AbstractControl } from '@angular/forms';\nimport { LogService } from '../log.service';\n\n@Component({\n  selector: 'app-new-user',\n  templateUrl: './new-user.component.html',\n  styleUrls: ['./new-user.component.css']\n})\n/** This component simply launches a form to ask the log service to create a new user with the info adquired in the form */\nexport class NewUserComponent implements OnInit {\n\n\n  password2: string;\n  form: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private logService: LogService\n  ) { }\n\n  ngOnInit() {\n    this.launchForm();\n  }\n\n  /**Creates the form with its Validators*/\n  launchForm() {\n    this.form = this.formBuilder.group({\n      username: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(20), Validators.required])],\n      password: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])],\n      password2: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])]\n    }, {\n        validator: PasswordValidation.MatchPassword\n      });\n  }\n\n  /**Checks if the form is valid and asks the log service to create a new user */\n  submit() {\n    if (this.form.valid) {\n\n      this.logService.createUser(this.form.value.username, this.form.value.password);\n\n    } else {\n      console.log(\"Form values not valid\");\n    }\n  }\n}\n\n/**Validates that the password has been repeated correctly*/\nexport class PasswordValidation {\n  static MatchPassword(AC: AbstractControl) {\n    let p1 = AC.get('password');\n    let p2 = AC.get('password2');\n    if (p1.value != p2.value) {\n      AC.get('password2').setErrors({ MatchPassword: true })\n    } else {\n      return null\n    }\n\n  }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RainAndSnowService.html":{"url":"injectables/RainAndSnowService.html","title":"injectable - RainAndSnowService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  RainAndSnowService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/graphs/rainAndSnow/rain-and-snow.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                chart\n                            \n                            \n                                dates\n                            \n                            \n                                rain\n                            \n                            \n                                snow\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRainAndSnowChart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:15\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getRainAndSnowChart\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetRainAndSnowChart(forecast: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:19\n                            \n                        \n\n\n                \n                    \n                            Returns a chart with Rain and Snow data \n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        forecast\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Chart\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        chart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dates\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dates:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rain\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rain:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        snow:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/rainAndSnow/rain-and-snow.service.ts:14\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Forecast } from '../../city/data';\nimport { Chart } from 'chart.js';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n/* This service gets the forecast values formated and returns a rain and snow chart*/\nexport class RainAndSnowService {\n\n  chart: Chart;\n  rain: number[];\n  snow: number[];\n  dates: string[];\n\n  constructor() { }\n  /**Returns a chart with Rain and Snow data */\n  getRainAndSnowChart(forecast: Array): Chart {\n\n    this.rain = forecast.map(item => {\n      //extracts a Array with numbers indicating the rain forecast l/m^2\n      return item.rain;\n    });\n\n    this.snow = forecast.map(item => {\n      //extracts a Array with numbers indicating the snow forecast l/m^2\n      return item.snow;\n    });\n\n    this.dates = forecast.map(item => {\n      //extracts a Array with strings indicating dates\n      return item.dt_txt;\n    });\n\n    this.chart = new Chart('rainAndSnow', {\n      type: 'bar',\n      data: {\n        labels: this.dates,\n        datasets: [\n          {\n            label: 'Rain l/m^2',\n            data: this.rain,\n            borderColor: \"#0000ff\",\n            fill: false,\n            showLine: true,\n            backgroundColor: \"#0000ff\"\n          },\n          {\n            label: 'Snow l/m^2',\n            data: this.snow,\n            borderColor: \"#ffffff\",\n            fill: false,\n            backgroundColor: \"#aaaaaa\"\n          }\n        ]\n      },\n      options: {\n\n        legend: {\n          display: true\n        },\n        scales: {\n          xAxes: [{\n            display: true\n          }],\n          yAxes: [{\n            display: true\n          }],\n        }\n      }\n    });\n\n    return this.chart;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RespuestaForecast.html":{"url":"classes/RespuestaForecast.html","title":"class - RespuestaForecast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  RespuestaForecast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/city/data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                list\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/city/data.ts:96\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            list\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        list:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/city/data.ts:96\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Weather } from '../weather'\n\n\nexport class Data {\n    parameter: string;\n    value: string;\n\n    constructor() { }\n}\n/* Data is used to transfer information as an array of Data to the MatTable in city */\n\nexport class Forecast {\n\n    clouds: { all: number };\n    dt: number;\n    dt_txt: string;\n\n    main: {\n        grnd_level: number,\n        humidity: number,\n        pressure: number,\n        sea_level: number,\n        temp: number,\n        temp_kf: number,\n        temp_max: number,\n        temp_min: number\n    };\n\n    weather: Array;\n    /*\n        id\n        main\n        description\n        icon\n    */\n\n    wind: {\n        speed: number,\n        deg: number\n    }\n\n    rain: number;\n    snow: number;\n    constructor(element: Forecast) {\n        this.weather = new Array();\n\n        this.clouds = element.clouds;\n        this.dt = element.dt;\n        this.dt_txt = element.dt_txt;\n\n        this.main = {\n            grnd_level: element.main.grnd_level,\n            humidity: element.main.humidity,\n            pressure: element.main.pressure,\n            sea_level: element.main.sea_level,\n            temp: element.main.temp,\n            temp_kf: element.main.temp_kf,\n            temp_max: element.main.temp_max,\n            temp_min: element.main.temp_min\n        };\n\n\n        element.weather.forEach((weather: Weather) => {\n            const w = new Weather();\n            w.main = weather.main;\n            w.id = weather.id;\n            w.icon = weather.icon;\n            w.description = weather.description;\n\n            this.weather.push(w);\n        });\n\n        this.wind = {\n            speed: element.wind.speed,\n            deg: element.wind.deg\n        };\n\n        if (element.rain == undefined) {\n            //console.log(\"rain undefined\");\n        } else {\n            this.rain = element.rain[\"3h\"];\n        }\n\n        if (element.snow == undefined) {\n            //console.log(\"snow undefined\");\n        } else {\n            this.snow = element.snow[\"3h\"];\n        }\n\n    }\n}\n/* The object Forecast stores all the information about the weather provided by the service for a certain hour */\n\nexport class RespuestaForecast {\n\n    list: Array;\n\n    constructor() { }\n}\n\n/* \nData types used for sending data to the mat-table, Graph services and managing a server response containing the forecast for several hours.\n*/\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SavedCitiesService.html":{"url":"injectables/SavedCitiesService.html","title":"injectable - SavedCitiesService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  SavedCitiesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/saved-cities.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cities\n                            \n                            \n                                city\n                            \n                            \n                                updated\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteCities\n                            \n                            \n                                getSavedCities\n                            \n                            \n                                getUpdates\n                            \n                            \n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/saved-cities.service.ts:17\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteCities\n                            \n                            \n                        \n                    \n                \n                \n                    \ndeleteCities()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:59\n                            \n                        \n\n\n                \n                    \n                            Removes cities list data from local Storage and updates the component's city list emmiting a Observable with the list empty \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getSavedCities\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetSavedCities()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:28\n                            \n                        \n\n\n                \n                    \n                            Gets the cities list from the localStorage and launches an Observable through updated\n\n\n                            \n                                Returns :     SavedCity[]\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getUpdates\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetUpdates()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:23\n                            \n                        \n\n\n                \n                    \n                            Returns an Observable that emits new values of the Saved cities List \n\n\n                            \n                                Returns :     Observable\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            save\n                            \n                            \n                        \n                    \n                \n                \n                    \nsave(cityToSave: SavedCity)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:45\n                            \n                        \n\n\n                \n                    \n                            Includes a non existing city in the list and updates the localStorage cities list \n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cityToSave\n                                                        \n                                                                    SavedCity\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cities\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cities:     SavedCity[]\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            city\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        city:     SavedCity\n\n                    \n                \n                    \n                        \n                            Type :     SavedCity\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        updated:     \n\n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/saved-cities.service.ts:17\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { SavedCity } from './savedCity';\nimport { Observable, Subject } from 'rxjs'\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\n/** This service manages the list of cities saved in the local storage.\nReturns an Observable with changes in the cities list an can modify or delete the list*/\nexport class SavedCitiesService {\n\n  cities: SavedCity[];\n  city: SavedCity;\n  updated = new Subject();\n\n\n  constructor() { }\n\n  /**Returns an Observable that emits new values of the Saved cities List */\n  getUpdates(): Observable {\n    return >this.updated.asObservable();\n  }\n\n  /**Gets the cities list from the localStorage and launches an Observable through updated*/\n  getSavedCities(): SavedCity[] {\n    this.cities = [];\n    if (JSON.parse(localStorage.getItem(\"favouriteCities\")) === null) { //if there are no cities in the local storage\n      this.updated.next(this.cities); //return cities = [] from the Observable\n      return [];\n    }\n    JSON.parse(localStorage.getItem(\"favouriteCities\")).forEach(element => { //Get back from LS\n      this.city = new SavedCity(element.name, element.id, element.country, element.coord.lon, element.coord.lat);\n      this.cities.push(this.city);\n      this.updated.next(this.cities); //Return Array from the Observable\n      return this.cities;\n    });\n\n    return this.cities; //Never reaches this instruction? Yes, surpridingly it does, and everything crashed when I commented it\n  }\n\n  /**Includes a non existing city in the list and updates the localStorage cities list */\n  save(cityToSave: SavedCity) {\n    if (\n      this.cities.find(city => city.id === cityToSave.id) == undefined\n    ) {\n      this.cities.push(cityToSave);\n      localStorage.setItem(\"favouriteCities\", JSON.stringify(this.cities));\n      this.updated.next(this.cities); //Metemos cities en el Subject\n    } else {\n      //console.log('This city has already been saved');\n    }\n\n  }\n\n  /**Removes cities list data from local Storage and updates the component's city list emmiting a Observable with the list empty */\n  deleteCities() {\n    localStorage.removeItem(\"favouriteCities\");\n    this.getSavedCities(); //Send an updated observable with the cities available\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SavedCity.html":{"url":"classes/SavedCity.html","title":"class - SavedCity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  SavedCity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/savedCity.ts\n        \n\n            \n                Description\n            \n            \n                This class is for displaying and linking to the searched cities. It is used too for storing favourite cities.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                coord\n                            \n                            \n                                country\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                sys\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                insertBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, id: string, country: string, lon: number, lat: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/savedCity.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        country\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        lon\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        lat\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            coord\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        coord:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/savedCity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            country\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        country:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/savedCity.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/savedCity.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/savedCity.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sys\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sys:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/savedCity.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            insertBody\n                            \n                            \n                        \n                    \n                \n                \n                    \ninsertBody()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/savedCity.ts:26\n                            \n                        \n\n\n                \n                    \n                            Prepares a string to make an insert to the server\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class SavedCity {\n    name: string;\n    id: string;\n    sys: { country: string };\n    country: string;\n    coord: {\n        lon: number,\n        lat: number\n    };\n\n    constructor(name: string, id: string, country: string = '', lon: number = 0, lat: number = 0) {\n        this.name = name;\n        this.id = id;\n        this.sys = {\n            country: country\n        };\n\n        this.coord = {\n            lon: lon,\n            lat: lat\n        };\n    }\n\n    /**Prepares a string to make an insert to the server*/\n    insertBody(): string {\n        return `{\n            \"data\": {\n              \"ID\": ` + this.id + `,\n              \"COUNTRY\": \"` + this.sys.country + `\",\n              \"LAT\": ` + this.coord.lat + `,\n              \"LON\": ` + this.coord.lon + `,\n              \"NAME\": \"` + this.name + `\"\t\n            }\n            \n           }`;\n    }\n} \n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServedCity.html":{"url":"classes/ServedCity.html","title":"class - ServedCity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServedCity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/servedCity.ts\n        \n\n            \n                Description\n            \n            \n                These are classes to give a type to the server DB results and avoid errors \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                COUNTRY\n                            \n                            \n                                ID\n                            \n                            \n                                LAT\n                            \n                            \n                                LON\n                            \n                            \n                                NAME\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, id: number, country: string, lon: number, lat: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/servedCity.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        country\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        lon\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        lat\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            COUNTRY\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        COUNTRY:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ID\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ID:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LAT\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        LAT:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LON\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        LON:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NAME\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        NAME:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:3\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ServedCity {\n    NAME: string;\n    ID: number;\n    COUNTRY: string;\n    LON: number;\n    LAT: number;\n\n\n    constructor(name: string, id: number, country: string = '', lon: number = 0, lat: number = 0) {\n        this.NAME = name;\n        this.ID = id;\n        this.COUNTRY = country;\n        this.LON = lon;\n        this.LAT = lat;\n\n    }\n}\n\nexport class ServerResponse {\n    data: Array;\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServerResponse.html":{"url":"classes/ServerResponse.html","title":"class - ServerResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServerResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/servedCity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        data:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/servedCity.ts:21\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ServedCity {\n    NAME: string;\n    ID: number;\n    COUNTRY: string;\n    LON: number;\n    LAT: number;\n\n\n    constructor(name: string, id: number, country: string = '', lon: number = 0, lat: number = 0) {\n        this.NAME = name;\n        this.ID = id;\n        this.COUNTRY = country;\n        this.LON = lon;\n        this.LAT = lat;\n\n    }\n}\n\nexport class ServerResponse {\n    data: Array;\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SettingsComponent.html":{"url":"components/SettingsComponent.html","title":"component - SettingsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SettingsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/settings/settings.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-settings\n            \n\n            \n                styleUrls\n                settings.component.css\n            \n\n\n\n            \n                templateUrl\n                ./settings.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentUser\n                            \n                            \n                                deleteAccount\n                            \n                            \n                                deleteAccount1\n                            \n                            \n                                formDelete\n                            \n                            \n                                formPassword\n                            \n                            \n                                logSubscription\n                            \n                            \n                                opened\n                            \n                            \n                                pwd\n                            \n                            \n                                valueTime\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildDeleteForm\n                            \n                            \n                                buildPsswdForm\n                            \n                            \n                                changePassword\n                            \n                            \n                                delAccnt\n                            \n                            \n                                isLogged\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                passwd\n                            \n                            \n                                setCurrentUser\n                            \n                            \n                                showDelete\n                            \n                            \n                                submitDelete\n                            \n                            \n                                submitPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(log: LogService, savedCitiesService: SavedCitiesService, router: Router, formBuilder: FormBuilder)\n                    \n                \n                        \n                            \n                                Defined in src/app/settings/settings.component.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        log\n                                                  \n                                                        \n                                                                    LogService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        savedCitiesService\n                                                  \n                                                        \n                                                                    SavedCitiesService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            buildDeleteForm\n                            \n                            \n                        \n                    \n                \n                \n                    \nbuildDeleteForm()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:70\n                            \n                        \n\n\n                \n                    \n                            Builds the Form to delete account (asks for the password)\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            buildPsswdForm\n                            \n                            \n                        \n                    \n                \n                \n                    \nbuildPsswdForm()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:60\n                            \n                        \n\n\n                \n                    \n                            Builds the form to change password with its validators \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            changePassword\n                            \n                            \n                        \n                    \n                \n                \n                    \nchangePassword(passwd: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:86\n                            \n                        \n\n\n                \n                    \n                            Asks log service to update the password \n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        passwd\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            delAccnt\n                            \n                            \n                        \n                    \n                \n                \n                    \ndelAccnt()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:118\n                            \n                        \n\n\n                \n                    \n                            Shows deleting account confirmation form \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isLogged\n                            \n                            \n                        \n                    \n                \n                \n                    \nisLogged()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:77\n                            \n                        \n\n\n                \n                    \n                            If session is closed redirect to home\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:43\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:37\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            passwd\n                            \n                            \n                        \n                    \n                \n                \n                    \npasswd()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:111\n                            \n                        \n\n\n                \n                    \n                            Shows changing password form \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setCurrentUser\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetCurrentUser()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:48\n                            \n                        \n\n\n                \n                    \n                            Gets the info about the current user and navigates to home if there isn'n any user \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            showDelete\n                            \n                            \n                        \n                    \n                \n                \n                    \nshowDelete()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:125\n                            \n                        \n\n\n                \n                    \n                            Shows deleting account options \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitDelete\n                            \n                            \n                        \n                    \n                \n                \n                    \nsubmitDelete()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:100\n                            \n                        \n\n\n                \n                    \n                            If the delete account form is valid asks log service to delete the account  \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitPassword\n                            \n                            \n                        \n                    \n                \n                \n                    \nsubmitPassword()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:91\n                            \n                        \n\n\n                \n                    \n                            If the password change form is valid executes changePassword() \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUser\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        currentUser:     UserServer\n\n                    \n                \n                    \n                        \n                            Type :     UserServer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteAccount\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        deleteAccount:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteAccount1\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        deleteAccount1:     \n\n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formDelete\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        formDelete:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formPassword\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        formPassword:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        logSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            opened\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        opened:     \n\n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pwd\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        pwd:     \n\n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            valueTime\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        valueTime:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { LogService } from '../log.service';\nimport { UserServer } from '../userServer';\nimport { SavedCitiesService } from '../saved-cities.service';\nimport { Router } from \"@angular/router\";\nimport { Subscription } from 'rxjs';\nimport { FormGroup, FormBuilder, Validators, AbstractControl } from '@angular/forms';\nimport { PasswordValidation } from '../new-user/new-user.component';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.css']\n})\n\n/**This component shows the settings that can be changed for the current user and asks the log service to perform such changes */\nexport class SettingsComponent implements OnInit {\n\n  currentUser: UserServer;\n  logSubscription: Subscription;\n  opened = true;\n  formPassword: FormGroup;\n  formDelete: FormGroup;\n  valueTime = 1;\n  pwd = true;\n  deleteAccount = false;\n  deleteAccount1 = false;\n\n\n  constructor(\n    private log: LogService,\n    private savedCitiesService: SavedCitiesService,\n    private router: Router,\n    private formBuilder: FormBuilder\n  ) { }\n\n  ngOnInit() {\n    this.setCurrentUser();\n    this.isLogged();\n    this.buildPsswdForm();\n    this.buildDeleteForm();\n  }\n  ngOnDestroy() {\n    this.logSubscription.unsubscribe();\n  }\n\n  /**Gets the info about the current user and navigates to home if there isn'n any user */\n  setCurrentUser() {\n    if (this.log.currentUser === undefined) {\n      this.router.navigate(['initial']);\n    } else {\n      this.currentUser = this.log.currentUser;\n      this.currentUser.citiesList = this.savedCitiesService.getSavedCities();\n    }\n\n  }\n\n\n  /**Builds the form to change password with its validators */\n  buildPsswdForm() {\n    this.formPassword = this.formBuilder.group({\n      password: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])],\n      password2: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])]\n    }, {\n        validator: PasswordValidation.MatchPassword\n      })\n  }\n\n  /**Builds the Form to delete account (asks for the password)*/\n  buildDeleteForm() {\n    this.formDelete = this.formBuilder.group({\n      password: ['', Validators.compose([Validators.minLength(5), Validators.maxLength(25), Validators.required])]\n    });\n  }\n\n  /**If session is closed redirect to home*/\n  isLogged() {\n    this.logSubscription = this.log.getUpdates().subscribe(logged => {\n      if (!logged) {\n        this.router.navigate(['initial']);\n      }\n    });\n  }\n\n  /**Asks log service to update the password */\n  changePassword(passwd: string) {\n    this.log.updatePassword(passwd);\n  }\n\n  /**If the password change form is valid executes changePassword() */\n  submitPassword() {\n    if (this.formPassword.valid) {\n      this.changePassword(this.formPassword.value.password);\n      //Resets the form\n      this.buildPsswdForm();\n    }\n  }\n\n  /**If the delete account form is valid asks log service to delete the account  */\n  submitDelete() {\n    if (this.formDelete.valid) {\n      let username = this.currentUser.username;\n      this.log.closeSession();\n      this.log.deleteUser(username, this.formDelete.value.password);\n    }\n  }\n\n  //Methods to show different contents\n\n  /**Shows changing password form */\n  passwd() {\n    this.pwd = true;\n    this.deleteAccount = false;\n    this.deleteAccount1 = false;\n  }\n\n  /**Shows deleting account confirmation form */\n  delAccnt() {\n    this.pwd = false;\n    this.deleteAccount = false;\n    this.deleteAccount1 = true;\n  }\n\n  /**Shows deleting account options */\n  showDelete() {\n    this.pwd = false;\n    this.deleteAccount = true;\n    this.deleteAccount1 = false;\n  }\n}\n    \n\n    \n        \n  {{currentUser.username}} settings:\n\n\n\n\n\n  \n    \n      \n        Change password\n      \n    \n    \n      \n        Delete account\n      \n    \n  \n\n  \n\n\n    \n    \n      \n        \n          \n          \n            \n              \n            \n          \n          \n            \n              \n            \n          \n          \n            Go!\n          \n          \n        \n      \n    \n\n\n    \n    \n      \n      \n      \n        ¿Are you sure you want to permanently delete your account?\n      \n      \n      \n        \n          Yes, let's delete my account\n        \n        \n          No, I shouldn't do this\n        \n      \n      \n      \n    \n    \n      \n        \n          \n          \n            \n              \n            \n          \n          \n          \n          \n            Delete\n          \n          \n          \n        \n      \n    \n\n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  {{currentUser.username}} settings:                    Change password                            Delete account                                                                                                                                                                                        Go!                                                                        ¿Are you sure you want to permanently delete your account?                                    Yes, let\\'s delete my account                          No, I shouldn\\'t do this                                                                                                                                                              Delete                                                  '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'GraphsComponent', 'selector': 'app-graphs'},{'name': 'InitialComponent', 'selector': 'app-initial'},{'name': 'InterceptorComponent', 'selector': 'app-interceptor'},{'name': 'LogginDialogComponent', 'selector': 'app-loggin-dialog'},{'name': 'NavigationComponent', 'selector': 'app-navigation'},{'name': 'NewUserComponent', 'selector': 'app-new-user'},{'name': 'SettingsComponent', 'selector': 'app-settings'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SettingsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TemperatureService.html":{"url":"injectables/TemperatureService.html","title":"injectable - TemperatureService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  TemperatureService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/graphs/temperature/temperature.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                chart\n                            \n                            \n                                dates\n                            \n                            \n                                temperatures\n                            \n                            \n                                temperaturesMax\n                            \n                            \n                                temperaturesMin\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTemperatureChart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/graphs/temperature/temperature.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getTemperatureChart\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetTemperatureChart(forecast: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:21\n                            \n                        \n\n\n                \n                    \n                            Returns a chart with temperatures data \n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        forecast\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Chart\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chart\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        chart:     Chart\n\n                    \n                \n                    \n                        \n                            Type :     Chart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dates\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dates:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperatures\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperatures:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperaturesMax\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperaturesMax:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperaturesMin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        temperaturesMin:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/graphs/temperature/temperature.service.ts:15\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Forecast } from '../../city/data';\nimport { Chart } from 'chart.js';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n/* This service gets the forecast values formated and returns a temperature chart*/\nexport class TemperatureService {\n\n  chart: Chart;\n  temperatures: number[];\n  temperaturesMax: number[];\n  temperaturesMin: number[];\n  dates: string[];\n\n  constructor() { }\n\n  /**Returns a chart with temperatures data */\n  getTemperatureChart(forecast: Array): Chart {\n\n    this.temperatures = forecast.map(item => {\n      //extracts a Array with numbers indicating the expected temperatures ºC\n      return item.main.temp - 273.15;\n    });\n\n\n    this.temperaturesMax = forecast.map(item => {\n      //extracts a Array with numbers indicating the maximum temperatures ºC\n      return item.main.temp_max - 273.15;\n    });\n\n    this.temperaturesMin = forecast.map(item => {\n      //extracts a Array with numbers indicating the minimum temperatures ºC\n      return item.main.temp_min - 273.15;\n    });\n\n    this.dates = forecast.map(item => {\n      //extracts a Array with strings indicating dates\n      return item.dt_txt;\n    });\n\n    this.chart = new Chart('temperature', {\n      type: 'line',\n      data: {\n        labels: this.dates,\n        datasets: [\n          {\n            label: 'temperature ºC',\n            data: this.temperatures,\n            borderColor: \"#3cba9f\",\n            fill: false,\n            showLine: true\n          },\n          {\n            label: 'Max temperature ºC',\n            data: this.temperaturesMax,\n            borderColor: \"#ff0000\",\n            fill: false\n          },\n          {\n            label: 'Min temperature ºC',\n            data: this.temperaturesMin,\n            borderColor: \"#0000FF\",\n            fill: false\n          }\n        ]\n      },\n      options: {\n\n        legend: {\n          display: true,\n          labels: {\n\n          }\n        },\n        scales: {\n          xAxes: [{\n            display: true\n          }],\n          yAxes: [{\n            display: true\n          }],\n        }\n      }\n    });\n\n    return this.chart;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserServer.html":{"url":"classes/UserServer.html","title":"class - UserServer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserServer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/userServer.ts\n        \n\n            \n                Description\n            \n            \n                This is a class to manage User's information \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                citiesId\n                            \n                            \n                                citiesList\n                            \n                            \n                                favouriteCities\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                display\n                            \n                            \n                                setFromList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/userServer.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesId\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesId:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citiesList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        citiesList:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            favouriteCities\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        favouriteCities:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        password:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        username:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/userServer.ts:4\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            display\n                            \n                            \n                        \n                    \n                \n                \n                    \ndisplay()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/userServer.ts:13\n                            \n                        \n\n\n                \n                    \n                            Returns a string displaying the user information \n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setFromList\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetFromList(list: Array)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/userServer.ts:17\n                            \n                        \n\n\n                \n                    \n                            Fills from a unique string (as stored in DB) an Array of strings containing IDs \n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        list\n                                                        \n                                                                    Array\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { SavedCity } from \"./savedCity\";\n/**This is a class to manage User's information */\nexport class UserServer {\n    username: string;\n    password: string;\n    favouriteCities: string;\n    citiesId: Array;\n    citiesList: Array;\n\n    constructor() { }\n\n    /**Returns a string displaying the user information */\n    display(): string {\n        return \"Username: \" + this.username + \"\\nPassword: \" + this.password + \"\\nCities ids: \" + this.citiesId;\n    }\n    /**Fills from a unique string (as stored in DB) an Array of strings containing IDs */\n    setFromList(list: Array) {\n        this.favouriteCities = list.map(item => item.id).join(',');\n    }\n}\n\nexport class CitiesResponse {\n    data: Array;\n}\n\nexport class CitiesResponseUnit {\n    CITIES: string;\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Weather.html":{"url":"classes/Weather.html","title":"class - Weather","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Weather\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/weather.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                icon\n                            \n                            \n                                id\n                            \n                            \n                                main\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/weather.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        description:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weather.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            icon\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        icon:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weather.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weather.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            main\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        main:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weather.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Weather {\n\n    id: number;\n    main: string;\n    description: string;\n    icon: string;\n\n    constructor(){}\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WeatherNow.html":{"url":"classes/WeatherNow.html","title":"class - WeatherNow","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  WeatherNow\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/weatherNow.ts\n        \n\n            \n                Description\n            \n            \n                This class stores the information about a city's current weather received from the API and prepares it to being displayed in a mat table\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aux\n                            \n                            \n                                base\n                            \n                            \n                                clouds\n                            \n                            \n                                cod\n                            \n                            \n                                coord\n                            \n                            \n                                dt\n                            \n                            \n                                id\n                            \n                            \n                                main\n                            \n                            \n                                name\n                            \n                            \n                                rain\n                            \n                            \n                                result\n                            \n                            \n                                snow\n                            \n                            \n                                sys\n                            \n                            \n                                weather\n                            \n                            \n                                wind\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAndSave\n                            \n                            \n                                displayValues\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/weatherNow.ts:31\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            aux\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        aux:     Data\n\n                    \n                \n                    \n                        \n                            Type :     Data\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            base\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        base:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clouds\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        clouds:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cod:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            coord\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        coord:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dt:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            main\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        main:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rain\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        rain:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            result\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        result:     \n\n                    \n                \n                    \n                        \n                            Default value : new Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        snow:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sys\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sys:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            weather\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        weather:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wind\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        wind:     literal type\n\n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weatherNow.ts:18\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            checkAndSave\n                            \n                            \n                        \n                    \n                \n                \n                    \ncheckAndSave(text: string, variable: any, additional: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weatherNow.ts:179\n                            \n                        \n\n\n                \n                    \n                            Gives a format and pushes data to an array \n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        text\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        variable\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        additional\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                ''\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            displayValues\n                            \n                            \n                        \n                    \n                \n                \n                    \ndisplayValues()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weatherNow.ts:106\n                            \n                        \n\n\n                \n                    \n                            Returns an Array prepared to display weather info in a mat Table in the city component \n\n\n                            \n                                Returns :     Array\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            set\n                            \n                            \n                        \n                    \n                \n                \n                    \nset(rx?: WeatherNow)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weatherNow.ts:38\n                            \n                        \n\n\n                \n                    \n                            Created to set from a server response the class attributes \n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rx\n                                                        \n                                                                    WeatherNow\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Weather } from './weather';\nimport { Data } from './city/data'\n\n\n/** This class stores the information about a city's current weather received from the API and prepares it to being displayed in a mat table*/\nexport class WeatherNow {\n\n    coord: { lon: number, lat: number };\n    weather: Array;\n\n    /* id: number;\n    main: string;\n    description: string;\n    icon: string;*/\n\n    base: string;\n    main: { temp: number, pressure: number, humidity: number, temp_min: number, temp_max: number, sea_level: number, grnd_level: number };\n    wind: { speed: number, deg: number };\n    clouds: { all: number };\n    rain: number;\n    snow: number;\n    dt: number;\n    sys: { type: number, id: number, message: number, country: string, sunrise: number, sunset: number };\n    id: number;\n    name: string;\n    cod: number;\n\n    //Variables para el displayValues() : \n\n    result = new Array();\n    aux: Data;\n\n    constructor() {\n        this.weather = new Array();\n    }\n\n    /** Created to set from a server response the class attributes */\n    set(rx?: WeatherNow) {\n\n        this.coord = {\n            lon: rx.coord.lon,\n            lat: rx.coord.lat\n        };\n\n        rx.weather.forEach((w: Weather) => {\n\n            let wthr = new Weather();\n            wthr = {\n                id: w.id,\n                main: w.main,\n                description: w.description,\n                icon: w.icon\n            };\n\n            this.weather.push(wthr);\n        });\n\n        this.base = rx.base;\n\n        this.main = {\n            temp: rx.main.temp,\n            pressure: rx.main.pressure,\n            humidity: rx.main.humidity,\n            temp_min: rx.main.temp_min,\n            temp_max: rx.main.temp_max,\n            sea_level: rx.main.sea_level,\n            grnd_level: rx.main.grnd_level\n        };\n\n        this.wind = {\n            speed: rx.wind.speed,\n            deg: rx.wind.deg\n        };\n\n\n        this.clouds = {\n            all: rx.clouds.all\n        };\n        if (rx.rain == undefined) {\n        } else {\n            this.rain = rx.rain[\"3h\"];\n        }\n        if (rx.snow == undefined) {\n        } else {\n            this.snow = rx.snow[\"3h\"];\n        }\n        this.dt = rx.dt;\n\n        this.sys = {\n            type: rx.sys.type,\n            id: rx.sys.id,\n            message: rx.sys.message,\n            country: rx.sys.country,\n            sunrise: rx.sys.sunrise,\n            sunset: rx.sys.sunset\n        };\n\n        this.id = rx.id;\n\n        this.name = rx.name;\n\n        this.cod = rx.cod;\n    }\n\n    /**Returns an Array prepared to display weather info in a mat Table in the city component */\n    displayValues(): Array {\n\n        this.result = [];\n\n        //coord\n        this.checkAndSave('longitude', this.coord.lon, '');\n        this.checkAndSave('latitude', this.coord.lat, '');\n\n\n        //weather\n        let i = 0;\n        this.weather.forEach(w => {\n            i++;\n            this.checkAndSave('id', w.id, '(' + i + ')');\n            this.checkAndSave('main', w.main, '(' + i + ')');\n            this.checkAndSave('description', w.description, '(' + i + ')');\n            this.checkAndSave('icon', w.icon, '(' + i + ')');\n\n        });\n\n        //base\n        this.checkAndSave('base', this.base, '');\n\n        //main\n        this.checkAndSave('temperature', this.main.temp - 273.15, ' ℃');\n        this.checkAndSave('pressure', this.main.pressure, '');\n        this.checkAndSave('humidity', this.main.humidity, '');\n        this.checkAndSave('minimum temperature', this.main.temp_min - 273.15, ' ℃');\n        this.checkAndSave('maximum temperature', this.main.temp_max - 273.15, ' ℃');\n        this.checkAndSave('pressure at sea level', this.main.sea_level, '');\n        this.checkAndSave('pressure at ground level', this.main.grnd_level, '');\n\n\n        //wind\n        this.checkAndSave('Wind speed', this.wind.speed, '');\n        this.checkAndSave('Wind direction', this.wind.deg, '');\n\n        //clouds\n        this.checkAndSave('Clouds percentage', this.clouds.all, '%');\n\n        //rain\n        this.checkAndSave('Rain volume in the last 3 hours', this.rain, ' litres');\n\n        //snow\n        this.checkAndSave('Snow volume in the last 3 hours', this.snow, ' litres');\n\n        //dt\n        this.checkAndSave('dt', this.dt, '');\n\n        //sys\n        this.checkAndSave('sys type', this.sys.type, '');\n        this.checkAndSave('sys id', this.sys.id, '');\n        this.checkAndSave('sys message', this.sys.message, '');\n        this.checkAndSave('sys country', this.sys.country, '');\n        this.checkAndSave('sys sunrise', this.sys.sunrise, '');\n        this.checkAndSave('sys sunset', this.sys.sunset, '');\n\n        //id\n        this.checkAndSave('id', this.id, '');\n\n        //name\n        this.checkAndSave('name', this.name, '');\n\n        //cod\n        this.checkAndSave('cod', this.cod, '');\n\n\n        return this.result;\n        //result is an Array\n        //Data is an object with a parameter and a value\n    }\n\n    /**Gives a format and pushes data to an array */\n    checkAndSave(text: string, variable: any, additional: string = '') {\n\n        if (!(variable === undefined || variable === null)) {\n\n            this.aux = { //aux is a Data object\n                parameter: text,\n                value: variable + additional\n            };\n\n            this.result.push(this.aux);\n        }\n\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WeatherService.html":{"url":"injectables/WeatherService.html","title":"injectable - WeatherService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  WeatherService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/weather.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                weatherURL\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getForecast\n                            \n                            \n                                getWeather\n                            \n                            \n                                getWeatherByCityName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/weather.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getForecast\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetForecast(id: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weather.service.ts:32\n                            \n                        \n\n\n                \n                    \n                            Gets the free forecast by unique ID from OpenWeatherMap API \n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getWeather\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetWeather(id: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weather.service.ts:20\n                            \n                        \n\n\n                \n                    \n                            Unique identifier search \n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getWeatherByCityName\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetWeatherByCityName(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/weather.service.ts:26\n                            \n                        \n\n\n                \n                    \n                            Search by name, used to get city objects, may lead to missunderstanding with city location \n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            weatherURL\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        weatherURL:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'https://api.openweathermap.org/data/2.5/weather?q=Vigo&APPID=888b7bb3ed5f95fb9894b5c33589e6a6'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/weather.service.ts:13\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs'\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\n/** Service that makes requests to the API \"OpenWeather\" and return its responses*/\nexport class WeatherService {\n\n  private weatherURL = 'https://api.openweathermap.org/data/2.5/weather?q=Vigo&APPID=888b7bb3ed5f95fb9894b5c33589e6a6';\n\n\n\n  constructor(private http: HttpClient) { }\n\n  /**Unique identifier search */\n  getWeather(id: string): Observable {\n    this.weatherURL = `https://api.openweathermap.org/data/2.5/weather?id=${id}&APPID=888b7bb3ed5f95fb9894b5c33589e6a6`;\n    return this.http.get(this.weatherURL);\n  }\n\n  /**Search by name, used to get city objects, may lead to missunderstanding with city location */\n  getWeatherByCityName(name: string): Observable {\n    this.weatherURL = `https://api.openweathermap.org/data/2.5/weather?q=${name}&APPID=888b7bb3ed5f95fb9894b5c33589e6a6`;\n    return this.http.get(this.weatherURL);\n  }\n\n  /**Gets the free forecast by unique ID from OpenWeatherMap API */\n  getForecast(id: string): Observable {\n    this.weatherURL = `https://api.openweathermap.org/data/2.5/forecast?id=${id}&APPID=888b7bb3ed5f95fb9894b5c33589e6a6`;\n    return this.http.get(this.weatherURL);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                    src/app/about/about.component.ts\n            \n            \n                component\n            \n            \n                AboutComponent\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                    src/app/app.component.ts\n            \n            \n                component\n            \n            \n                AppComponent\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                    src/app/cities-server.service.ts\n            \n            \n                injectable\n            \n            \n                CitiesServerService\n            \n            \n                60 %\n                (6/10)\n            \n        \n        \n            \n                \n                    src/app/city/city.component.ts\n            \n            \n                component\n            \n            \n                CityComponent\n            \n            \n                15 %\n                (2/13)\n            \n        \n        \n            \n                \n                    src/app/city/data.ts\n            \n            \n                class\n            \n            \n                Data\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                    src/app/city/data.ts\n            \n            \n                class\n            \n            \n                Forecast\n            \n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                    src/app/city/data.ts\n            \n            \n                class\n            \n            \n                RespuestaForecast\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                    src/app/forecast-values.service.ts\n            \n            \n                injectable\n            \n            \n                ForecastValuesService\n            \n            \n                50 %\n                (5/10)\n            \n        \n        \n            \n                \n                    src/app/graphs/cloudsAndWind/clouds-and-wind.service.ts\n            \n            \n                injectable\n            \n            \n                CloudsAndWindService\n            \n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                    src/app/graphs/graphs.component.ts\n            \n            \n                component\n            \n            \n                GraphsComponent\n            \n            \n                15 %\n                (3/20)\n            \n        \n        \n            \n                \n                    src/app/graphs/rainAndSnow/rain-and-snow.service.ts\n            \n            \n                injectable\n            \n            \n                RainAndSnowService\n            \n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                    src/app/graphs/temperature/temperature.service.ts\n            \n            \n                injectable\n            \n            \n                TemperatureService\n            \n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                    src/app/initial/initial.component.ts\n            \n            \n                component\n            \n            \n                InitialComponent\n            \n            \n                30 %\n                (6/20)\n            \n        \n        \n            \n                \n                    src/app/interceptor/interceptor.component.ts\n            \n            \n                component\n            \n            \n                InterceptorComponent\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                    src/app/log.service.ts\n            \n            \n                injectable\n            \n            \n                LogService\n            \n            \n                38 %\n                (7/18)\n            \n        \n        \n            \n                \n                    src/app/loggin-dialog/loggin-dialog.component.ts\n            \n            \n                component\n            \n            \n                LogginDialogComponent\n            \n            \n                21 %\n                (3/14)\n            \n        \n        \n            \n                \n                    src/app/navigation/navigation.component.ts\n            \n            \n                component\n            \n            \n                NavigationComponent\n            \n            \n                38 %\n                (10/26)\n            \n        \n        \n            \n                \n                    src/app/new-user/new-user.component.ts\n            \n            \n                component\n            \n            \n                NewUserComponent\n            \n            \n                28 %\n                (2/7)\n            \n        \n        \n            \n                \n                    src/app/new-user/new-user.component.ts\n            \n            \n                class\n            \n            \n                PasswordValidation\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                    src/app/saved-cities.service.ts\n            \n            \n                injectable\n            \n            \n                SavedCitiesService\n            \n            \n                44 %\n                (4/9)\n            \n        \n        \n            \n                \n                    src/app/savedCity.ts\n            \n            \n                class\n            \n            \n                SavedCity\n            \n            \n                25 %\n                (2/8)\n            \n        \n        \n            \n                \n                    src/app/servedCity.ts\n            \n            \n                class\n            \n            \n                ServedCity\n            \n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                    src/app/servedCity.ts\n            \n            \n                class\n            \n            \n                ServerResponse\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                    src/app/settings/settings.component.ts\n            \n            \n                component\n            \n            \n                SettingsComponent\n            \n            \n                43 %\n                (10/23)\n            \n        \n        \n            \n                \n                    src/app/userServer.ts\n            \n            \n                class\n            \n            \n                CitiesResponse\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                    src/app/userServer.ts\n            \n            \n                class\n            \n            \n                CitiesResponseUnit\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                    src/app/userServer.ts\n            \n            \n                class\n            \n            \n                UserServer\n            \n            \n                33 %\n                (3/9)\n            \n        \n        \n            \n                \n                    src/app/weather.service.ts\n            \n            \n                injectable\n            \n            \n                WeatherService\n            \n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                    src/app/weather.ts\n            \n            \n                class\n            \n            \n                Weather\n            \n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                    src/app/weatherNow.ts\n            \n            \n                class\n            \n            \n                WeatherNow\n            \n            \n                20 %\n                (4/20)\n            \n        \n        \n            \n                \n                    src/environments/environment.prod.ts\n            \n            \n                variable\n            \n            \n                environment\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                    src/environments/environment.ts\n            \n            \n                variable\n            \n            \n                environment\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                    src/test.ts\n            \n            \n                variable\n            \n            \n                context\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                    src/test.ts\n            \n            \n                variable\n            \n            \n                require\n            \n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^6.0.4\n        \n            @angular/cdk : ^6.2.1\n        \n            @angular/common : ^6.0.4\n        \n            @angular/compiler : ^6.0.4\n        \n            @angular/core : ^6.0.4\n        \n            @angular/forms : ^6.0.4\n        \n            @angular/http : ^6.0.4\n        \n            @angular/material : ^6.2.1\n        \n            @angular/platform-browser : ^6.0.4\n        \n            @angular/platform-browser-dynamic : ^6.0.4\n        \n            @angular/pwa : ^0.6.8\n        \n            @angular/router : ^6.0.4\n        \n            @angular/service-worker : ^6.0.3\n        \n            @compodoc/compodoc : ^1.1.3\n        \n            @material/fab : ^0.36.1\n        \n            chart.js : ^2.7.2\n        \n            core-js : ^2.5.4\n        \n            hammerjs : ^2.0.8\n        \n            nvm : 0.0.4\n        \n            rxjs : ^6.0.0\n        \n            zone.js : ^0.8.26\n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nWeatherAngular\nThis project was generated with Angular CLI version 6.0.5.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\nCreating documentation\nRun npm run generate-docs to create the documentation accessible from \\Weather-Angular\\documentation\\index.html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MaterialModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n            \n                \n                    \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAboutComponent\n\nAboutComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAboutComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nCityComponent\n\nCityComponent\n\nAppModule -->\n\nCityComponent->AppModule\n\n\n\n\n\nGraphsComponent\n\nGraphsComponent\n\nAppModule -->\n\nGraphsComponent->AppModule\n\n\n\n\n\nInitialComponent\n\nInitialComponent\n\nAppModule -->\n\nInitialComponent->AppModule\n\n\n\n\n\nInterceptorComponent\n\nInterceptorComponent\n\nAppModule -->\n\nInterceptorComponent->AppModule\n\n\n\n\n\nLogginDialogComponent\n\nLogginDialogComponent\n\nAppModule -->\n\nLogginDialogComponent->AppModule\n\n\n\n\n\nNavigationComponent\n\nNavigationComponent\n\nAppModule -->\n\nNavigationComponent->AppModule\n\n\n\n\n\nNewUserComponent\n\nNewUserComponent\n\nAppModule -->\n\nNewUserComponent->AppModule\n\n\n\n\n\nSettingsComponent\n\nSettingsComponent\n\nAppModule -->\n\nSettingsComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n                \n                \n                \n                    Zoom in\n                    Reset\n                    Zoom out\n                \n            \n\n    \n            \n                \n                    \n                        \n                        \n                            3 modules\n                        \n                    \n                \n            \n            \n                \n                    \n                        \n                        10 components\n                    \n                \n            \n            \n                \n                    \n                        \n                        8 injectables\n                    \n                \n            \n            \n                \n                    \n                        \n                        12 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        \n                            8 routes\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            context   (src/.../test.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            require   (src/.../test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        context:     \n\n                    \n                \n                    \n                        \n                            Default value : require.context('./', true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        require:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        environment:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        environment:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n\n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
